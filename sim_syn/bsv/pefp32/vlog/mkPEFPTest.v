//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Mon Dec 11 19:05:39 EST 2017
//
//
// Ports:
// Name                         I/O  size props
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPEFPTest;


  // register cycle1
  reg [31 : 0] cycle1;
  wire [31 : 0] cycle1_D_IN;
  wire cycle1_EN;

  // register cycle2
  reg [31 : 0] cycle2;
  wire [31 : 0] cycle2_D_IN;
  wire cycle2_EN;

  // register cycle3
  reg [31 : 0] cycle3;
  wire [31 : 0] cycle3_D_IN;
  wire cycle3_EN;

  // register psum
  reg [7 : 0] psum;
  wire [7 : 0] psum_D_IN;
  wire psum_EN;

  // register psum2
  reg [7 : 0] psum2;
  wire [7 : 0] psum2_D_IN;
  wire psum2_EN;

  // ports of submodule clk
  wire clk_CLK_OUT;

  // ports of submodule pe1
  wire [255 : 0] pe1_load_weights_weights;
  wire [7 : 0] pe1_add_constant_constant,
	       pe1_add_input_inp,
	       pe1_get_partial_sum;
  wire pe1_EN_add_constant,
       pe1_EN_add_input,
       pe1_EN_get_partial_sum,
       pe1_EN_is_ready,
       pe1_EN_load_weights,
       pe1_EN_nonlinearity,
       pe1_EN_read_weights,
       pe1_EN_reset_pe;

  // ports of submodule pe2
  wire [255 : 0] pe2_load_weights_weights, pe2_read_weights;
  wire [7 : 0] pe2_add_constant_constant, pe2_add_input_inp;
  wire pe2_EN_add_constant,
       pe2_EN_add_input,
       pe2_EN_get_partial_sum,
       pe2_EN_is_ready,
       pe2_EN_load_weights,
       pe2_EN_nonlinearity,
       pe2_EN_read_weights,
       pe2_EN_reset_pe;

  // ports of submodule pe3
  wire [255 : 0] pe3_load_weights_weights;
  wire [7 : 0] pe3_add_constant_constant,
	       pe3_add_input_inp,
	       pe3_get_partial_sum;
  wire pe3_EN_add_constant,
       pe3_EN_add_input,
       pe3_EN_get_partial_sum,
       pe3_EN_is_ready,
       pe3_EN_load_weights,
       pe3_EN_nonlinearity,
       pe3_EN_read_weights,
       pe3_EN_reset_pe;

  // ports of submodule rstn
  wire rstn_OUT_RST;

  // rule scheduling signals
  wire CAN_FIRE_RL_test_dot_product,
       CAN_FIRE_RL_test_end,
       CAN_FIRE_RL_test_nonlinearity,
       CAN_FIRE_RL_test_rw_weights,
       WILL_FIRE_RL_test_dot_product,
       WILL_FIRE_RL_test_end,
       WILL_FIRE_RL_test_nonlinearity,
       WILL_FIRE_RL_test_rw_weights;

  // remaining internal signals
  reg [15 : 0] SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle2_39_MINUS__ETC___d557,
	       SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569,
	       SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556,
	       tmp1_i__h3545;
  reg [5 : 0] CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33,
	      CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31,
	      fpart__h6286;
  reg [1 : 0] CASE_x0264_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DON_ETC__q32,
	      CASE_x526_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q30,
	      SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d24;
  wire [97 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d193,
		_0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d196,
		_0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d204,
		_0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d213,
		_0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d222,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_ETC___d199,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d208,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d217,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d226;
  wire [77 : 0] _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d260,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d263,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d271,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d280,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d289,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d126,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d129,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d137,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d146,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d155,
		_0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d327,
		_0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d330,
		_0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d338,
		_0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d347,
		_0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d356,
		_0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d487,
		_0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d490,
		_0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d498,
		_0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d507,
		_0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d516,
		_0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d525,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d394,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d397,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d405,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d414,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d423,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d266,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d132,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_get_parti_ETC___d333,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe3_get_parti_ETC___d493,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_PLUS_I_ETC___d400,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d275,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d141,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_ge_ETC___d342,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe3_ge_ETC___d502,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_ETC___d409,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d150,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d284,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d351,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d418,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d511,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d159,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d293,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d360,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d427,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d520,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d529;
  wire [63 : 0] IF_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINUS__ETC___d42,
		x__h3527;
  wire [48 : 0] digit__h7103,
		digit__h7161,
		digit__h7241,
		digit__h7321,
		digit__h7401,
		tx159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q5,
		tx239_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q6,
		tx319_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q7,
		tx399_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q8,
		tx__h7159,
		tx__h7239,
		tx__h7319,
		tx__h7399,
		y__h7289,
		y__h7369,
		y__h7449;
  wire [47 : 0] IF_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINUS__ETC___d56,
		x__h3097;
  wire [38 : 0] digit__h10716,
		digit__h10774,
		digit__h10854,
		digit__h10934,
		digit__h11014,
		digit__h11094,
		digit__h6492,
		digit__h6550,
		digit__h6630,
		digit__h6710,
		digit__h6790,
		digit__h7703,
		digit__h7761,
		digit__h7841,
		digit__h7921,
		digit__h8001,
		digit__h8303,
		digit__h8361,
		digit__h8441,
		digit__h8521,
		digit__h8601,
		digit__h8919,
		digit__h8977,
		digit__h9057,
		digit__h9137,
		digit__h9217,
		tx055_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q21,
		tx0772_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q25,
		tx0852_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q26,
		tx0932_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q27,
		tx1012_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q28,
		tx1092_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q29,
		tx135_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q22,
		tx215_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q23,
		tx359_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q15,
		tx439_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q16,
		tx519_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q17,
		tx548_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q1,
		tx599_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q18,
		tx628_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q2,
		tx708_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q3,
		tx759_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_I_ETC__q10,
		tx788_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q4,
		tx839_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q11,
		tx919_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q12,
		tx975_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q20,
		tx999_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q13,
		tx__h10772,
		tx__h10852,
		tx__h10932,
		tx__h11012,
		tx__h11092,
		tx__h6548,
		tx__h6628,
		tx__h6708,
		tx__h6788,
		tx__h7759,
		tx__h7839,
		tx__h7919,
		tx__h7999,
		tx__h8359,
		tx__h8439,
		tx__h8519,
		tx__h8599,
		tx__h8975,
		tx__h9055,
		tx__h9135,
		tx__h9215,
		y__h10902,
		y__h10982,
		y__h11062,
		y__h11142,
		y__h6678,
		y__h6758,
		y__h6838,
		y__h7889,
		y__h7969,
		y__h8049,
		y__h8489,
		y__h8569,
		y__h8649,
		y__h9105,
		y__h9185,
		y__h9265;
  wire [31 : 0] cycle2_39_MINUS_1___d555,
		x__h10264,
		x__h2526,
		x__h3645,
		x__h3664,
		x__h6298;
  wire [16 : 0] SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINU_ETC___d164;
  wire [15 : 0] tmp2_f__h3587, tmp2_i__h3586, x__h2685, x__h6189, y_f__h4719;
  wire [7 : 0] x__h2662;
  wire [5 : 0] x__h10737,
	       x__h6513,
	       x__h7724,
	       x__h8324,
	       x__h8940,
	       y_avValue_snd__h10680,
	       y_avValue_snd__h6456,
	       y_avValue_snd__h7667,
	       y_avValue_snd__h8267,
	       y_avValue_snd__h8883;
  wire [2 : 0] SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231,
	       SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97,
	       SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298,
	       SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462,
	       SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365;
  wire [1 : 0] pe1get_partial_sum_BITS_7_TO_6__q14,
	       pe3get_partial_sum_BITS_7_TO_6__q24,
	       x662_BITS_7_TO_6__q19,
	       x685_BITS_1_TO_0__q9;
  wire NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d104,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d110,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d118,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d238,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d244,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d252,
       cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94,
       cycle1_ULT_10___d5,
       cycle2_39_ULE_8_43_AND_NOT_SEL_ARR_pe2_read_we_ETC___d575,
       cycle2_39_ULE_8___d543,
       cycle3_36_ULT_9___d439;

  // submodule clk
  ClockGen #(.v1Width(32'd5000),
	     .v2Width(32'd5000),
	     .initDelay(32'd0),
	     .initValue(32'd0),
	     .otherValue(32'd1)) clk(.CLK_OUT(clk_CLK_OUT));

  // submodule pe1
  mkPEFP32 pe1(.CLK(clk_CLK_OUT),
	       .RST_N(rstn_OUT_RST),
	       .add_constant_constant(pe1_add_constant_constant),
	       .add_input_inp(pe1_add_input_inp),
	       .load_weights_weights(pe1_load_weights_weights),
	       .EN_load_weights(pe1_EN_load_weights),
	       .EN_add_input(pe1_EN_add_input),
	       .EN_add_constant(pe1_EN_add_constant),
	       .EN_nonlinearity(pe1_EN_nonlinearity),
	       .EN_get_partial_sum(pe1_EN_get_partial_sum),
	       .EN_read_weights(pe1_EN_read_weights),
	       .EN_is_ready(pe1_EN_is_ready),
	       .EN_reset_pe(pe1_EN_reset_pe),
	       .RDY_load_weights(),
	       .RDY_add_input(),
	       .RDY_add_constant(),
	       .RDY_nonlinearity(),
	       .get_partial_sum(pe1_get_partial_sum),
	       .RDY_get_partial_sum(),
	       .read_weights(),
	       .RDY_read_weights(),
	       .is_ready(),
	       .RDY_is_ready(),
	       .RDY_reset_pe());

  // submodule pe2
  mkPEFP32 pe2(.CLK(clk_CLK_OUT),
	       .RST_N(rstn_OUT_RST),
	       .add_constant_constant(pe2_add_constant_constant),
	       .add_input_inp(pe2_add_input_inp),
	       .load_weights_weights(pe2_load_weights_weights),
	       .EN_load_weights(pe2_EN_load_weights),
	       .EN_add_input(pe2_EN_add_input),
	       .EN_add_constant(pe2_EN_add_constant),
	       .EN_nonlinearity(pe2_EN_nonlinearity),
	       .EN_get_partial_sum(pe2_EN_get_partial_sum),
	       .EN_read_weights(pe2_EN_read_weights),
	       .EN_is_ready(pe2_EN_is_ready),
	       .EN_reset_pe(pe2_EN_reset_pe),
	       .RDY_load_weights(),
	       .RDY_add_input(),
	       .RDY_add_constant(),
	       .RDY_nonlinearity(),
	       .get_partial_sum(),
	       .RDY_get_partial_sum(),
	       .read_weights(pe2_read_weights),
	       .RDY_read_weights(),
	       .is_ready(),
	       .RDY_is_ready(),
	       .RDY_reset_pe());

  // submodule pe3
  mkPEFP32 pe3(.CLK(clk_CLK_OUT),
	       .RST_N(rstn_OUT_RST),
	       .add_constant_constant(pe3_add_constant_constant),
	       .add_input_inp(pe3_add_input_inp),
	       .load_weights_weights(pe3_load_weights_weights),
	       .EN_load_weights(pe3_EN_load_weights),
	       .EN_add_input(pe3_EN_add_input),
	       .EN_add_constant(pe3_EN_add_constant),
	       .EN_nonlinearity(pe3_EN_nonlinearity),
	       .EN_get_partial_sum(pe3_EN_get_partial_sum),
	       .EN_read_weights(pe3_EN_read_weights),
	       .EN_is_ready(pe3_EN_is_ready),
	       .EN_reset_pe(pe3_EN_reset_pe),
	       .RDY_load_weights(),
	       .RDY_add_input(),
	       .RDY_add_constant(),
	       .RDY_nonlinearity(),
	       .get_partial_sum(pe3_get_partial_sum),
	       .RDY_get_partial_sum(),
	       .read_weights(),
	       .RDY_read_weights(),
	       .is_ready(),
	       .RDY_is_ready(),
	       .RDY_reset_pe());

  // submodule rstn
  InitialReset #(.RSTHOLD(32'd2)) rstn(.CLK(clk_CLK_OUT),
				       .OUT_RST(rstn_OUT_RST));

  // rule RL_test_end
  assign CAN_FIRE_RL_test_end =
	     cycle3 > 32'd10 && cycle1 > 32'd10 && !cycle2_39_ULE_8___d543 ;
  assign WILL_FIRE_RL_test_end = CAN_FIRE_RL_test_end ;

  // rule RL_test_dot_product
  assign CAN_FIRE_RL_test_dot_product = 1'd1 ;
  assign WILL_FIRE_RL_test_dot_product = 1'd1 ;

  // rule RL_test_nonlinearity
  assign CAN_FIRE_RL_test_nonlinearity = 1'd1 ;
  assign WILL_FIRE_RL_test_nonlinearity = 1'd1 ;

  // rule RL_test_rw_weights
  assign CAN_FIRE_RL_test_rw_weights = cycle2 < 32'd10 ;
  assign WILL_FIRE_RL_test_rw_weights = CAN_FIRE_RL_test_rw_weights ;

  // register cycle1
  assign cycle1_D_IN = cycle1 + 32'd1 ;
  assign cycle1_EN = 1'd1 ;

  // register cycle2
  assign cycle2_D_IN = cycle2 + 32'd1 ;
  assign cycle2_EN = CAN_FIRE_RL_test_rw_weights ;

  // register cycle3
  assign cycle3_D_IN = cycle3 + 32'd1 ;
  assign cycle3_EN = 1'd1 ;

  // register psum
  assign psum_D_IN = x__h2662 ;
  assign psum_EN = cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 ;

  // register psum2
  assign psum2_D_IN = 8'h0 ;
  assign psum2_EN = 1'b0 ;

  // submodule pe1
  assign pe1_add_constant_constant = 8'h0 ;
  assign pe1_add_input_inp =
	     { CASE_x526_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q30,
	       CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31 } ;
  assign pe1_load_weights_weights =
	     256'h000100000000000000020000FFFF000000000000000200000001000000010000 ;
  assign pe1_EN_load_weights = cycle1 == 32'd0 ;
  assign pe1_EN_add_input =
	     cycle1 != 32'd0 &&
	     (cycle1 == 32'd1 || cycle1_ULT_10___d5 && cycle1 < 32'd9) ;
  assign pe1_EN_add_constant = 1'b0 ;
  assign pe1_EN_nonlinearity = 1'b0 ;
  assign pe1_EN_get_partial_sum =
	     cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 ;
  assign pe1_EN_read_weights = 1'b0 ;
  assign pe1_EN_is_ready = 1'b0 ;
  assign pe1_EN_reset_pe = 1'b0 ;

  // submodule pe2
  assign pe2_add_constant_constant = 8'h0 ;
  assign pe2_add_input_inp = 8'h0 ;
  assign pe2_load_weights_weights =
	     256'h000100000000000000020000FFFF000000000000000200000001000000010000 ;
  assign pe2_EN_load_weights =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;
  assign pe2_EN_add_input = 1'b0 ;
  assign pe2_EN_add_constant = 1'b0 ;
  assign pe2_EN_nonlinearity = 1'b0 ;
  assign pe2_EN_get_partial_sum = 1'b0 ;
  assign pe2_EN_read_weights =
	     WILL_FIRE_RL_test_rw_weights && cycle2 != 32'd0 &&
	     cycle2_39_ULE_8___d543 ;
  assign pe2_EN_is_ready = 1'b0 ;
  assign pe2_EN_reset_pe = 1'b0 ;

  // submodule pe3
  assign pe3_add_constant_constant = 8'h0 ;
  assign pe3_add_input_inp =
	     { CASE_x0264_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DON_ETC__q32,
	       CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33 } ;
  assign pe3_load_weights_weights =
	     256'h000100000000000000020000FFFF000000000000000200000001000000010000 ;
  assign pe3_EN_load_weights = cycle3 == 32'd0 ;
  assign pe3_EN_add_input = cycle3 != 32'd0 && cycle3_36_ULT_9___d439 ;
  assign pe3_EN_add_constant = 1'b0 ;
  assign pe3_EN_nonlinearity = !cycle3_36_ULT_9___d439 && cycle3 == 32'd9 ;
  assign pe3_EN_get_partial_sum =
	     cycle3 != 32'd0 && (cycle3_36_ULT_9___d439 || cycle3 != 32'd9) ;
  assign pe3_EN_read_weights = 1'b0 ;
  assign pe3_EN_is_ready = 1'b0 ;
  assign pe3_EN_reset_pe = 1'b0 ;

  // remaining internal signals
  assign IF_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINUS__ETC___d42 =
	     x__h3645 * x__h3664 ;
  assign IF_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINUS__ETC___d56 =
	     x__h3527[63:16] + { 32'd0, y_f__h4719 } ;
  assign NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460 =
	     !cycle3_36_ULT_9___d439 && cycle3 != 32'd9 &&
	     (pe3_get_partial_sum[7:6] != 2'd0 ||
	      pe3_get_partial_sum[5:0] != 6'd0) ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d104 =
	     (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	      x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	     fpart__h6286 != 6'd0 &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97 == 3'd7 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d110 =
	     (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	      x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97[2] &&
	     fpart__h6286 != 6'd0 &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97 != 3'd7 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d118 =
	     (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	      x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	     (!SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97[2] ||
	      fpart__h6286 == 6'd0) ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d238 =
	     (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	      x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	     x__h6189[15:10] != 6'd0 &&
	     SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231 ==
	     3'd7 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d244 =
	     (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	      x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	     SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231[2] &&
	     x__h6189[15:10] != 6'd0 &&
	     SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231 !=
	     3'd7 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d252 =
	     (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	      x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	     (!SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231[2] ||
	      x__h6189[15:10] == 6'd0) ;
  assign SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231 =
	     { x685_BITS_1_TO_0__q9[1], x685_BITS_1_TO_0__q9 } ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97 =
	     { SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d24[1],
	       SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d24 } ;
  assign SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINU_ETC___d164 =
	     { tmp1_i__h3545[15], tmp1_i__h3545 } ;
  assign SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298 =
	     { pe1get_partial_sum_BITS_7_TO_6__q14[1],
	       pe1get_partial_sum_BITS_7_TO_6__q14 } ;
  assign SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462 =
	     { pe3get_partial_sum_BITS_7_TO_6__q24[1],
	       pe3get_partial_sum_BITS_7_TO_6__q24 } ;
  assign SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365 =
	     { x662_BITS_7_TO_6__q19[1], x662_BITS_7_TO_6__q19 } ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d260 =
	     { 33'd0, x__h7724 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d263 =
	     { 33'd0, x__h7724 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d271 =
	     { 33'd0, x__h7724 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d280 =
	     { 33'd0, x__h7724 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d289 =
	     { 33'd0, x__h7724 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d126 =
	     { 33'd0, x__h6513 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d129 =
	     { 33'd0, x__h6513 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d137 =
	     { 33'd0, x__h6513 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d146 =
	     { 33'd0, x__h6513 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d155 =
	     { 33'd0, x__h6513 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d193 =
	     49'd0 * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d196 =
	     49'd0 * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d204 =
	     49'd0 * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d213 =
	     49'd0 * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d222 =
	     49'd0 * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d327 =
	     { 33'd0, x__h8324 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d330 =
	     { 33'd0, x__h8324 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d338 =
	     { 33'd0, x__h8324 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d347 =
	     { 33'd0, x__h8324 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d356 =
	     { 33'd0, x__h8324 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d487 =
	     { 33'd0, x__h10737 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d490 =
	     { 33'd0, x__h10737 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d498 =
	     { 33'd0, x__h10737 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d507 =
	     { 33'd0, x__h10737 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d516 =
	     { 33'd0, x__h10737 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d525 =
	     { 33'd0, x__h10737 } * 39'd1000000 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d394 =
	     { 33'd0, x__h8940 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d397 =
	     { 33'd0, x__h8940 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d405 =
	     { 33'd0, x__h8940 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d414 =
	     { 33'd0, x__h8940 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d423 =
	     { 33'd0, x__h8940 } * 39'd100000 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d266 =
	     39'd10 * digit__h7703 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d132 =
	     39'd10 * digit__h6492 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_ETC___d199 =
	     49'd10 * digit__h7103 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_get_parti_ETC___d333 =
	     39'd10 * digit__h8303 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe3_get_parti_ETC___d493 =
	     39'd10 * digit__h10716 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_PLUS_I_ETC___d400 =
	     39'd10 * digit__h8919 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d275 =
	     39'd10 * y__h7889 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d141 =
	     39'd10 * y__h6678 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d208 =
	     49'd10 * y__h7289 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_ge_ETC___d342 =
	     39'd10 * y__h8489 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe3_ge_ETC___d502 =
	     39'd10 * y__h10902 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_ETC___d409 =
	     39'd10 * y__h9105 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d150 =
	     39'd10 * y__h6758 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d217 =
	     49'd10 * y__h7369 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d284 =
	     39'd10 * y__h7969 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d351 =
	     39'd10 * y__h8569 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d418 =
	     39'd10 * y__h9185 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d511 =
	     39'd10 * y__h10982 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d159 =
	     39'd10 * y__h6838 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d226 =
	     49'd10 * y__h7449 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d293 =
	     39'd10 * y__h8049 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d360 =
	     39'd10 * y__h8649 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d427 =
	     39'd10 * y__h9265 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d520 =
	     39'd10 * y__h11062 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d529 =
	     39'd10 * y__h11142 ;
  assign cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94 =
	     cycle1_ULT_10___d5 &&
	     (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	      x__h2662[5:0] != pe1_get_partial_sum[5:0]) ;
  assign cycle1_ULT_10___d5 = cycle1 < 32'd10 ;
  assign cycle2_39_MINUS_1___d555 = cycle2 - 32'd1 ;
  assign cycle2_39_ULE_8_43_AND_NOT_SEL_ARR_pe2_read_we_ETC___d575 =
	     cycle2_39_ULE_8___d543 &&
	     (SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 !=
	      SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle2_39_MINUS__ETC___d557 ||
	      SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 !=
	      16'd0) ;
  assign cycle2_39_ULE_8___d543 = cycle2 <= 32'd8 ;
  assign cycle3_36_ULT_9___d439 = cycle3 < 32'd9 ;
  assign digit__h10716 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d487[9:6] } ;
  assign digit__h10774 =
	     { 35'd0,
	       tx0772_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q25[3:0] } ;
  assign digit__h10854 =
	     { 35'd0,
	       tx0852_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q26[3:0] } ;
  assign digit__h10934 =
	     { 35'd0,
	       tx0932_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q27[3:0] } ;
  assign digit__h11014 =
	     { 35'd0,
	       tx1012_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q28[3:0] } ;
  assign digit__h11094 =
	     { 35'd0,
	       tx1092_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q29[3:0] } ;
  assign digit__h6492 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d126[9:6] } ;
  assign digit__h6550 =
	     { 35'd0,
	       tx548_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q1[3:0] } ;
  assign digit__h6630 =
	     { 35'd0,
	       tx628_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q2[3:0] } ;
  assign digit__h6710 =
	     { 35'd0,
	       tx708_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q3[3:0] } ;
  assign digit__h6790 =
	     { 35'd0,
	       tx788_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q4[3:0] } ;
  assign digit__h7103 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d193[19:16] } ;
  assign digit__h7161 =
	     { 45'd0,
	       tx159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q5[3:0] } ;
  assign digit__h7241 =
	     { 45'd0,
	       tx239_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q6[3:0] } ;
  assign digit__h7321 =
	     { 45'd0,
	       tx319_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q7[3:0] } ;
  assign digit__h7401 =
	     { 45'd0,
	       tx399_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q8[3:0] } ;
  assign digit__h7703 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d260[9:6] } ;
  assign digit__h7761 =
	     { 35'd0,
	       tx759_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_I_ETC__q10[3:0] } ;
  assign digit__h7841 =
	     { 35'd0,
	       tx839_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q11[3:0] } ;
  assign digit__h7921 =
	     { 35'd0,
	       tx919_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q12[3:0] } ;
  assign digit__h8001 =
	     { 35'd0,
	       tx999_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q13[3:0] } ;
  assign digit__h8303 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d327[9:6] } ;
  assign digit__h8361 =
	     { 35'd0,
	       tx359_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q15[3:0] } ;
  assign digit__h8441 =
	     { 35'd0,
	       tx439_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q16[3:0] } ;
  assign digit__h8521 =
	     { 35'd0,
	       tx519_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q17[3:0] } ;
  assign digit__h8601 =
	     { 35'd0,
	       tx599_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q18[3:0] } ;
  assign digit__h8919 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d394[9:6] } ;
  assign digit__h8977 =
	     { 35'd0,
	       tx975_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q20[3:0] } ;
  assign digit__h9057 =
	     { 35'd0,
	       tx055_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q21[3:0] } ;
  assign digit__h9137 =
	     { 35'd0,
	       tx135_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q22[3:0] } ;
  assign digit__h9217 =
	     { 35'd0,
	       tx215_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q23[3:0] } ;
  assign pe1get_partial_sum_BITS_7_TO_6__q14 = pe1_get_partial_sum[7:6] ;
  assign pe3get_partial_sum_BITS_7_TO_6__q24 = pe3_get_partial_sum[7:6] ;
  assign tmp2_f__h3587 = { fpart__h6286, 10'd0 } ;
  assign tmp2_i__h3586 =
	     { {14{SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d24[1]}},
	       SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d24 } ;
  assign tx055_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q21 =
	     tx__h9055 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_ETC___d409[38:0] ;
  assign tx0772_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q25 =
	     tx__h10772 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe3_get_parti_ETC___d493[38:0] ;
  assign tx0852_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q26 =
	     tx__h10852 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe3_ge_ETC___d502[38:0] ;
  assign tx0932_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q27 =
	     tx__h10932 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d511[38:0] ;
  assign tx1012_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q28 =
	     tx__h11012 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d520[38:0] ;
  assign tx1092_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_MU_ETC__q29 =
	     tx__h11092 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d529[38:0] ;
  assign tx135_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q22 =
	     tx__h9135 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d418[38:0] ;
  assign tx159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q5 =
	     tx__h7159 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_ETC___d199[48:0] ;
  assign tx215_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q23 =
	     tx__h9215 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d427[38:0] ;
  assign tx239_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q6 =
	     tx__h7239 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d208[48:0] ;
  assign tx319_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q7 =
	     tx__h7319 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d217[48:0] ;
  assign tx359_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q15 =
	     tx__h8359 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_get_parti_ETC___d333[38:0] ;
  assign tx399_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q8 =
	     tx__h7399 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d226[48:0] ;
  assign tx439_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q16 =
	     tx__h8439 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_ge_ETC___d342[38:0] ;
  assign tx519_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q17 =
	     tx__h8519 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d351[38:0] ;
  assign tx548_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q1 =
	     tx__h6548 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d132[38:0] ;
  assign tx599_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q18 =
	     tx__h8599 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d360[38:0] ;
  assign tx628_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q2 =
	     tx__h6628 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d141[38:0] ;
  assign tx708_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q3 =
	     tx__h6708 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d150[38:0] ;
  assign tx759_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_I_ETC__q10 =
	     tx__h7759 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d266[38:0] ;
  assign tx788_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q4 =
	     tx__h6788 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d159[38:0] ;
  assign tx839_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q11 =
	     tx__h7839 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d275[38:0] ;
  assign tx919_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q12 =
	     tx__h7919 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d284[38:0] ;
  assign tx975_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q20 =
	     tx__h8975 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_PLUS_I_ETC___d400[38:0] ;
  assign tx999_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q13 =
	     tx__h7999 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d293[38:0] ;
  assign tx__h10772 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d490[38:6] } ;
  assign tx__h10852 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d498[38:6] } ;
  assign tx__h10932 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d507[38:6] } ;
  assign tx__h11012 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d516[38:6] } ;
  assign tx__h11092 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe3_get_partial_sum_51_BITS_7_ETC___d525[38:6] } ;
  assign tx__h6548 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d129[38:6] } ;
  assign tx__h6628 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d137[38:6] } ;
  assign tx__h6708 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d146[38:6] } ;
  assign tx__h6788 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d155[38:6] } ;
  assign tx__h7159 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d196[48:16] } ;
  assign tx__h7239 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d204[48:16] } ;
  assign tx__h7319 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d213[48:16] } ;
  assign tx__h7399 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_ETC___d222[48:16] } ;
  assign tx__h7759 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d263[38:6] } ;
  assign tx__h7839 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d271[38:6] } ;
  assign tx__h7919 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d280[38:6] } ;
  assign tx__h7999 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d289[38:6] } ;
  assign tx__h8359 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d330[38:6] } ;
  assign tx__h8439 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d338[38:6] } ;
  assign tx__h8519 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d347[38:6] } ;
  assign tx__h8599 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_partial_sum_5_BITS_7__ETC___d356[38:6] } ;
  assign tx__h8975 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d397[38:6] } ;
  assign tx__h9055 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d405[38:6] } ;
  assign tx__h9135 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d414[38:6] } ;
  assign tx__h9215 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d423[38:6] } ;
  assign x662_BITS_7_TO_6__q19 = x__h2662[7:6] ;
  assign x685_BITS_1_TO_0__q9 = x__h2685[1:0] ;
  assign x__h10264 = cycle3 - 32'd1 ;
  assign x__h10737 =
	     (SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462[2] &&
	      pe3_get_partial_sum[5:0] != 6'd0) ?
	       y_avValue_snd__h10680 :
	       pe3_get_partial_sum[5:0] ;
  assign x__h2526 = cycle1 - 32'd1 ;
  assign x__h2662 = psum + { x__h2685[1:0], x__h6189[15:10] } ;
  assign x__h2685 =
	     (!x__h3097[47] && (x__h3097[31] || x__h3097[47:32] != 16'd0)) ?
	       16'd32767 :
	       ((x__h3097[47] &&
		 (!x__h3097[31] || ~x__h3097[47:32] != 16'd0)) ?
		  16'd32768 :
		  x__h3097[31:16]) ;
  assign x__h3097 =
	     (!x__h3527[63] &&
	      IF_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINUS__ETC___d56[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINUS__ETC___d56 ;
  assign x__h3527 =
	     (tmp1_i__h3545[15] && !tmp2_i__h3586[15] ||
	      tmp2_i__h3586[15] && !tmp1_i__h3545[15]) ?
	       -IF_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINUS__ETC___d42 :
	       IF_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINUS__ETC___d42 ;
  assign x__h3645 =
	     tmp1_i__h3545[15] ?
	       -{ tmp1_i__h3545, 16'd0 } :
	       { tmp1_i__h3545, 16'd0 } ;
  assign x__h3664 =
	     tmp2_i__h3586[15] ?
	       -{ tmp2_i__h3586, tmp2_f__h3587 } :
	       { tmp2_i__h3586, tmp2_f__h3587 } ;
  assign x__h6189 =
	     (!x__h3097[47] && (x__h3097[31] || x__h3097[47:32] != 16'd0)) ?
	       16'd65535 :
	       ((x__h3097[47] &&
		 (!x__h3097[31] || ~x__h3097[47:32] != 16'd0)) ?
		  16'd0 :
		  x__h3097[15:0]) ;
  assign x__h6298 = cycle1 - 32'd2 ;
  assign x__h6513 =
	     (SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97[2] &&
	      fpart__h6286 != 6'd0) ?
	       y_avValue_snd__h6456 :
	       fpart__h6286 ;
  assign x__h7724 =
	     (SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231[2] &&
	      x__h6189[15:10] != 6'd0) ?
	       y_avValue_snd__h7667 :
	       x__h6189[15:10] ;
  assign x__h8324 =
	     (SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298[2] &&
	      pe1_get_partial_sum[5:0] != 6'd0) ?
	       y_avValue_snd__h8267 :
	       pe1_get_partial_sum[5:0] ;
  assign x__h8940 =
	     (SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365[2] &&
	      x__h2662[5:0] != 6'd0) ?
	       y_avValue_snd__h8883 :
	       x__h2662[5:0] ;
  assign y__h10902 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe3_get_parti_ETC___d493[38:0] +
	     digit__h10774 ;
  assign y__h10982 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe3_ge_ETC___d502[38:0] +
	     digit__h10854 ;
  assign y__h11062 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d511[38:0] +
	     digit__h10934 ;
  assign y__h11142 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d520[38:0] +
	     digit__h11014 ;
  assign y__h6678 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d132[38:0] +
	     digit__h6550 ;
  assign y__h6758 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d141[38:0] +
	     digit__h6630 ;
  assign y__h6838 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d150[38:0] +
	     digit__h6710 ;
  assign y__h7289 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_1_1_2_ETC___d199[48:0] +
	     digit__h7161 ;
  assign y__h7369 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d208[48:0] +
	     digit__h7241 ;
  assign y__h7449 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d217[48:0] +
	     digit__h7321 ;
  assign y__h7889 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d266[38:0] +
	     digit__h7761 ;
  assign y__h7969 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d275[38:0] +
	     digit__h7841 ;
  assign y__h8049 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d284[38:0] +
	     digit__h7921 ;
  assign y__h8489 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_get_parti_ETC___d333[38:0] +
	     digit__h8361 ;
  assign y__h8569 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_ge_ETC___d342[38:0] +
	     digit__h8441 ;
  assign y__h8649 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d351[38:0] +
	     digit__h8521 ;
  assign y__h9105 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_PLUS_I_ETC___d400[38:0] +
	     digit__h8977 ;
  assign y__h9185 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_ETC___d409[38:0] +
	     digit__h9057 ;
  assign y__h9265 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d418[38:0] +
	     digit__h9137 ;
  assign y_avValue_snd__h10680 = 6'd0 - pe3_get_partial_sum[5:0] ;
  assign y_avValue_snd__h6456 = 6'd0 - fpart__h6286 ;
  assign y_avValue_snd__h7667 = 6'd0 - x__h6189[15:10] ;
  assign y_avValue_snd__h8267 = 6'd0 - pe1_get_partial_sum[5:0] ;
  assign y_avValue_snd__h8883 = 6'd0 - x__h2662[5:0] ;
  assign y_f__h4719 =
	     (x__h3527[15] && (x__h3527[63] || x__h3527[14:0] != 15'd0)) ?
	       16'd1 :
	       16'd0 ;
  always@(x__h6298)
  begin
    case (x__h6298)
      32'd0: fpart__h6286 = 6'd32;
      32'd1: fpart__h6286 = 6'd48;
      32'd2: fpart__h6286 = 6'd16;
      32'd3: fpart__h6286 = 6'd58;
      32'd4: fpart__h6286 = 6'd44;
      32'd5, 32'd6, 32'd7: fpart__h6286 = 6'd0;
      default: fpart__h6286 = 6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h6298)
  begin
    case (x__h6298)
      32'd0, 32'd1, 32'd7: tmp1_i__h3545 = 16'd1;
      32'd2, 32'd5: tmp1_i__h3545 = 16'd2;
      32'd3, 32'd6: tmp1_i__h3545 = 16'd0;
      32'd4: tmp1_i__h3545 = 16'd65535;
      default: tmp1_i__h3545 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h6298)
  begin
    case (x__h6298)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6:
	  SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d24 = 2'd0;
      32'd1, 32'd3, 32'd7:
	  SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d24 = 2'd3;
      default: SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d24 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_39_MINUS_1___d555 or pe2_read_weights)
  begin
    case (cycle2_39_MINUS_1___d555)
      32'd0:
	  SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
	      pe2_read_weights[31:16];
      32'd1:
	  SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
	      pe2_read_weights[63:48];
      32'd2:
	  SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
	      pe2_read_weights[95:80];
      32'd3:
	  SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
	      pe2_read_weights[127:112];
      32'd4:
	  SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
	      pe2_read_weights[159:144];
      32'd5:
	  SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
	      pe2_read_weights[191:176];
      32'd6:
	  SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
	      pe2_read_weights[223:208];
      32'd7:
	  SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
	      pe2_read_weights[255:240];
      default: SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_39_MINUS_1___d555)
  begin
    case (cycle2_39_MINUS_1___d555)
      32'd0, 32'd1, 32'd7:
	  SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle2_39_MINUS__ETC___d557 = 16'd1;
      32'd2, 32'd5:
	  SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle2_39_MINUS__ETC___d557 = 16'd2;
      32'd3, 32'd6:
	  SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle2_39_MINUS__ETC___d557 = 16'd0;
      32'd4:
	  SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle2_39_MINUS__ETC___d557 =
	      16'd65535;
      default: SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle2_39_MINUS__ETC___d557 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_39_MINUS_1___d555 or pe2_read_weights)
  begin
    case (cycle2_39_MINUS_1___d555)
      32'd0:
	  SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
	      pe2_read_weights[15:0];
      32'd1:
	  SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
	      pe2_read_weights[47:32];
      32'd2:
	  SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
	      pe2_read_weights[79:64];
      32'd3:
	  SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
	      pe2_read_weights[111:96];
      32'd4:
	  SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
	      pe2_read_weights[143:128];
      32'd5:
	  SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
	      pe2_read_weights[175:160];
      32'd6:
	  SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
	      pe2_read_weights[207:192];
      32'd7:
	  SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
	      pe2_read_weights[239:224];
      default: SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h2526)
  begin
    case (x__h2526)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6:
	  CASE_x526_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q30 = 2'd0;
      32'd1, 32'd3, 32'd7:
	  CASE_x526_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q30 = 2'd3;
      default: CASE_x526_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q30 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h2526)
  begin
    case (x__h2526)
      32'd0: CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31 = 6'd32;
      32'd1: CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31 = 6'd48;
      32'd2: CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31 = 6'd16;
      32'd3: CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31 = 6'd58;
      32'd4: CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31 = 6'd44;
      32'd5, 32'd6, 32'd7:
	  CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31 = 6'd0;
      default: CASE_x526_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q31 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h10264)
  begin
    case (x__h10264)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6:
	  CASE_x0264_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DON_ETC__q32 = 2'd0;
      32'd1, 32'd3, 32'd7:
	  CASE_x0264_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DON_ETC__q32 = 2'd3;
      default: CASE_x0264_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DON_ETC__q32 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h10264)
  begin
    case (x__h10264)
      32'd0: CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33 = 6'd32;
      32'd1: CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33 = 6'd48;
      32'd2: CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33 = 6'd16;
      32'd3: CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33 = 6'd58;
      32'd4: CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33 = 6'd44;
      32'd5, 32'd6, 32'd7:
	  CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33 = 6'd0;
      default: CASE_x0264_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q33 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge clk_CLK_OUT)
  begin
    if (rstn_OUT_RST == `BSV_RESET_VALUE)
      begin
        cycle1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum <= `BSV_ASSIGNMENT_DELAY 8'd0;
	psum2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (cycle1_EN) cycle1 <= `BSV_ASSIGNMENT_DELAY cycle1_D_IN;
	if (cycle2_EN) cycle2 <= `BSV_ASSIGNMENT_DELAY cycle2_D_IN;
	if (cycle3_EN) cycle3 <= `BSV_ASSIGNMENT_DELAY cycle3_D_IN;
	if (psum_EN) psum <= `BSV_ASSIGNMENT_DELAY psum_D_IN;
	if (psum2_EN) psum2 <= `BSV_ASSIGNMENT_DELAY psum2_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycle1 = 32'hAAAAAAAA;
    cycle2 = 32'hAAAAAAAA;
    cycle3 = 32'hAAAAAAAA;
    psum = 8'hAA;
    psum2 = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge clk_CLK_OUT)
  begin
    #0;
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_end) $finish(32'd1);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("Fail! ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d104)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d110)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d118)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_4___d97));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h6492);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h6550);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h6630);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h6710);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h6790);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write(" x ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	   x__h2662[5:0] != pe1_get_partial_sum[5:0]))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle1_MINU_ETC___d164));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7103);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7161);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7241);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7321);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7401);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write(" = ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d238)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d244)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_ETC___d252)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_IF_NOT_IF_SEL_ARR_1_1_2_0_65535_2__ETC___d231));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7703);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7761);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7841);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h7921);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h8001);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write(" result:  ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	   x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	  SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298[2] &&
	  pe1_get_partial_sum[5:0] != 6'd0 &&
	  SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298 == 3'd7)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	   x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	  SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298[2] &&
	  pe1_get_partial_sum[5:0] != 6'd0 &&
	  SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298 != 3'd7)
	$write("%0d.",
	       $signed(SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	   x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	  (!SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298[2] ||
	   pe1_get_partial_sum[5:0] == 6'd0))
	$write("%0d.",
	       $signed(SEXT_pe1_get_partial_sum_5_BITS_7_TO_6_6___d298));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h8303);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h8361);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h8441);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h8521);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h8601);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write(" expected:  ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	   x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	  SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365[2] &&
	  x__h2662[5:0] != 6'd0 &&
	  SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365 == 3'd7)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	   x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	  SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365[2] &&
	  x__h2662[5:0] != 6'd0 &&
	  SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365 != 3'd7)
	$write("%0d.",
	       $signed(SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  (x__h2662[7:6] != pe1_get_partial_sum[7:6] ||
	   x__h2662[5:0] != pe1_get_partial_sum[5:0]) &&
	  (!SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365[2] ||
	   x__h2662[5:0] == 6'd0))
	$write("%0d.",
	       $signed(SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_SEL_ARR_1_1__ETC___d365));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h8919);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h8977);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h9057);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h9137);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$write("%0d", digit__h9217);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$display;
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d94)
	$finish(32'd1);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && !cycle1_ULT_10___d5)
	$display("Passed all dot product tests.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 &&
	  NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460)
	$write("Failed nonlinearity! Recvd: ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_36_ULT_9___d439 && cycle3 != 32'd9 &&
	  SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462[2] &&
	  pe3_get_partial_sum[5:0] != 6'd0 &&
	  SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462 == 3'd7)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_36_ULT_9___d439 && cycle3 != 32'd9 &&
	  SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462[2] &&
	  pe3_get_partial_sum[5:0] != 6'd0 &&
	  SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462 != 3'd7)
	$write("%0d.",
	       $signed(SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_36_ULT_9___d439 && cycle3 != 32'd9 &&
	  (pe3_get_partial_sum[7:6] != 2'd0 ||
	   pe3_get_partial_sum[5:0] != 6'd0) &&
	  (!SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462[2] ||
	   pe3_get_partial_sum[5:0] == 6'd0))
	$write("%0d.",
	       $signed(SEXT_pe3_get_partial_sum_51_BITS_7_TO_6_52___d462));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 &&
	  NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460)
	$write("%0d", digit__h10716);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 &&
	  NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460)
	$write("%0d", digit__h10774);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 &&
	  NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460)
	$write("%0d", digit__h10854);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 &&
	  NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460)
	$write("%0d", digit__h10934);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 &&
	  NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460)
	$write("%0d", digit__h11014);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 &&
	  NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460)
	$write("%0d", digit__h11094);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 &&
	  NOT_cycle3_36_ULT_9_39_49_AND_NOT_cycle3_36_EQ_ETC___d460)
	$write("\n");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_36_ULT_9___d439 && cycle3 != 32'd9 &&
	  pe3_get_partial_sum[7:6] == 2'd0 &&
	  pe3_get_partial_sum[5:0] == 6'd0)
	$display("Passed all non-linearity tests.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights && cycle2 != 32'd0 &&
	  cycle2_39_ULE_8_43_AND_NOT_SEL_ARR_pe2_read_we_ETC___d575)
	$display("Fail! %d vs. %d, cycle2 %d",
		 { SEL_ARR_pe2_read_weights_45_BITS_31_TO_16_46_p_ETC___d556,
		   SEL_ARR_pe2_read_weights_45_BITS_15_TO_0_60_pe_ETC___d569 },
		 { SEL_ARR_1_1_2_0_65535_2_0_1_0_cycle2_39_MINUS__ETC___d557,
		   16'd0 },
		 cycle2_39_MINUS_1___d555);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights && cycle2 != 32'd0 &&
	  cycle2_39_ULE_8_43_AND_NOT_SEL_ARR_pe2_read_we_ETC___d575)
	$finish(32'd1);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights && cycle2 != 32'd0 &&
	  !cycle2_39_ULE_8___d543)
	$display("Passed all r/w weight tests.");
  end
  // synopsys translate_on
endmodule  // mkPEFPTest

