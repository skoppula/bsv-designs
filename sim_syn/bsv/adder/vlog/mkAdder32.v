//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Fri Dec  8 16:16:56 EST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O    32 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    64 reg
// EN_request_put                 I     1
// EN_response_get                I     1
//
// Combinational paths from inputs to outputs:
//   EN_response_get -> RDY_request_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAdder32(CLK,
		 RST_N,

		 request_put,
		 EN_request_put,
		 RDY_request_put,

		 EN_response_get,
		 response_get,
		 RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [63 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [31 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [31 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule m_a
  wire [31 : 0] m_a_D_IN, m_a_D_OUT;
  wire m_a_CLR, m_a_DEQ, m_a_EMPTY_N, m_a_ENQ, m_a_FULL_N;

  // ports of submodule m_b
  wire [31 : 0] m_b_D_IN, m_b_D_OUT;
  wire m_b_CLR, m_b_DEQ, m_b_EMPTY_N, m_b_ENQ, m_b_FULL_N;

  // ports of submodule m_c
  wire [31 : 0] m_c_D_IN, m_c_D_OUT;
  wire m_c_CLR, m_c_DEQ, m_c_EMPTY_N, m_c_ENQ, m_c_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_m_add,
       CAN_FIRE_request_put,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_m_add,
       WILL_FIRE_request_put,
       WILL_FIRE_response_get;

  // action method request_put
  assign RDY_request_put = m_a_FULL_N && m_b_FULL_N ;
  assign CAN_FIRE_request_put = m_a_FULL_N && m_b_FULL_N ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  assign response_get = m_c_D_OUT ;
  assign RDY_response_get = m_c_EMPTY_N ;
  assign CAN_FIRE_response_get = m_c_EMPTY_N ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule m_a
  FIFOL1 #(.width(32'd32)) m_a(.RST(RST_N),
			       .CLK(CLK),
			       .D_IN(m_a_D_IN),
			       .ENQ(m_a_ENQ),
			       .DEQ(m_a_DEQ),
			       .CLR(m_a_CLR),
			       .D_OUT(m_a_D_OUT),
			       .FULL_N(m_a_FULL_N),
			       .EMPTY_N(m_a_EMPTY_N));

  // submodule m_b
  FIFOL1 #(.width(32'd32)) m_b(.RST(RST_N),
			       .CLK(CLK),
			       .D_IN(m_b_D_IN),
			       .ENQ(m_b_ENQ),
			       .DEQ(m_b_DEQ),
			       .CLR(m_b_CLR),
			       .D_OUT(m_b_D_OUT),
			       .FULL_N(m_b_FULL_N),
			       .EMPTY_N(m_b_EMPTY_N));

  // submodule m_c
  FIFOL1 #(.width(32'd32)) m_c(.RST(RST_N),
			       .CLK(CLK),
			       .D_IN(m_c_D_IN),
			       .ENQ(m_c_ENQ),
			       .DEQ(m_c_DEQ),
			       .CLR(m_c_CLR),
			       .D_OUT(m_c_D_OUT),
			       .FULL_N(m_c_FULL_N),
			       .EMPTY_N(m_c_EMPTY_N));

  // rule RL_m_add
  assign CAN_FIRE_RL_m_add = m_c_FULL_N && m_a_EMPTY_N && m_b_EMPTY_N ;
  assign WILL_FIRE_RL_m_add = CAN_FIRE_RL_m_add ;

  // submodule m_a
  assign m_a_D_IN = request_put[63:32] ;
  assign m_a_ENQ = EN_request_put ;
  assign m_a_DEQ = CAN_FIRE_RL_m_add ;
  assign m_a_CLR = 1'b0 ;

  // submodule m_b
  assign m_b_D_IN = request_put[31:0] ;
  assign m_b_ENQ = EN_request_put ;
  assign m_b_DEQ = CAN_FIRE_RL_m_add ;
  assign m_b_CLR = 1'b0 ;

  // submodule m_c
  assign m_c_D_IN = m_a_D_OUT + m_b_D_OUT ;
  assign m_c_ENQ = CAN_FIRE_RL_m_add ;
  assign m_c_DEQ = EN_response_get ;
  assign m_c_CLR = 1'b0 ;
endmodule  // mkAdder32

