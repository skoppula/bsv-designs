//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Sat Dec  9 16:59:59 EST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O    32 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    64 reg
// EN_request_put                 I     1
// EN_response_get                I     1
//
// Combinational paths from inputs to outputs:
//   EN_response_get -> RDY_request_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCompareRNS(CLK,
		    RST_N,

		    request_put,
		    EN_request_put,
		    RDY_request_put,

		    EN_response_get,
		    response_get,
		    RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [63 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [31 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [31 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule m_a
  wire [31 : 0] m_a_D_IN, m_a_D_OUT;
  wire m_a_CLR, m_a_DEQ, m_a_EMPTY_N, m_a_ENQ, m_a_FULL_N;

  // ports of submodule m_b
  wire [31 : 0] m_b_D_IN, m_b_D_OUT;
  wire m_b_CLR, m_b_DEQ, m_b_EMPTY_N, m_b_ENQ, m_b_FULL_N;

  // ports of submodule m_c
  wire [31 : 0] m_c_D_IN, m_c_D_OUT;
  wire m_c_CLR, m_c_DEQ, m_c_EMPTY_N, m_c_ENQ, m_c_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_m_add,
       CAN_FIRE_request_put,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_m_add,
       WILL_FIRE_request_put,
       WILL_FIRE_response_get;

  // remaining internal signals
  wire [16 : 0] _0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_16_T_ETC___d191,
		_0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_31_T_ETC___d196,
		_0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d55,
		_0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d60,
		_0_CONCAT_0_CONCAT_m_b_first__5_BITS_16_TO_9_8__ETC___d114,
		_0_CONCAT_0_CONCAT_m_b_first__5_BITS_31_TO_25_6_ETC___d119;
  wire [15 : 0] _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d185,
		_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d49,
		_0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d108,
		b__h1140,
		b__h1784,
		b__h2003,
		b__h2867,
		b__h3280,
		b__h921;
  wire [13 : 0] b__h1377,
		b__h1610,
		b__h2240,
		b__h2693,
		b__h514,
		b__h747,
		inv_sm__h1242,
		inv_sm__h2105,
		inv_sm__h363,
		x1__h1239,
		x1__h2102,
		x1__h360;
  wire [9 : 0] _0_CONCAT_m_a_first_BITS_8_TO_0_6_62_PLUS_0_CON_ETC___d166;
  wire [8 : 0] _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d176,
	       _0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d159,
	       _0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d40,
	       _0_CONCAT_m_a_first_BITS_24_TO_17_4_31_PLUS_0_C_ETC___d135,
	       _0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d99,
	       b__h1169,
	       b__h2032,
	       b__h3100,
	       b__h3309,
	       sm2__h1754,
	       sm2__h2837,
	       sm2__h891;
  wire [7 : 0] _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d145,
	       _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d128,
	       _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d18,
	       _0_CONCAT_m_b_first__5_BITS_31_TO_25_6_7_PLUS_0_ETC___d77,
	       b__h1639,
	       b__h2513,
	       b__h2722,
	       b__h2956,
	       b__h776,
	       inv_num__h1751,
	       inv_num__h2834,
	       inv_num__h888,
	       rotate__h1753,
	       rotate__h2836,
	       rotate__h890,
	       sm2__h1347,
	       sm2__h2210,
	       sm2__h484;
  wire [6 : 0] b__h2349,
	       inv_num__h1344,
	       inv_num__h2207,
	       inv_num__h481,
	       rotate__h1346,
	       rotate__h2209,
	       rotate__h483;
  wire or_bit__h1343,
       or_bit__h1750,
       or_bit__h2206,
       or_bit__h2833,
       or_bit__h480,
       or_bit__h887,
       parity_a__h332,
       parity_b__h333,
       parity_c__h334,
       x__h1067,
       x__h1238,
       x__h1537,
       x__h1930,
       x__h2101,
       x__h2620,
       x__h3207,
       x__h357,
       x__h359,
       x__h674;

  // action method request_put
  assign RDY_request_put = m_a_FULL_N && m_b_FULL_N ;
  assign CAN_FIRE_request_put = m_a_FULL_N && m_b_FULL_N ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  assign response_get = m_c_D_OUT ;
  assign RDY_response_get = m_c_EMPTY_N ;
  assign CAN_FIRE_response_get = m_c_EMPTY_N ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule m_a
  FIFOL1 #(.width(32'd32)) m_a(.RST(RST_N),
			       .CLK(CLK),
			       .D_IN(m_a_D_IN),
			       .ENQ(m_a_ENQ),
			       .DEQ(m_a_DEQ),
			       .CLR(m_a_CLR),
			       .D_OUT(m_a_D_OUT),
			       .FULL_N(m_a_FULL_N),
			       .EMPTY_N(m_a_EMPTY_N));

  // submodule m_b
  FIFOL1 #(.width(32'd32)) m_b(.RST(RST_N),
			       .CLK(CLK),
			       .D_IN(m_b_D_IN),
			       .ENQ(m_b_ENQ),
			       .DEQ(m_b_DEQ),
			       .CLR(m_b_CLR),
			       .D_OUT(m_b_D_OUT),
			       .FULL_N(m_b_FULL_N),
			       .EMPTY_N(m_b_EMPTY_N));

  // submodule m_c
  FIFOL1 #(.width(32'd32)) m_c(.RST(RST_N),
			       .CLK(CLK),
			       .D_IN(m_c_D_IN),
			       .ENQ(m_c_ENQ),
			       .DEQ(m_c_DEQ),
			       .CLR(m_c_CLR),
			       .D_OUT(m_c_D_OUT),
			       .FULL_N(m_c_FULL_N),
			       .EMPTY_N(m_c_EMPTY_N));

  // rule RL_m_add
  assign CAN_FIRE_RL_m_add = m_c_FULL_N && m_a_EMPTY_N && m_b_EMPTY_N ;
  assign WILL_FIRE_RL_m_add = CAN_FIRE_RL_m_add ;

  // submodule m_a
  assign m_a_D_IN = request_put[63:32] ;
  assign m_a_ENQ = EN_request_put ;
  assign m_a_DEQ = CAN_FIRE_RL_m_add ;
  assign m_a_CLR = 1'b0 ;

  // submodule m_b
  assign m_b_D_IN = request_put[31:0] ;
  assign m_b_ENQ = EN_request_put ;
  assign m_b_DEQ = CAN_FIRE_RL_m_add ;
  assign m_b_CLR = 1'b0 ;

  // submodule m_c
  assign m_c_D_IN = (x__h357 ^ parity_c__h334) ? m_a_D_OUT : m_b_D_OUT ;
  assign m_c_ENQ = CAN_FIRE_RL_m_add ;
  assign m_c_DEQ = EN_response_get ;
  assign m_c_CLR = 1'b0 ;

  // remaining internal signals
  assign _0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_16_T_ETC___d191 =
	     ({ 15'd0,
		_0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d185[15:14] } +
	      { 3'd0,
		_0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d185[13:0] }) %
	     17'd16383 ;
  assign _0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_31_T_ETC___d196 =
	     ({ 3'd0, x1__h2102 } + { 3'd0, inv_sm__h2105 }) % 17'd16383 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d176 =
	     ({ 1'd0,
		_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d159[7:0] } +
	      { 1'd0, inv_num__h2834 }) %
	     9'd255 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d185 =
	     b__h2867 + b__h3280 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d55 =
	     ({ 15'd0,
		_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d49[15:14] } +
	      { 3'd0,
		_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d49[13:0] }) %
	     17'd16383 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d145 =
	     ({ 1'd0,
		_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d128[6:0] } +
	      { 1'd0, inv_num__h2207 }) %
	     8'd127 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d60 =
	     ({ 3'd0, x1__h360 } + { 3'd0, inv_sm__h363 }) % 17'd16383 ;
  assign _0_CONCAT_0_CONCAT_m_b_first__5_BITS_16_TO_9_8__ETC___d114 =
	     ({ 15'd0,
		_0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d108[15:14] } +
	      { 3'd0,
		_0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d108[13:0] }) %
	     17'd16383 ;
  assign _0_CONCAT_0_CONCAT_m_b_first__5_BITS_31_TO_25_6_ETC___d119 =
	     ({ 3'd0, x1__h1239 } + { 3'd0, inv_sm__h1242 }) % 17'd16383 ;
  assign _0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d159 =
	     ({ 1'd0, m_a_D_OUT[16:9] } + { 1'd0, b__h2956 }) % 9'd255 ;
  assign _0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d40 =
	     ({ 1'd0, m_a_D_OUT[16:9] } + { 1'd0, inv_num__h888 }) % 9'd255 ;
  assign _0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d49 =
	     b__h921 + b__h1140 ;
  assign _0_CONCAT_m_a_first_BITS_24_TO_17_4_31_PLUS_0_C_ETC___d135 =
	     ({ 1'd0, m_a_D_OUT[24:17] } + { 1'd0, b__h2513 }) % 9'd129 ;
  assign _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d128 =
	     ({ 1'd0, m_a_D_OUT[31:25] } + { 1'd0, b__h2349 }) % 8'd127 ;
  assign _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d18 =
	     ({ 1'd0, m_a_D_OUT[31:25] } + { 1'd0, inv_num__h481 }) % 8'd127 ;
  assign _0_CONCAT_m_a_first_BITS_8_TO_0_6_62_PLUS_0_CON_ETC___d166 =
	     ({ 1'd0, m_a_D_OUT[8:0] } + { 1'd0, b__h3100 }) % 10'd257 ;
  assign _0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d108 =
	     b__h1784 + b__h2003 ;
  assign _0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d99 =
	     ({ 1'd0, m_b_D_OUT[16:9] } + { 1'd0, inv_num__h1751 }) % 9'd255 ;
  assign _0_CONCAT_m_b_first__5_BITS_31_TO_25_6_7_PLUS_0_ETC___d77 =
	     ({ 1'd0, m_b_D_OUT[31:25] } + { 1'd0, inv_num__h1344 }) %
	     8'd127 ;
  assign b__h1140 = { 7'd0, sm2__h891 } ;
  assign b__h1169 = { 1'd0, rotate__h890 } ;
  assign b__h1377 = { rotate__h1346, 7'd0 } ;
  assign b__h1610 = { 6'd0, sm2__h1347 } ;
  assign b__h1639 = { 1'd0, rotate__h1346 } ;
  assign b__h1784 = { rotate__h1753, 8'd0 } ;
  assign b__h2003 = { 7'd0, sm2__h1754 } ;
  assign b__h2032 = { 1'd0, rotate__h1753 } ;
  assign b__h2240 = { rotate__h2209, 7'd0 } ;
  assign b__h2349 = 7'd127 - m_b_D_OUT[31:25] ;
  assign b__h2513 = 8'd129 - m_b_D_OUT[24:17] ;
  assign b__h2693 = { 6'd0, sm2__h2210 } ;
  assign b__h2722 = { 1'd0, rotate__h2209 } ;
  assign b__h2867 = { rotate__h2836, 8'd0 } ;
  assign b__h2956 = 8'd255 - m_b_D_OUT[16:9] ;
  assign b__h3100 = 9'd257 - m_b_D_OUT[8:0] ;
  assign b__h3280 = { 7'd0, sm2__h2837 } ;
  assign b__h3309 = { 1'd0, rotate__h2836 } ;
  assign b__h514 = { rotate__h483, 7'd0 } ;
  assign b__h747 = { 6'd0, sm2__h484 } ;
  assign b__h776 = { 1'd0, rotate__h483 } ;
  assign b__h921 = { rotate__h890, 8'd0 } ;
  assign inv_num__h1344 = { ~m_b_D_OUT[23:18], or_bit__h1343 } ;
  assign inv_num__h1751 = { ~m_b_D_OUT[7:1], or_bit__h1750 } ;
  assign inv_num__h2207 =
	     { ~_0_CONCAT_m_a_first_BITS_24_TO_17_4_31_PLUS_0_C_ETC___d135[6:1],
	       or_bit__h2206 } ;
  assign inv_num__h2834 =
	     { ~_0_CONCAT_m_a_first_BITS_8_TO_0_6_62_PLUS_0_CON_ETC___d166[7:1],
	       or_bit__h2833 } ;
  assign inv_num__h481 = { ~m_a_D_OUT[23:18], or_bit__h480 } ;
  assign inv_num__h888 = { ~m_a_D_OUT[7:1], or_bit__h887 } ;
  assign inv_sm__h1242 =
	     ~_0_CONCAT_0_CONCAT_m_b_first__5_BITS_16_TO_9_8__ETC___d114[13:0] ;
  assign inv_sm__h2105 =
	     ~_0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_16_T_ETC___d191[13:0] ;
  assign inv_sm__h363 =
	     ~_0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d55[13:0] ;
  assign or_bit__h1343 = ~x__h1537 ;
  assign or_bit__h1750 = ~x__h1930 ;
  assign or_bit__h2206 = ~x__h2620 ;
  assign or_bit__h2833 = ~x__h3207 ;
  assign or_bit__h480 = ~x__h674 ;
  assign or_bit__h887 = ~x__h1067 ;
  assign parity_a__h332 = ~x__h359 ;
  assign parity_b__h333 = ~x__h1238 ;
  assign parity_c__h334 = ~x__h2101 ;
  assign rotate__h1346 =
	     { _0_CONCAT_m_b_first__5_BITS_31_TO_25_6_7_PLUS_0_ETC___d77[0],
	       _0_CONCAT_m_b_first__5_BITS_31_TO_25_6_7_PLUS_0_ETC___d77[6:1] } ;
  assign rotate__h1753 =
	     { _0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d99[0],
	       _0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d99[7:1] } ;
  assign rotate__h2209 =
	     { _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d145[0],
	       _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d145[6:1] } ;
  assign rotate__h2836 =
	     { _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d176[0],
	       _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d176[7:1] } ;
  assign rotate__h483 =
	     { _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d18[0],
	       _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d18[6:1] } ;
  assign rotate__h890 =
	     { _0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d40[0],
	       _0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d40[7:1] } ;
  assign sm2__h1347 = b__h1639 + m_b_D_OUT[24:17] ;
  assign sm2__h1754 = b__h2032 + m_b_D_OUT[8:0] ;
  assign sm2__h2210 =
	     b__h2722 +
	     _0_CONCAT_m_a_first_BITS_24_TO_17_4_31_PLUS_0_C_ETC___d135[7:0] ;
  assign sm2__h2837 =
	     b__h3309 +
	     _0_CONCAT_m_a_first_BITS_8_TO_0_6_62_PLUS_0_CON_ETC___d166[8:0] ;
  assign sm2__h484 = b__h776 + m_a_D_OUT[24:17] ;
  assign sm2__h891 = b__h1169 + m_a_D_OUT[8:0] ;
  assign x1__h1239 = b__h1377 + b__h1610 ;
  assign x1__h2102 = b__h2240 + b__h2693 ;
  assign x1__h360 = b__h514 + b__h747 ;
  assign x__h1067 = m_a_D_OUT[0] | m_a_D_OUT[8] ;
  assign x__h1238 =
	     _0_CONCAT_0_CONCAT_m_b_first__5_BITS_31_TO_25_6_ETC___d119[0] ^
	     _0_CONCAT_m_b_first__5_BITS_16_TO_9_8_9_PLUS_0__ETC___d108[0] ;
  assign x__h1537 = m_b_D_OUT[17] | m_b_D_OUT[24] ;
  assign x__h1930 = m_b_D_OUT[0] | m_b_D_OUT[8] ;
  assign x__h2101 =
	     _0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_31_T_ETC___d196[0] ^
	     _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_9_0_P_ETC___d185[0] ;
  assign x__h2620 =
	     _0_CONCAT_m_a_first_BITS_24_TO_17_4_31_PLUS_0_C_ETC___d135[0] |
	     _0_CONCAT_m_a_first_BITS_24_TO_17_4_31_PLUS_0_C_ETC___d135[7] ;
  assign x__h3207 =
	     _0_CONCAT_m_a_first_BITS_8_TO_0_6_62_PLUS_0_CON_ETC___d166[0] |
	     _0_CONCAT_m_a_first_BITS_8_TO_0_6_62_PLUS_0_CON_ETC___d166[8] ;
  assign x__h357 = parity_a__h332 ^ parity_b__h333 ;
  assign x__h359 =
	     _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d60[0] ^
	     _0_CONCAT_m_a_first_BITS_16_TO_9_9_0_PLUS_0_CON_ETC___d49[0] ;
  assign x__h674 = m_a_D_OUT[17] | m_a_D_OUT[24] ;
endmodule  // mkCompareRNS

