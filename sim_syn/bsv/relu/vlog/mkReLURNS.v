//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Sun Dec 10 11:43:05 EST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_request_put                O     1
// response_get                   O    32 reg
// RDY_response_get               O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// request_put                    I    32 reg
// EN_request_put                 I     1
// EN_response_get                I     1
//
// Combinational paths from inputs to outputs:
//   EN_response_get -> RDY_request_put
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkReLURNS(CLK,
		 RST_N,

		 request_put,
		 EN_request_put,
		 RDY_request_put,

		 EN_response_get,
		 response_get,
		 RDY_response_get);
  input  CLK;
  input  RST_N;

  // action method request_put
  input  [31 : 0] request_put;
  input  EN_request_put;
  output RDY_request_put;

  // actionvalue method response_get
  input  EN_response_get;
  output [31 : 0] response_get;
  output RDY_response_get;

  // signals for module outputs
  wire [31 : 0] response_get;
  wire RDY_request_put, RDY_response_get;

  // ports of submodule m_a
  wire [31 : 0] m_a_D_IN, m_a_D_OUT;
  wire m_a_CLR, m_a_DEQ, m_a_EMPTY_N, m_a_ENQ, m_a_FULL_N;

  // ports of submodule m_c
  wire [31 : 0] m_c_D_IN, m_c_D_OUT;
  wire m_c_CLR, m_c_DEQ, m_c_EMPTY_N, m_c_ENQ, m_c_FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_m_add,
       CAN_FIRE_request_put,
       CAN_FIRE_response_get,
       WILL_FIRE_RL_m_add,
       WILL_FIRE_request_put,
       WILL_FIRE_response_get;

  // remaining internal signals
  wire [16 : 0] _0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_16_T_ETC___d121,
		_0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_31_T_ETC___d126,
		_0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d53,
		_0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d58;
  wire [15 : 0] _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d115,
		_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d47,
		b__h1070,
		b__h1904,
		b__h2281,
		b__h851;
  wire [13 : 0] b__h1317,
		b__h1730,
		b__h444,
		b__h677,
		inv_sm__h1182,
		inv_sm__h293,
		x1__h1179,
		x1__h290;
  wire [9 : 0] _0_CONCAT_m_a_first_BITS_8_TO_0_4_4_PLUS_129_5__ETC___d96;
  wire [8 : 0] _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d106,
	       _0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d38,
	       _0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_128_0_ETC___d91,
	       _0_CONCAT_m_a_first_BITS_24_TO_17_2_7_PLUS_65_8_ETC___d69,
	       b__h1099,
	       b__h2310,
	       sm2__h1874,
	       sm2__h821;
  wire [7 : 0] _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d79,
	       _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d16,
	       _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_64_3_REM_ETC___d64,
	       b__h1759,
	       b__h706,
	       inv_num__h1871,
	       inv_num__h818,
	       rotate__h1873,
	       rotate__h820,
	       sm2__h1287,
	       sm2__h414;
  wire [6 : 0] inv_num__h1284, inv_num__h411, rotate__h1286, rotate__h413;
  wire or_bit__h1283,
       or_bit__h1870,
       or_bit__h410,
       or_bit__h817,
       parity_a__h264,
       parity_c__h263,
       x__h1178,
       x__h1657,
       x__h2208,
       x__h289,
       x__h604,
       x__h997;

  // action method request_put
  assign RDY_request_put = m_a_FULL_N ;
  assign CAN_FIRE_request_put = m_a_FULL_N ;
  assign WILL_FIRE_request_put = EN_request_put ;

  // actionvalue method response_get
  assign response_get = m_c_D_OUT ;
  assign RDY_response_get = m_c_EMPTY_N ;
  assign CAN_FIRE_response_get = m_c_EMPTY_N ;
  assign WILL_FIRE_response_get = EN_response_get ;

  // submodule m_a
  FIFOL1 #(.width(32'd32)) m_a(.RST(RST_N),
			       .CLK(CLK),
			       .D_IN(m_a_D_IN),
			       .ENQ(m_a_ENQ),
			       .DEQ(m_a_DEQ),
			       .CLR(m_a_CLR),
			       .D_OUT(m_a_D_OUT),
			       .FULL_N(m_a_FULL_N),
			       .EMPTY_N(m_a_EMPTY_N));

  // submodule m_c
  FIFOL1 #(.width(32'd32)) m_c(.RST(RST_N),
			       .CLK(CLK),
			       .D_IN(m_c_D_IN),
			       .ENQ(m_c_ENQ),
			       .DEQ(m_c_DEQ),
			       .CLR(m_c_CLR),
			       .D_OUT(m_c_D_OUT),
			       .FULL_N(m_c_FULL_N),
			       .EMPTY_N(m_c_EMPTY_N));

  // rule RL_m_add
  assign CAN_FIRE_RL_m_add = m_c_FULL_N && m_a_EMPTY_N ;
  assign WILL_FIRE_RL_m_add = CAN_FIRE_RL_m_add ;

  // submodule m_a
  assign m_a_D_IN = request_put ;
  assign m_a_ENQ = EN_request_put ;
  assign m_a_DEQ = CAN_FIRE_RL_m_add ;
  assign m_a_CLR = 1'b0 ;

  // submodule m_c
  assign m_c_D_IN =
	     (parity_a__h264 ^ parity_c__h263) ? 32'h7E80FE80 : m_a_D_OUT ;
  assign m_c_ENQ = CAN_FIRE_RL_m_add ;
  assign m_c_DEQ = EN_response_get ;
  assign m_c_CLR = 1'b0 ;

  // remaining internal signals
  assign _0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_16_T_ETC___d121 =
	     ({ 15'd0,
		_0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d115[15:14] } +
	      { 3'd0,
		_0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d115[13:0] }) %
	     17'd16383 ;
  assign _0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_31_T_ETC___d126 =
	     ({ 3'd0, x1__h1179 } + { 3'd0, inv_sm__h1182 }) % 17'd16383 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d106 =
	     ({ 1'd0,
		_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_128_0_ETC___d91[7:0] } +
	      { 1'd0, inv_num__h1871 }) %
	     9'd255 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d115 =
	     b__h1904 + b__h2281 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d53 =
	     ({ 15'd0,
		_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d47[15:14] } +
	      { 3'd0,
		_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d47[13:0] }) %
	     17'd16383 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d58 =
	     ({ 3'd0, x1__h290 } + { 3'd0, inv_sm__h293 }) % 17'd16383 ;
  assign _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d79 =
	     ({ 1'd0,
		_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_64_3_REM_ETC___d64[6:0] } +
	      { 1'd0, inv_num__h1284 }) %
	     8'd127 ;
  assign _0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d38 =
	     ({ 1'd0, m_a_D_OUT[16:9] } + { 1'd0, inv_num__h818 }) % 9'd255 ;
  assign _0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d47 =
	     b__h851 + b__h1070 ;
  assign _0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_128_0_ETC___d91 =
	     ({ 1'd0, m_a_D_OUT[16:9] } + 9'd128) % 9'd255 ;
  assign _0_CONCAT_m_a_first_BITS_24_TO_17_2_7_PLUS_65_8_ETC___d69 =
	     ({ 1'd0, m_a_D_OUT[24:17] } + 9'd65) % 9'd129 ;
  assign _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d16 =
	     ({ 1'd0, m_a_D_OUT[31:25] } + { 1'd0, inv_num__h411 }) % 8'd127 ;
  assign _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_64_3_REM_ETC___d64 =
	     ({ 1'd0, m_a_D_OUT[31:25] } + 8'd64) % 8'd127 ;
  assign _0_CONCAT_m_a_first_BITS_8_TO_0_4_4_PLUS_129_5__ETC___d96 =
	     ({ 1'd0, m_a_D_OUT[8:0] } + 10'd129) % 10'd257 ;
  assign b__h1070 = { 7'd0, sm2__h821 } ;
  assign b__h1099 = { 1'd0, rotate__h820 } ;
  assign b__h1317 = { rotate__h1286, 7'd0 } ;
  assign b__h1730 = { 6'd0, sm2__h1287 } ;
  assign b__h1759 = { 1'd0, rotate__h1286 } ;
  assign b__h1904 = { rotate__h1873, 8'd0 } ;
  assign b__h2281 = { 7'd0, sm2__h1874 } ;
  assign b__h2310 = { 1'd0, rotate__h1873 } ;
  assign b__h444 = { rotate__h413, 7'd0 } ;
  assign b__h677 = { 6'd0, sm2__h414 } ;
  assign b__h706 = { 1'd0, rotate__h413 } ;
  assign b__h851 = { rotate__h820, 8'd0 } ;
  assign inv_num__h1284 =
	     { ~_0_CONCAT_m_a_first_BITS_24_TO_17_2_7_PLUS_65_8_ETC___d69[6:1],
	       or_bit__h1283 } ;
  assign inv_num__h1871 =
	     { ~_0_CONCAT_m_a_first_BITS_8_TO_0_4_4_PLUS_129_5__ETC___d96[7:1],
	       or_bit__h1870 } ;
  assign inv_num__h411 = { ~m_a_D_OUT[23:18], or_bit__h410 } ;
  assign inv_num__h818 = { ~m_a_D_OUT[7:1], or_bit__h817 } ;
  assign inv_sm__h1182 =
	     ~_0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_16_T_ETC___d121[13:0] ;
  assign inv_sm__h293 =
	     ~_0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d53[13:0] ;
  assign or_bit__h1283 = ~x__h1657 ;
  assign or_bit__h1870 = ~x__h2208 ;
  assign or_bit__h410 = ~x__h604 ;
  assign or_bit__h817 = ~x__h997 ;
  assign parity_a__h264 = ~x__h289 ;
  assign parity_c__h263 = ~x__h1178 ;
  assign rotate__h1286 =
	     { _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d79[0],
	       _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d79[6:1] } ;
  assign rotate__h1873 =
	     { _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d106[0],
	       _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d106[7:1] } ;
  assign rotate__h413 =
	     { _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d16[0],
	       _0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_0_CONCAT_ETC___d16[6:1] } ;
  assign rotate__h820 =
	     { _0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d38[0],
	       _0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d38[7:1] } ;
  assign sm2__h1287 =
	     b__h1759 +
	     _0_CONCAT_m_a_first_BITS_24_TO_17_2_7_PLUS_65_8_ETC___d69[7:0] ;
  assign sm2__h1874 =
	     b__h2310 +
	     _0_CONCAT_m_a_first_BITS_8_TO_0_4_4_PLUS_129_5__ETC___d96[8:0] ;
  assign sm2__h414 = b__h706 + m_a_D_OUT[24:17] ;
  assign sm2__h821 = b__h1099 + m_a_D_OUT[8:0] ;
  assign x1__h1179 = b__h1317 + b__h1730 ;
  assign x1__h290 = b__h444 + b__h677 ;
  assign x__h1178 =
	     _0_CONCAT_0_CONCAT_0_CONCAT_m_a_first_BITS_31_T_ETC___d126[0] ^
	     _0_CONCAT_0_CONCAT_m_a_first_BITS_16_TO_9_7_8_P_ETC___d115[0] ;
  assign x__h1657 =
	     _0_CONCAT_m_a_first_BITS_24_TO_17_2_7_PLUS_65_8_ETC___d69[0] |
	     _0_CONCAT_m_a_first_BITS_24_TO_17_2_7_PLUS_65_8_ETC___d69[7] ;
  assign x__h2208 =
	     _0_CONCAT_m_a_first_BITS_8_TO_0_4_4_PLUS_129_5__ETC___d96[0] |
	     _0_CONCAT_m_a_first_BITS_8_TO_0_4_4_PLUS_129_5__ETC___d96[8] ;
  assign x__h289 =
	     _0_CONCAT_0_CONCAT_m_a_first_BITS_31_TO_25_PLUS_ETC___d58[0] ^
	     _0_CONCAT_m_a_first_BITS_16_TO_9_7_8_PLUS_0_CON_ETC___d47[0] ;
  assign x__h604 = m_a_D_OUT[17] | m_a_D_OUT[24] ;
  assign x__h997 = m_a_D_OUT[0] | m_a_D_OUT[8] ;
endmodule  // mkReLURNS

