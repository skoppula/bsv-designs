//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Mon Dec 11 16:39:29 EST 2017
//
//
// Ports:
// Name                         I/O  size props
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPETest;


  // register cycle1
  reg [31 : 0] cycle1;
  wire [31 : 0] cycle1_D_IN;
  wire cycle1_EN;

  // register cycle2
  reg [31 : 0] cycle2;
  wire [31 : 0] cycle2_D_IN;
  wire cycle2_EN;

  // register cycle3
  reg [31 : 0] cycle3;
  wire [31 : 0] cycle3_D_IN;
  wire cycle3_EN;

  // register psum
  reg [7 : 0] psum;
  wire [7 : 0] psum_D_IN;
  wire psum_EN;

  // register psum2
  reg [7 : 0] psum2;
  wire [7 : 0] psum2_D_IN;
  wire psum2_EN;

  // ports of submodule clk
  wire clk_CLK_OUT;

  // ports of submodule pe1
  wire [15 : 0] pe1_load_weights_weights;
  wire [7 : 0] pe1_add_constant_constant,
	       pe1_add_input_inp,
	       pe1_get_neg_partial_sum,
	       pe1_get_pos_partial_sum,
	       pe1_multiply_constants_neg_constant,
	       pe1_multiply_constants_pos_constant;
  wire pe1_EN_add_constant,
       pe1_EN_add_input,
       pe1_EN_combine,
       pe1_EN_get_neg_partial_sum,
       pe1_EN_get_pos_partial_sum,
       pe1_EN_is_ready,
       pe1_EN_load_weights,
       pe1_EN_multiply_constants,
       pe1_EN_nonlinearity,
       pe1_EN_read_weights,
       pe1_EN_reset_pe;

  // ports of submodule pe2
  wire [15 : 0] pe2_load_weights_weights, pe2_read_weights;
  wire [7 : 0] pe2_add_constant_constant,
	       pe2_add_input_inp,
	       pe2_multiply_constants_neg_constant,
	       pe2_multiply_constants_pos_constant;
  wire pe2_EN_add_constant,
       pe2_EN_add_input,
       pe2_EN_combine,
       pe2_EN_get_neg_partial_sum,
       pe2_EN_get_pos_partial_sum,
       pe2_EN_is_ready,
       pe2_EN_load_weights,
       pe2_EN_multiply_constants,
       pe2_EN_nonlinearity,
       pe2_EN_read_weights,
       pe2_EN_reset_pe;

  // ports of submodule pe3
  wire [15 : 0] pe3_load_weights_weights;
  wire [7 : 0] pe3_add_constant_constant,
	       pe3_add_input_inp,
	       pe3_get_pos_partial_sum,
	       pe3_multiply_constants_neg_constant,
	       pe3_multiply_constants_pos_constant;
  wire pe3_EN_add_constant,
       pe3_EN_add_input,
       pe3_EN_combine,
       pe3_EN_get_neg_partial_sum,
       pe3_EN_get_pos_partial_sum,
       pe3_EN_is_ready,
       pe3_EN_load_weights,
       pe3_EN_multiply_constants,
       pe3_EN_nonlinearity,
       pe3_EN_read_weights,
       pe3_EN_reset_pe;

  // ports of submodule rstn
  wire rstn_OUT_RST;

  // rule scheduling signals
  wire CAN_FIRE_RL_test_dot_product,
       CAN_FIRE_RL_test_end,
       CAN_FIRE_RL_test_nonlinearity,
       CAN_FIRE_RL_test_rw_weights,
       WILL_FIRE_RL_test_dot_product,
       WILL_FIRE_RL_test_end,
       WILL_FIRE_RL_test_nonlinearity,
       WILL_FIRE_RL_test_rw_weights;

  // remaining internal signals
  reg [5 : 0] CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23,
	      CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21,
	      fpart__h4310;
  reg [1 : 0] CASE_x160_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q22,
	      CASE_x557_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q20,
	      SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29,
	      SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINUS_2_1___d22,
	      SEL_ARR_1_1_2_0_1_2_0_1_0_cycle2_11_MINUS_1_27___d429,
	      SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428;
  wire [77 : 0] _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d198,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d201,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d209,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d218,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d227,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d123,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d126,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d134,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d143,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d152,
		_0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d265,
		_0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d268,
		_0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d276,
		_0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d285,
		_0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d294,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d332,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d335,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d343,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d352,
		_0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d361,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d204,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d129,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_get_pos_p_ETC___d271,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_PLUS_I_ETC___d338,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d213,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d138,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_ge_ETC___d280,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_ETC___d347,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d147,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d222,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d289,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d356,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d156,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d231,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d298,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d365;
  wire [38 : 0] digit__h4516,
		digit__h4574,
		digit__h4654,
		digit__h4734,
		digit__h4814,
		digit__h5586,
		digit__h5644,
		digit__h5724,
		digit__h5804,
		digit__h5884,
		digit__h6200,
		digit__h6258,
		digit__h6338,
		digit__h6418,
		digit__h6498,
		digit__h6816,
		digit__h6874,
		digit__h6954,
		digit__h7034,
		digit__h7114,
		tx032_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q18,
		tx112_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q19,
		tx256_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q11,
		tx336_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q12,
		tx416_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q13,
		tx496_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q14,
		tx572_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q1,
		tx642_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_I_ETC__q6,
		tx652_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q2,
		tx722_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q7,
		tx732_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q3,
		tx802_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q8,
		tx812_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q4,
		tx872_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q16,
		tx882_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q9,
		tx952_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q17,
		tx__h4572,
		tx__h4652,
		tx__h4732,
		tx__h4812,
		tx__h5642,
		tx__h5722,
		tx__h5802,
		tx__h5882,
		tx__h6256,
		tx__h6336,
		tx__h6416,
		tx__h6496,
		tx__h6872,
		tx__h6952,
		tx__h7032,
		tx__h7112,
		y__h4702,
		y__h4782,
		y__h4862,
		y__h5772,
		y__h5852,
		y__h5932,
		y__h6386,
		y__h6466,
		y__h6546,
		y__h7002,
		y__h7082,
		y__h7162;
  wire [31 : 0] cycle2_11_MINUS_1___d427, x__h2557, x__h4322, x__h8160;
  wire [15 : 0] IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_M_ETC___d43,
		x__h3041;
  wire [9 : 0] IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_M_ETC___d57,
	       x__h2877;
  wire [7 : 0] x__h2714, x__h3292, x__h3308, x__h3311, x__h4236;
  wire [5 : 0] fpart__h5409,
	       x__h4537,
	       x__h5607,
	       x__h6221,
	       x__h6837,
	       y_avValue_snd__h4480,
	       y_avValue_snd__h5550,
	       y_avValue_snd__h6164,
	       y_avValue_snd__h6780,
	       y_f__h3694;
  wire [2 : 0] SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166,
	       SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94,
	       SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236,
	       SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303;
  wire [1 : 0] IF_NOT_x877_BIT_9_AND_x877_BIT_7_OR_NOT_x877_B_ETC__q5,
	       _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINU_ETC___d27,
	       x236_BITS_7_TO_6__q10,
	       x714_BITS_7_TO_6__q15;
  wire NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92,
       NOT_cycle2_11_EQ_0_13_14_AND_cycle2_11_ULE_8_1_ETC___d433,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d101,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d107,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d115,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d176,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d182,
       NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d190,
       cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d244,
       cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d250,
       cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d258,
       cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d311,
       cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d317,
       cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d325,
       cycle1_ULT_10___d5,
       cycle2_11_ULE_8___d415,
       cycle3_74_ULT_9___d377;

  // submodule clk
  ClockGen #(.v1Width(32'd1900),
	     .v2Width(32'd1900),
	     .initDelay(32'd0),
	     .initValue(32'd0),
	     .otherValue(32'd1)) clk(.CLK_OUT(clk_CLK_OUT));

  // submodule pe1
  mkPE32 pe1(.CLK(clk_CLK_OUT),
	     .RST_N(rstn_OUT_RST),
	     .add_constant_constant(pe1_add_constant_constant),
	     .add_input_inp(pe1_add_input_inp),
	     .load_weights_weights(pe1_load_weights_weights),
	     .multiply_constants_neg_constant(pe1_multiply_constants_neg_constant),
	     .multiply_constants_pos_constant(pe1_multiply_constants_pos_constant),
	     .EN_load_weights(pe1_EN_load_weights),
	     .EN_add_input(pe1_EN_add_input),
	     .EN_multiply_constants(pe1_EN_multiply_constants),
	     .EN_combine(pe1_EN_combine),
	     .EN_add_constant(pe1_EN_add_constant),
	     .EN_nonlinearity(pe1_EN_nonlinearity),
	     .EN_get_pos_partial_sum(pe1_EN_get_pos_partial_sum),
	     .EN_get_neg_partial_sum(pe1_EN_get_neg_partial_sum),
	     .EN_read_weights(pe1_EN_read_weights),
	     .EN_is_ready(pe1_EN_is_ready),
	     .EN_reset_pe(pe1_EN_reset_pe),
	     .RDY_load_weights(),
	     .RDY_add_input(),
	     .RDY_multiply_constants(),
	     .RDY_combine(),
	     .RDY_add_constant(),
	     .RDY_nonlinearity(),
	     .get_pos_partial_sum(pe1_get_pos_partial_sum),
	     .RDY_get_pos_partial_sum(),
	     .get_neg_partial_sum(pe1_get_neg_partial_sum),
	     .RDY_get_neg_partial_sum(),
	     .read_weights(),
	     .RDY_read_weights(),
	     .is_ready(),
	     .RDY_is_ready(),
	     .RDY_reset_pe());

  // submodule pe2
  mkPE32 pe2(.CLK(clk_CLK_OUT),
	     .RST_N(rstn_OUT_RST),
	     .add_constant_constant(pe2_add_constant_constant),
	     .add_input_inp(pe2_add_input_inp),
	     .load_weights_weights(pe2_load_weights_weights),
	     .multiply_constants_neg_constant(pe2_multiply_constants_neg_constant),
	     .multiply_constants_pos_constant(pe2_multiply_constants_pos_constant),
	     .EN_load_weights(pe2_EN_load_weights),
	     .EN_add_input(pe2_EN_add_input),
	     .EN_multiply_constants(pe2_EN_multiply_constants),
	     .EN_combine(pe2_EN_combine),
	     .EN_add_constant(pe2_EN_add_constant),
	     .EN_nonlinearity(pe2_EN_nonlinearity),
	     .EN_get_pos_partial_sum(pe2_EN_get_pos_partial_sum),
	     .EN_get_neg_partial_sum(pe2_EN_get_neg_partial_sum),
	     .EN_read_weights(pe2_EN_read_weights),
	     .EN_is_ready(pe2_EN_is_ready),
	     .EN_reset_pe(pe2_EN_reset_pe),
	     .RDY_load_weights(),
	     .RDY_add_input(),
	     .RDY_multiply_constants(),
	     .RDY_combine(),
	     .RDY_add_constant(),
	     .RDY_nonlinearity(),
	     .get_pos_partial_sum(),
	     .RDY_get_pos_partial_sum(),
	     .get_neg_partial_sum(),
	     .RDY_get_neg_partial_sum(),
	     .read_weights(pe2_read_weights),
	     .RDY_read_weights(),
	     .is_ready(),
	     .RDY_is_ready(),
	     .RDY_reset_pe());

  // submodule pe3
  mkPE32 pe3(.CLK(clk_CLK_OUT),
	     .RST_N(rstn_OUT_RST),
	     .add_constant_constant(pe3_add_constant_constant),
	     .add_input_inp(pe3_add_input_inp),
	     .load_weights_weights(pe3_load_weights_weights),
	     .multiply_constants_neg_constant(pe3_multiply_constants_neg_constant),
	     .multiply_constants_pos_constant(pe3_multiply_constants_pos_constant),
	     .EN_load_weights(pe3_EN_load_weights),
	     .EN_add_input(pe3_EN_add_input),
	     .EN_multiply_constants(pe3_EN_multiply_constants),
	     .EN_combine(pe3_EN_combine),
	     .EN_add_constant(pe3_EN_add_constant),
	     .EN_nonlinearity(pe3_EN_nonlinearity),
	     .EN_get_pos_partial_sum(pe3_EN_get_pos_partial_sum),
	     .EN_get_neg_partial_sum(pe3_EN_get_neg_partial_sum),
	     .EN_read_weights(pe3_EN_read_weights),
	     .EN_is_ready(pe3_EN_is_ready),
	     .EN_reset_pe(pe3_EN_reset_pe),
	     .RDY_load_weights(),
	     .RDY_add_input(),
	     .RDY_multiply_constants(),
	     .RDY_combine(),
	     .RDY_add_constant(),
	     .RDY_nonlinearity(),
	     .get_pos_partial_sum(pe3_get_pos_partial_sum),
	     .RDY_get_pos_partial_sum(),
	     .get_neg_partial_sum(),
	     .RDY_get_neg_partial_sum(),
	     .read_weights(),
	     .RDY_read_weights(),
	     .is_ready(),
	     .RDY_is_ready(),
	     .RDY_reset_pe());

  // submodule rstn
  InitialReset #(.RSTHOLD(32'd2)) rstn(.CLK(clk_CLK_OUT),
				       .OUT_RST(rstn_OUT_RST));

  // rule RL_test_end
  assign CAN_FIRE_RL_test_end =
	     cycle3 > 32'd11 && cycle1 > 32'd10 && !cycle2_11_ULE_8___d415 ;
  assign WILL_FIRE_RL_test_end = CAN_FIRE_RL_test_end ;

  // rule RL_test_dot_product
  assign CAN_FIRE_RL_test_dot_product = 1'd1 ;
  assign WILL_FIRE_RL_test_dot_product = 1'd1 ;

  // rule RL_test_nonlinearity
  assign CAN_FIRE_RL_test_nonlinearity = 1'd1 ;
  assign WILL_FIRE_RL_test_nonlinearity = 1'd1 ;

  // rule RL_test_rw_weights
  assign CAN_FIRE_RL_test_rw_weights = cycle2 < 32'd10 ;
  assign WILL_FIRE_RL_test_rw_weights = CAN_FIRE_RL_test_rw_weights ;

  // register cycle1
  assign cycle1_D_IN = cycle1 + 32'd1 ;
  assign cycle1_EN = 1'd1 ;

  // register cycle2
  assign cycle2_D_IN = cycle2 + 32'd1 ;
  assign cycle2_EN = CAN_FIRE_RL_test_rw_weights ;

  // register cycle3
  assign cycle3_D_IN = cycle3 + 32'd1 ;
  assign cycle3_EN = 1'd1 ;

  // register psum
  assign psum_D_IN = x__h2714 ;
  assign psum_EN = cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 ;

  // register psum2
  assign psum2_D_IN = 8'h0 ;
  assign psum2_EN = 1'b0 ;

  // submodule pe1
  assign pe1_add_constant_constant = 8'h0 ;
  assign pe1_add_input_inp =
	     { CASE_x557_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q20,
	       CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21 } ;
  assign pe1_load_weights_weights = 16'd18725 ;
  assign pe1_multiply_constants_neg_constant = 8'h0 ;
  assign pe1_multiply_constants_pos_constant = 8'h0 ;
  assign pe1_EN_load_weights = cycle1 == 32'd0 ;
  assign pe1_EN_add_input =
	     cycle1 != 32'd0 &&
	     (cycle1 == 32'd1 || cycle1_ULT_10___d5 && cycle1 < 32'd9) ;
  assign pe1_EN_multiply_constants = 1'b0 ;
  assign pe1_EN_combine = 1'b0 ;
  assign pe1_EN_add_constant = 1'b0 ;
  assign pe1_EN_nonlinearity = 1'b0 ;
  assign pe1_EN_get_pos_partial_sum =
	     cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 ;
  assign pe1_EN_get_neg_partial_sum =
	     cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 ;
  assign pe1_EN_read_weights = 1'b0 ;
  assign pe1_EN_is_ready = 1'b0 ;
  assign pe1_EN_reset_pe = 1'b0 ;

  // submodule pe2
  assign pe2_add_constant_constant = 8'h0 ;
  assign pe2_add_input_inp = 8'h0 ;
  assign pe2_load_weights_weights = 16'd18725 ;
  assign pe2_multiply_constants_neg_constant = 8'h0 ;
  assign pe2_multiply_constants_pos_constant = 8'h0 ;
  assign pe2_EN_load_weights =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;
  assign pe2_EN_add_input = 1'b0 ;
  assign pe2_EN_multiply_constants = 1'b0 ;
  assign pe2_EN_combine = 1'b0 ;
  assign pe2_EN_add_constant = 1'b0 ;
  assign pe2_EN_nonlinearity = 1'b0 ;
  assign pe2_EN_get_pos_partial_sum = 1'b0 ;
  assign pe2_EN_get_neg_partial_sum = 1'b0 ;
  assign pe2_EN_read_weights =
	     WILL_FIRE_RL_test_rw_weights && cycle2 != 32'd0 &&
	     cycle2_11_ULE_8___d415 ;
  assign pe2_EN_is_ready = 1'b0 ;
  assign pe2_EN_reset_pe = 1'b0 ;

  // submodule pe3
  assign pe3_add_constant_constant = 8'h0 ;
  assign pe3_add_input_inp =
	     { CASE_x160_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q22,
	       CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23 } ;
  assign pe3_load_weights_weights = 16'd18725 ;
  assign pe3_multiply_constants_neg_constant = 8'h0 ;
  assign pe3_multiply_constants_pos_constant = 8'h0 ;
  assign pe3_EN_load_weights = cycle3 == 32'd0 ;
  assign pe3_EN_add_input = cycle3 != 32'd0 && cycle3_74_ULT_9___d377 ;
  assign pe3_EN_multiply_constants = 1'b0 ;
  assign pe3_EN_combine = !cycle3_74_ULT_9___d377 && cycle3 == 32'd9 ;
  assign pe3_EN_add_constant = 1'b0 ;
  assign pe3_EN_nonlinearity = !cycle3_74_ULT_9___d377 && cycle3 == 32'd10 ;
  assign pe3_EN_get_pos_partial_sum =
	     cycle3 != 32'd0 && !cycle3_74_ULT_9___d377 && cycle3 != 32'd9 &&
	     cycle3 != 32'd10 ;
  assign pe3_EN_get_neg_partial_sum = 1'b0 ;
  assign pe3_EN_read_weights = 1'b0 ;
  assign pe3_EN_is_ready = 1'b0 ;
  assign pe3_EN_reset_pe = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_M_ETC___d43 =
	     x__h3292 * x__h3311 ;
  assign IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_M_ETC___d57 =
	     x__h3041[15:6] + { 4'd0, y_f__h3694 } ;
  assign IF_NOT_x877_BIT_9_AND_x877_BIT_7_OR_NOT_x877_B_ETC__q5 =
	     (!x__h2877[9] && (x__h2877[7] || x__h2877[9:8] != 2'd0)) ?
	       2'd1 :
	       ((x__h2877[9] && (!x__h2877[7] || ~x__h2877[9:8] != 2'd0)) ?
		  2'd2 :
		  x__h2877[7:6]) ;
  assign NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92 =
	     cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) ;
  assign NOT_cycle2_11_EQ_0_13_14_AND_cycle2_11_ULE_8_1_ETC___d433 =
	     cycle2 != 32'd0 && cycle2_11_ULE_8___d415 &&
	     SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 !=
	     SEL_ARR_1_1_2_0_1_2_0_1_0_cycle2_11_MINUS_1_27___d429 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d101 =
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     fpart__h4310 != 6'd0 &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94 == 3'd7 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d107 =
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94[2] &&
	     fpart__h4310 != 6'd0 &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94 != 3'd7 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d115 =
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     (!SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94[2] ||
	      fpart__h4310 == 6'd0) ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d176 =
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     fpart__h5409 != 6'd0 &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166 ==
	     3'd7 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d182 =
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166[2] &&
	     fpart__h5409 != 6'd0 &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166 !=
	     3'd7 ;
  assign NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d190 =
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     (!SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166[2] ||
	      fpart__h5409 == 6'd0) ;
  assign SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166 =
	     { IF_NOT_x877_BIT_9_AND_x877_BIT_7_OR_NOT_x877_B_ETC__q5[1],
	       IF_NOT_x877_BIT_9_AND_x877_BIT_7_OR_NOT_x877_B_ETC__q5 } ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94 =
	     { SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29[1],
	       SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29 } ;
  assign SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236 =
	     { x236_BITS_7_TO_6__q10[1], x236_BITS_7_TO_6__q10 } ;
  assign SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303 =
	     { x714_BITS_7_TO_6__q15[1], x714_BITS_7_TO_6__q15 } ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d198 =
	     { 33'd0, x__h5607 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d201 =
	     { 33'd0, x__h5607 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d209 =
	     { 33'd0, x__h5607 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d218 =
	     { 33'd0, x__h5607 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d227 =
	     { 33'd0, x__h5607 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d123 =
	     { 33'd0, x__h4537 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d126 =
	     { 33'd0, x__h4537 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d134 =
	     { 33'd0, x__h4537 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d143 =
	     { 33'd0, x__h4537 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d152 =
	     { 33'd0, x__h4537 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d265 =
	     { 33'd0, x__h6221 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d268 =
	     { 33'd0, x__h6221 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d276 =
	     { 33'd0, x__h6221 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d285 =
	     { 33'd0, x__h6221 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d294 =
	     { 33'd0, x__h6221 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d332 =
	     { 33'd0, x__h6837 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d335 =
	     { 33'd0, x__h6837 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d343 =
	     { 33'd0, x__h6837 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d352 =
	     { 33'd0, x__h6837 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d361 =
	     { 33'd0, x__h6837 } * 39'd100000 ;
  assign _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINU_ETC___d27 =
	     { 1'd0, SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINUS_2_1___d22[0] } +
	     {2{SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINUS_2_1___d22[1]}} ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d204 =
	     39'd10 * digit__h5586 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d129 =
	     39'd10 * digit__h4516 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_get_pos_p_ETC___d271 =
	     39'd10 * digit__h6200 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_PLUS_I_ETC___d338 =
	     39'd10 * digit__h6816 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d213 =
	     39'd10 * y__h5772 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d138 =
	     39'd10 * y__h4702 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_ge_ETC___d280 =
	     39'd10 * y__h6386 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_ETC___d347 =
	     39'd10 * y__h7002 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d147 =
	     39'd10 * y__h4782 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d222 =
	     39'd10 * y__h5852 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d289 =
	     39'd10 * y__h6466 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d356 =
	     39'd10 * y__h7082 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d156 =
	     39'd10 * y__h4862 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d231 =
	     39'd10 * y__h5932 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d298 =
	     39'd10 * y__h6546 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d365 =
	     39'd10 * y__h7162 ;
  assign cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d244 =
	     cycle1_ULT_10___d5 &&
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     x__h4236[5:0] != 6'd0 &&
	     SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236 ==
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d250 =
	     cycle1_ULT_10___d5 &&
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236[2] &&
	     x__h4236[5:0] != 6'd0 &&
	     SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236 !=
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d258 =
	     cycle1_ULT_10___d5 &&
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     (!SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236[2] ||
	      x__h4236[5:0] == 6'd0) ;
  assign cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d311 =
	     cycle1_ULT_10___d5 &&
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     x__h2714[5:0] != 6'd0 &&
	     SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303 ==
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d317 =
	     cycle1_ULT_10___d5 &&
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303[2] &&
	     x__h2714[5:0] != 6'd0 &&
	     SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303 !=
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d325 =
	     cycle1_ULT_10___d5 &&
	     (x__h2714[7:6] != x__h4236[7:6] ||
	      x__h2714[5:0] != x__h4236[5:0]) &&
	     (!SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303[2] ||
	      x__h2714[5:0] == 6'd0) ;
  assign cycle1_ULT_10___d5 = cycle1 < 32'd10 ;
  assign cycle2_11_MINUS_1___d427 = cycle2 - 32'd1 ;
  assign cycle2_11_ULE_8___d415 = cycle2 <= 32'd8 ;
  assign cycle3_74_ULT_9___d377 = cycle3 < 32'd9 ;
  assign digit__h4516 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d123[9:6] } ;
  assign digit__h4574 =
	     { 35'd0,
	       tx572_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q1[3:0] } ;
  assign digit__h4654 =
	     { 35'd0,
	       tx652_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q2[3:0] } ;
  assign digit__h4734 =
	     { 35'd0,
	       tx732_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q3[3:0] } ;
  assign digit__h4814 =
	     { 35'd0,
	       tx812_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q4[3:0] } ;
  assign digit__h5586 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d198[9:6] } ;
  assign digit__h5644 =
	     { 35'd0,
	       tx642_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_I_ETC__q6[3:0] } ;
  assign digit__h5724 =
	     { 35'd0,
	       tx722_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q7[3:0] } ;
  assign digit__h5804 =
	     { 35'd0,
	       tx802_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q8[3:0] } ;
  assign digit__h5884 =
	     { 35'd0,
	       tx882_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q9[3:0] } ;
  assign digit__h6200 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d265[9:6] } ;
  assign digit__h6258 =
	     { 35'd0,
	       tx256_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q11[3:0] } ;
  assign digit__h6338 =
	     { 35'd0,
	       tx336_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q12[3:0] } ;
  assign digit__h6418 =
	     { 35'd0,
	       tx416_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q13[3:0] } ;
  assign digit__h6498 =
	     { 35'd0,
	       tx496_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q14[3:0] } ;
  assign digit__h6816 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d332[9:6] } ;
  assign digit__h6874 =
	     { 35'd0,
	       tx872_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q16[3:0] } ;
  assign digit__h6954 =
	     { 35'd0,
	       tx952_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q17[3:0] } ;
  assign digit__h7034 =
	     { 35'd0,
	       tx032_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q18[3:0] } ;
  assign digit__h7114 =
	     { 35'd0,
	       tx112_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q19[3:0] } ;
  assign fpart__h5409 =
	     (!x__h2877[9] && (x__h2877[7] || x__h2877[9:8] != 2'd0)) ?
	       6'd63 :
	       ((x__h2877[9] && (!x__h2877[7] || ~x__h2877[9:8] != 2'd0)) ?
		  6'd0 :
		  x__h2877[5:0]) ;
  assign tx032_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q18 =
	     tx__h7032 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d356[38:0] ;
  assign tx112_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q19 =
	     tx__h7112 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d365[38:0] ;
  assign tx256_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q11 =
	     tx__h6256 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_get_pos_p_ETC___d271[38:0] ;
  assign tx336_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q12 =
	     tx__h6336 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_ge_ETC___d280[38:0] ;
  assign tx416_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q13 =
	     tx__h6416 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d289[38:0] ;
  assign tx496_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q14 =
	     tx__h6496 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d298[38:0] ;
  assign tx572_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_S_ETC__q1 =
	     tx__h4572 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d129[38:0] ;
  assign tx642_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_I_ETC__q6 =
	     tx__h5642 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d204[38:0] ;
  assign tx652_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q2 =
	     tx__h4652 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d138[38:0] ;
  assign tx722_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q7 =
	     tx__h5722 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d213[38:0] ;
  assign tx732_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q3 =
	     tx__h4732 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d147[38:0] ;
  assign tx802_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q8 =
	     tx__h5802 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d222[38:0] ;
  assign tx812_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q4 =
	     tx__h4812 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d156[38:0] ;
  assign tx872_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_p_ETC__q16 =
	     tx__h6872 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_PLUS_I_ETC___d338[38:0] ;
  assign tx882_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q9 =
	     tx__h5882 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d231[38:0] ;
  assign tx952_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q17 =
	     tx__h6952 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_ETC___d347[38:0] ;
  assign tx__h4572 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d126[38:6] } ;
  assign tx__h4652 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d134[38:6] } ;
  assign tx__h4732 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d143[38:6] } ;
  assign tx__h4812 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cyc_ETC___d152[38:6] } ;
  assign tx__h5642 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d201[38:6] } ;
  assign tx__h5722 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d209[38:6] } ;
  assign tx__h5802 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d218[38:6] } ;
  assign tx__h5882 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d227[38:6] } ;
  assign tx__h6256 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d268[38:6] } ;
  assign tx__h6336 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d276[38:6] } ;
  assign tx__h6416 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d285[38:6] } ;
  assign tx__h6496 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_pe1_get_pos_partial_sum_0_PLU_ETC___d294[38:6] } ;
  assign tx__h6872 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d335[38:6] } ;
  assign tx__h6952 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d343[38:6] } ;
  assign tx__h7032 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d352[38:6] } ;
  assign tx__h7112 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF__ETC___d361[38:6] } ;
  assign x236_BITS_7_TO_6__q10 = x__h4236[7:6] ;
  assign x714_BITS_7_TO_6__q15 = x__h2714[7:6] ;
  assign x__h2557 = cycle1 - 32'd1 ;
  assign x__h2714 =
	     psum +
	     ((!x__h2877[9] && (x__h2877[7] || x__h2877[9:8] != 2'd0)) ?
		8'd127 :
		((x__h2877[9] && (!x__h2877[7] || ~x__h2877[9:8] != 2'd0)) ?
		   8'd128 :
		   x__h2877[7:0])) ;
  assign x__h2877 =
	     (!x__h3041[15] &&
	      IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_M_ETC___d57[9]) ?
	       10'd511 :
	       IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_M_ETC___d57 ;
  assign x__h3041 =
	     (_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINU_ETC___d27[1] &&
	      !SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29[1] ||
	      SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29[1] &&
	      !_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINU_ETC___d27[1]) ?
	       -IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_M_ETC___d43 :
	       IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_M_ETC___d43 ;
  assign x__h3292 =
	     _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINU_ETC___d27[1] ?
	       -x__h3308 :
	       x__h3308 ;
  assign x__h3308 =
	     { _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINU_ETC___d27,
	       6'd0 } ;
  assign x__h3311 =
	     SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29[1] ?
	       -{ SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29,
		  fpart__h4310 } :
	       { SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29,
		 fpart__h4310 } ;
  assign x__h4236 = pe1_get_pos_partial_sum + pe1_get_neg_partial_sum ;
  assign x__h4322 = cycle1 - 32'd2 ;
  assign x__h4537 =
	     (SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94[2] &&
	      fpart__h4310 != 6'd0) ?
	       y_avValue_snd__h4480 :
	       fpart__h4310 ;
  assign x__h5607 =
	     (SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166[2] &&
	      fpart__h5409 != 6'd0) ?
	       y_avValue_snd__h5550 :
	       fpart__h5409 ;
  assign x__h6221 =
	     (SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236[2] &&
	      x__h4236[5:0] != 6'd0) ?
	       y_avValue_snd__h6164 :
	       x__h4236[5:0] ;
  assign x__h6837 =
	     (SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303[2] &&
	      x__h2714[5:0] != 6'd0) ?
	       y_avValue_snd__h6780 :
	       x__h2714[5:0] ;
  assign x__h8160 = cycle3 - 32'd1 ;
  assign y__h4702 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d129[38:0] +
	     digit__h4574 ;
  assign y__h4782 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d138[38:0] +
	     digit__h4654 ;
  assign y__h4862 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d147[38:0] +
	     digit__h4734 ;
  assign y__h5772 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d204[38:0] +
	     digit__h5644 ;
  assign y__h5852 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d213[38:0] +
	     digit__h5724 ;
  assign y__h5932 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d222[38:0] +
	     digit__h5804 ;
  assign y__h6386 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_get_pos_p_ETC___d271[38:0] +
	     digit__h6258 ;
  assign y__h6466 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_pe1_ge_ETC___d280[38:0] +
	     digit__h6338 ;
  assign y__h6546 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d289[38:0] +
	     digit__h6418 ;
  assign y__h7002 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_PLUS_I_ETC___d338[38:0] +
	     digit__h6874 ;
  assign y__h7082 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_9_ETC___d347[38:0] +
	     digit__h6954 ;
  assign y__h7162 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d356[38:0] +
	     digit__h7034 ;
  assign y_avValue_snd__h4480 = 6'd0 - fpart__h4310 ;
  assign y_avValue_snd__h5550 = 6'd0 - fpart__h5409 ;
  assign y_avValue_snd__h6164 = 6'd0 - x__h4236[5:0] ;
  assign y_avValue_snd__h6780 = 6'd0 - x__h2714[5:0] ;
  assign y_f__h3694 =
	     (x__h3041[5] && (x__h3041[15] || x__h3041[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  always@(x__h4322)
  begin
    case (x__h4322)
      32'd0: fpart__h4310 = 6'd32;
      32'd1: fpart__h4310 = 6'd48;
      32'd2: fpart__h4310 = 6'd16;
      32'd3: fpart__h4310 = 6'd58;
      32'd4: fpart__h4310 = 6'd44;
      32'd5, 32'd6, 32'd7: fpart__h4310 = 6'd0;
      default: fpart__h4310 = 6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h4322)
  begin
    case (x__h4322)
      32'd0, 32'd1, 32'd4, 32'd7:
	  SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINUS_2_1___d22 = 2'd1;
      32'd2, 32'd5: SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINUS_2_1___d22 = 2'd2;
      32'd3, 32'd6: SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINUS_2_1___d22 = 2'd0;
      default: SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINUS_2_1___d22 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h4322)
  begin
    case (x__h4322)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6:
	  SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29 = 2'd0;
      32'd1, 32'd3, 32'd7:
	  SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29 = 2'd3;
      default: SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1___d29 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_11_MINUS_1___d427 or pe2_read_weights)
  begin
    case (cycle2_11_MINUS_1___d427)
      32'd0:
	  SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
	      pe2_read_weights[1:0];
      32'd1:
	  SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
	      pe2_read_weights[3:2];
      32'd2:
	  SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
	      pe2_read_weights[5:4];
      32'd3:
	  SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
	      pe2_read_weights[7:6];
      32'd4:
	  SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
	      pe2_read_weights[9:8];
      32'd5:
	  SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
	      pe2_read_weights[11:10];
      32'd6:
	  SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
	      pe2_read_weights[13:12];
      32'd7:
	  SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
	      pe2_read_weights[15:14];
      default: SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_11_MINUS_1___d427)
  begin
    case (cycle2_11_MINUS_1___d427)
      32'd0, 32'd1, 32'd4, 32'd7:
	  SEL_ARR_1_1_2_0_1_2_0_1_0_cycle2_11_MINUS_1_27___d429 = 2'd1;
      32'd2, 32'd5:
	  SEL_ARR_1_1_2_0_1_2_0_1_0_cycle2_11_MINUS_1_27___d429 = 2'd2;
      32'd3, 32'd6:
	  SEL_ARR_1_1_2_0_1_2_0_1_0_cycle2_11_MINUS_1_27___d429 = 2'd0;
      default: SEL_ARR_1_1_2_0_1_2_0_1_0_cycle2_11_MINUS_1_27___d429 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h2557)
  begin
    case (x__h2557)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6:
	  CASE_x557_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q20 = 2'd0;
      32'd1, 32'd3, 32'd7:
	  CASE_x557_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q20 = 2'd3;
      default: CASE_x557_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q20 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h2557)
  begin
    case (x__h2557)
      32'd0: CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21 = 6'd32;
      32'd1: CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21 = 6'd48;
      32'd2: CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21 = 6'd16;
      32'd3: CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21 = 6'd58;
      32'd4: CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21 = 6'd44;
      32'd5, 32'd6, 32'd7:
	  CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21 = 6'd0;
      default: CASE_x557_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q21 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h8160)
  begin
    case (x__h8160)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6:
	  CASE_x160_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q22 = 2'd0;
      32'd1, 32'd3, 32'd7:
	  CASE_x160_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q22 = 2'd3;
      default: CASE_x160_0_0_1_3_2_0_3_3_4_0_5_0_6_0_7_3_DONT_ETC__q22 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h8160)
  begin
    case (x__h8160)
      32'd0: CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23 = 6'd32;
      32'd1: CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23 = 6'd48;
      32'd2: CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23 = 6'd16;
      32'd3: CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23 = 6'd58;
      32'd4: CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23 = 6'd44;
      32'd5, 32'd6, 32'd7:
	  CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23 = 6'd0;
      default: CASE_x160_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7_0_ETC__q23 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge clk_CLK_OUT)
  begin
    if (rstn_OUT_RST == `BSV_RESET_VALUE)
      begin
        cycle1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	psum <= `BSV_ASSIGNMENT_DELAY 8'd0;
	psum2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (cycle1_EN) cycle1 <= `BSV_ASSIGNMENT_DELAY cycle1_D_IN;
	if (cycle2_EN) cycle2 <= `BSV_ASSIGNMENT_DELAY cycle2_D_IN;
	if (cycle3_EN) cycle3 <= `BSV_ASSIGNMENT_DELAY cycle3_D_IN;
	if (psum_EN) psum <= `BSV_ASSIGNMENT_DELAY psum_D_IN;
	if (psum2_EN) psum2 <= `BSV_ASSIGNMENT_DELAY psum2_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycle1 = 32'hAAAAAAAA;
    cycle2 = 32'hAAAAAAAA;
    cycle3 = 32'hAAAAAAAA;
    psum = 8'hAA;
    psum2 = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge clk_CLK_OUT)
  begin
    #0;
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_end) $finish(32'd1);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("Fail! ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d101)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d107)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d115)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_0_3_0_3_0_0_0_3_0_cycle1_MINUS_2_1_9___d94));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h4516);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h4574);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h4654);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h4734);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h4814);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write(" x ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d.",
	       $signed({ _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINU_ETC___d27[1],
			 _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_0_cycle1_MINU_ETC___d27 }));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", 33'd0);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", 33'd0);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", 33'd0);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", 33'd0);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", 33'd0);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write(" = ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d176)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d182)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d190)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d166));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h5586);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h5644);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h5724);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h5804);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h5884);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write(" result:  ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d244)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d250)
	$write("%0d.",
	       $signed(SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d258)
	$write("%0d.",
	       $signed(SEXT_pe1_get_pos_partial_sum_0_PLUS_pe1_get_ne_ETC___d236));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h6200);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h6258);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h6338);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h6418);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h6498);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write(" expected:  ");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d311)
	$write("-0.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d317)
	$write("%0d.",
	       $signed(SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303 +
		       3'd1));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_9_PLUS_IF_NOT_IF_NO_ETC___d325)
	$write("%0d.",
	       $signed(SEXT_psum_9_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303));
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h6816);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h6874);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h6954);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h7034);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$write("%0d", digit__h7114);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$display;
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_6_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d92)
	$finish(32'd1);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && !cycle1_ULT_10___d5)
	$display("Passed all dot product tests.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_74_ULT_9___d377 && cycle3 != 32'd9 &&
	  cycle3 != 32'd10 &&
	  (pe3_get_pos_partial_sum[7:6] != 2'd0 ||
	   pe3_get_pos_partial_sum[5:0] != 6'd0))
	$write("Failed nonlinearity!");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_74_ULT_9___d377 && cycle3 != 32'd9 &&
	  cycle3 != 32'd10 &&
	  pe3_get_pos_partial_sum[7:6] == 2'd0 &&
	  pe3_get_pos_partial_sum[5:0] == 6'd0)
	$display("Passed all non-linearity tests.");
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights &&
	  NOT_cycle2_11_EQ_0_13_14_AND_cycle2_11_ULE_8_1_ETC___d433)
	$display("Fail! %d vs. %d, cycle2 %d",
		 SEL_ARR_pe2_read_weights_17_BITS_1_TO_0_18_pe2_ETC___d428,
		 SEL_ARR_1_1_2_0_1_2_0_1_0_cycle2_11_MINUS_1_27___d429,
		 cycle2_11_MINUS_1___d427);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights &&
	  NOT_cycle2_11_EQ_0_13_14_AND_cycle2_11_ULE_8_1_ETC___d433)
	$finish(32'd1);
    if (rstn_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights && cycle2 != 32'd0 &&
	  !cycle2_11_ULE_8___d415)
	$display("Passed all r/w weight tests.");
  end
  // synopsys translate_on
endmodule  // mkPETest

