//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Mon Dec 11 16:25:46 EST 2017
//
//
// Ports:
// Name                         I/O  size props
// RDY_load_weights               O     1 const
// RDY_add_input                  O     1 const
// RDY_multiply_constants         O     1 const
// RDY_combine                    O     1 const
// RDY_add_constant               O     1 const
// RDY_nonlinearity               O     1 const
// get_pos_partial_sum            O     8
// RDY_get_pos_partial_sum        O     1 const
// get_neg_partial_sum            O     8
// RDY_get_neg_partial_sum        O     1 const
// read_weights                   O    16 reg
// RDY_read_weights               O     1 const
// is_ready                       O     1
// RDY_is_ready                   O     1 const
// RDY_reset_pe                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// load_weights_weights           I    16 reg
// add_input_inp                  I     8
// multiply_constants_pos_constant  I     8
// multiply_constants_neg_constant  I     8
// add_constant_constant          I     8
// EN_load_weights                I     1
// EN_add_input                   I     1
// EN_multiply_constants          I     1
// EN_combine                     I     1
// EN_add_constant                I     1
// EN_nonlinearity                I     1
// EN_reset_pe                    I     1
// EN_get_pos_partial_sum         I     1 unused
// EN_get_neg_partial_sum         I     1 unused
// EN_read_weights                I     1 unused
// EN_is_ready                    I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPE16(CLK,
	      RST_N,

	      load_weights_weights,
	      EN_load_weights,
	      RDY_load_weights,

	      add_input_inp,
	      EN_add_input,
	      RDY_add_input,

	      multiply_constants_pos_constant,
	      multiply_constants_neg_constant,
	      EN_multiply_constants,
	      RDY_multiply_constants,

	      EN_combine,
	      RDY_combine,

	      add_constant_constant,
	      EN_add_constant,
	      RDY_add_constant,

	      EN_nonlinearity,
	      RDY_nonlinearity,

	      EN_get_pos_partial_sum,
	      get_pos_partial_sum,
	      RDY_get_pos_partial_sum,

	      EN_get_neg_partial_sum,
	      get_neg_partial_sum,
	      RDY_get_neg_partial_sum,

	      EN_read_weights,
	      read_weights,
	      RDY_read_weights,

	      EN_is_ready,
	      is_ready,
	      RDY_is_ready,

	      EN_reset_pe,
	      RDY_reset_pe);
  input  CLK;
  input  RST_N;

  // action method load_weights
  input  [15 : 0] load_weights_weights;
  input  EN_load_weights;
  output RDY_load_weights;

  // action method add_input
  input  [7 : 0] add_input_inp;
  input  EN_add_input;
  output RDY_add_input;

  // action method multiply_constants
  input  [7 : 0] multiply_constants_pos_constant;
  input  [7 : 0] multiply_constants_neg_constant;
  input  EN_multiply_constants;
  output RDY_multiply_constants;

  // action method combine
  input  EN_combine;
  output RDY_combine;

  // action method add_constant
  input  [7 : 0] add_constant_constant;
  input  EN_add_constant;
  output RDY_add_constant;

  // action method nonlinearity
  input  EN_nonlinearity;
  output RDY_nonlinearity;

  // actionvalue method get_pos_partial_sum
  input  EN_get_pos_partial_sum;
  output [7 : 0] get_pos_partial_sum;
  output RDY_get_pos_partial_sum;

  // actionvalue method get_neg_partial_sum
  input  EN_get_neg_partial_sum;
  output [7 : 0] get_neg_partial_sum;
  output RDY_get_neg_partial_sum;

  // actionvalue method read_weights
  input  EN_read_weights;
  output [15 : 0] read_weights;
  output RDY_read_weights;

  // actionvalue method is_ready
  input  EN_is_ready;
  output is_ready;
  output RDY_is_ready;

  // action method reset_pe
  input  EN_reset_pe;
  output RDY_reset_pe;

  // signals for module outputs
  wire [15 : 0] read_weights;
  wire [7 : 0] get_neg_partial_sum, get_pos_partial_sum;
  wire RDY_add_constant,
       RDY_add_input,
       RDY_combine,
       RDY_get_neg_partial_sum,
       RDY_get_pos_partial_sum,
       RDY_is_ready,
       RDY_load_weights,
       RDY_multiply_constants,
       RDY_nonlinearity,
       RDY_read_weights,
       RDY_reset_pe,
       is_ready;

  // register m_neg_partial_sum
  reg [15 : 0] m_neg_partial_sum;
  reg [15 : 0] m_neg_partial_sum_D_IN;
  wire m_neg_partial_sum_EN;

  // register m_pos_partial_sum
  reg [15 : 0] m_pos_partial_sum;
  reg [15 : 0] m_pos_partial_sum_D_IN;
  wire m_pos_partial_sum_EN;

  // register m_step
  reg [3 : 0] m_step;
  wire [3 : 0] m_step_D_IN;
  wire m_step_EN;

  // register m_weight_regs_0
  reg [1 : 0] m_weight_regs_0;
  wire [1 : 0] m_weight_regs_0_D_IN;
  wire m_weight_regs_0_EN;

  // register m_weight_regs_1
  reg [1 : 0] m_weight_regs_1;
  wire [1 : 0] m_weight_regs_1_D_IN;
  wire m_weight_regs_1_EN;

  // register m_weight_regs_2
  reg [1 : 0] m_weight_regs_2;
  wire [1 : 0] m_weight_regs_2_D_IN;
  wire m_weight_regs_2_EN;

  // register m_weight_regs_3
  reg [1 : 0] m_weight_regs_3;
  wire [1 : 0] m_weight_regs_3_D_IN;
  wire m_weight_regs_3_EN;

  // register m_weight_regs_4
  reg [1 : 0] m_weight_regs_4;
  wire [1 : 0] m_weight_regs_4_D_IN;
  wire m_weight_regs_4_EN;

  // register m_weight_regs_5
  reg [1 : 0] m_weight_regs_5;
  wire [1 : 0] m_weight_regs_5_D_IN;
  wire m_weight_regs_5_EN;

  // register m_weight_regs_6
  reg [1 : 0] m_weight_regs_6;
  wire [1 : 0] m_weight_regs_6_D_IN;
  wire m_weight_regs_6_EN;

  // register m_weight_regs_7
  reg [1 : 0] m_weight_regs_7;
  wire [1 : 0] m_weight_regs_7_D_IN;
  wire m_weight_regs_7_EN;

  // rule scheduling signals
  wire CAN_FIRE_add_constant,
       CAN_FIRE_add_input,
       CAN_FIRE_combine,
       CAN_FIRE_get_neg_partial_sum,
       CAN_FIRE_get_pos_partial_sum,
       CAN_FIRE_is_ready,
       CAN_FIRE_load_weights,
       CAN_FIRE_multiply_constants,
       CAN_FIRE_nonlinearity,
       CAN_FIRE_read_weights,
       CAN_FIRE_reset_pe,
       WILL_FIRE_add_constant,
       WILL_FIRE_add_input,
       WILL_FIRE_combine,
       WILL_FIRE_get_neg_partial_sum,
       WILL_FIRE_get_pos_partial_sum,
       WILL_FIRE_is_ready,
       WILL_FIRE_load_weights,
       WILL_FIRE_multiply_constants,
       WILL_FIRE_nonlinearity,
       WILL_FIRE_read_weights,
       WILL_FIRE_reset_pe;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_m_neg_partial_sum_write_1__VAL_2,
		MUX_m_neg_partial_sum_write_1__VAL_3,
		MUX_m_pos_partial_sum_write_1__VAL_2,
		MUX_m_pos_partial_sum_write_1__VAL_3,
		MUX_m_pos_partial_sum_write_1__VAL_4,
		MUX_m_pos_partial_sum_write_1__VAL_5,
		MUX_m_pos_partial_sum_write_1__VAL_6;
  wire [3 : 0] MUX_m_step_write_1__VAL_2;

  // remaining internal signals
  reg [1 : 0] SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27;
  wire [31 : 0] IF_SEXT_multiply_constants_neg_constant_BITS_7_ETC___d118,
		IF_SEXT_multiply_constants_pos_constant_BITS_7_ETC___d74,
		x__h4685,
		x__h6438;
  wire [23 : 0] IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130,
		IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86,
		IF_SEXT_multiply_constants_neg_constant_BITS_7_ETC___d127,
		IF_SEXT_multiply_constants_pos_constant_BITS_7_ETC___d83;
  wire [15 : 0] SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d30,
		SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d47,
		c__h1994,
		m_neg_partial_sum_2_MINUS_SEXT_add_input_inp_B_ETC___d50,
		m_pos_partial_sum_PLUS_SEXT_add_input_inp_BITS_ETC___d34,
		x__h4742,
		x__h4758,
		x__h4761,
		x__h6492,
		x__h6508,
		x__h6511,
		y__h2395,
		y__h3472;
  wire [7 : 0] in2_f__h7772,
	       in2_i__h7771,
	       inp_se_f__h2399,
	       inp_se_i__h2398,
	       tmp1a_f__h4703,
	       tmp1a_i__h4702,
	       tmp3a_f__h6456,
	       tmp3a_i__h6455,
	       y_f__h5089,
	       y_f__h6836;
  wire [1 : 0] add_constant_constant_BITS_7_TO_6__q4,
	       add_input_inp_BITS_7_TO_6__q1,
	       multiply_constants_neg_constant_BITS_7_TO_6__q3,
	       multiply_constants_pos_constant_BITS_7_TO_6__q2;

  // action method load_weights
  assign RDY_load_weights = 1'd1 ;
  assign CAN_FIRE_load_weights = 1'd1 ;
  assign WILL_FIRE_load_weights = EN_load_weights ;

  // action method add_input
  assign RDY_add_input = 1'd1 ;
  assign CAN_FIRE_add_input = 1'd1 ;
  assign WILL_FIRE_add_input = EN_add_input ;

  // action method multiply_constants
  assign RDY_multiply_constants = 1'd1 ;
  assign CAN_FIRE_multiply_constants = 1'd1 ;
  assign WILL_FIRE_multiply_constants = EN_multiply_constants ;

  // action method combine
  assign RDY_combine = 1'd1 ;
  assign CAN_FIRE_combine = 1'd1 ;
  assign WILL_FIRE_combine = EN_combine ;

  // action method add_constant
  assign RDY_add_constant = 1'd1 ;
  assign CAN_FIRE_add_constant = 1'd1 ;
  assign WILL_FIRE_add_constant = EN_add_constant ;

  // action method nonlinearity
  assign RDY_nonlinearity = 1'd1 ;
  assign CAN_FIRE_nonlinearity = 1'd1 ;
  assign WILL_FIRE_nonlinearity = EN_nonlinearity ;

  // actionvalue method get_pos_partial_sum
  assign get_pos_partial_sum =
	     (!m_pos_partial_sum[15] &&
	      (m_pos_partial_sum[9] || m_pos_partial_sum[15:10] != 6'd0)) ?
	       8'd127 :
	       ((m_pos_partial_sum[15] &&
		 (!m_pos_partial_sum[9] ||
		  ~m_pos_partial_sum[15:10] != 6'd0)) ?
		  8'd128 :
		  m_pos_partial_sum[9:2]) ;
  assign RDY_get_pos_partial_sum = 1'd1 ;
  assign CAN_FIRE_get_pos_partial_sum = 1'd1 ;
  assign WILL_FIRE_get_pos_partial_sum = EN_get_pos_partial_sum ;

  // actionvalue method get_neg_partial_sum
  assign get_neg_partial_sum =
	     (!m_neg_partial_sum[15] &&
	      (m_neg_partial_sum[9] || m_neg_partial_sum[15:10] != 6'd0)) ?
	       8'd127 :
	       ((m_neg_partial_sum[15] &&
		 (!m_neg_partial_sum[9] ||
		  ~m_neg_partial_sum[15:10] != 6'd0)) ?
		  8'd128 :
		  m_neg_partial_sum[9:2]) ;
  assign RDY_get_neg_partial_sum = 1'd1 ;
  assign CAN_FIRE_get_neg_partial_sum = 1'd1 ;
  assign WILL_FIRE_get_neg_partial_sum = EN_get_neg_partial_sum ;

  // actionvalue method read_weights
  assign read_weights =
	     { m_weight_regs_7,
	       m_weight_regs_6,
	       m_weight_regs_5,
	       m_weight_regs_4,
	       m_weight_regs_3,
	       m_weight_regs_2,
	       m_weight_regs_1,
	       m_weight_regs_0 } ;
  assign RDY_read_weights = 1'd1 ;
  assign CAN_FIRE_read_weights = 1'd1 ;
  assign WILL_FIRE_read_weights = EN_read_weights ;

  // actionvalue method is_ready
  assign is_ready = m_step == 4'd8 ;
  assign RDY_is_ready = 1'd1 ;
  assign CAN_FIRE_is_ready = 1'd1 ;
  assign WILL_FIRE_is_ready = EN_is_ready ;

  // action method reset_pe
  assign RDY_reset_pe = 1'd1 ;
  assign CAN_FIRE_reset_pe = 1'd1 ;
  assign WILL_FIRE_reset_pe = EN_reset_pe ;

  // inputs to muxes for submodule ports
  assign MUX_m_neg_partial_sum_write_1__VAL_2 =
	     (!m_neg_partial_sum[15] &&
	      SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d47[15] &&
	      m_neg_partial_sum_2_MINUS_SEXT_add_input_inp_B_ETC___d50[15]) ?
	       16'd32767 :
	       ((m_neg_partial_sum[15] &&
		 !SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d47[15] &&
		 !m_neg_partial_sum_2_MINUS_SEXT_add_input_inp_B_ETC___d50[15]) ?
		  16'd32768 :
		  m_neg_partial_sum_2_MINUS_SEXT_add_input_inp_B_ETC___d50) ;
  assign MUX_m_neg_partial_sum_write_1__VAL_3 =
	     (!IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130[23] &&
	      (IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130[15] ||
	       IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130[23:16] !=
	       8'd0)) ?
	       16'd32767 :
	       ((IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130[23] &&
		 (!IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130[15] ||
		  ~IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130[23:16] !=
		  8'd0)) ?
		  16'd32768 :
		  IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130[15:0]) ;
  assign MUX_m_pos_partial_sum_write_1__VAL_2 =
	     (!m_pos_partial_sum[15] &&
	      !SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d30[15] &&
	      m_pos_partial_sum_PLUS_SEXT_add_input_inp_BITS_ETC___d34[15]) ?
	       16'd32767 :
	       ((m_pos_partial_sum[15] &&
		 SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d30[15] &&
		 !m_pos_partial_sum_PLUS_SEXT_add_input_inp_BITS_ETC___d34[15]) ?
		  16'd32768 :
		  m_pos_partial_sum_PLUS_SEXT_add_input_inp_BITS_ETC___d34) ;
  assign MUX_m_pos_partial_sum_write_1__VAL_3 =
	     (!IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86[23] &&
	      (IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86[15] ||
	       IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86[23:16] !=
	       8'd0)) ?
	       16'd32767 :
	       ((IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86[23] &&
		 (!IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86[15] ||
		  ~IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86[23:16] !=
		  8'd0)) ?
		  16'd32768 :
		  IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86[15:0]) ;
  assign MUX_m_pos_partial_sum_write_1__VAL_4 =
	     m_pos_partial_sum[15] ? 16'd0 : m_pos_partial_sum ;
  assign MUX_m_pos_partial_sum_write_1__VAL_5 =
	     m_pos_partial_sum + { in2_i__h7771, in2_f__h7772 } ;
  assign MUX_m_pos_partial_sum_write_1__VAL_6 =
	     m_pos_partial_sum + m_neg_partial_sum ;
  assign MUX_m_step_write_1__VAL_2 = m_step + 4'd1 ;

  // register m_neg_partial_sum
  always@(EN_reset_pe or
	  EN_add_input or
	  MUX_m_neg_partial_sum_write_1__VAL_2 or
	  EN_multiply_constants or MUX_m_neg_partial_sum_write_1__VAL_3)
  case (1'b1)
    EN_reset_pe: m_neg_partial_sum_D_IN = 16'd0;
    EN_add_input:
	m_neg_partial_sum_D_IN = MUX_m_neg_partial_sum_write_1__VAL_2;
    EN_multiply_constants:
	m_neg_partial_sum_D_IN = MUX_m_neg_partial_sum_write_1__VAL_3;
    default: m_neg_partial_sum_D_IN =
		 16'b1010101010101010 /* unspecified value */ ;
  endcase
  assign m_neg_partial_sum_EN =
	     EN_multiply_constants || EN_add_input || EN_reset_pe ;

  // register m_pos_partial_sum
  always@(EN_reset_pe or
	  EN_add_input or
	  MUX_m_pos_partial_sum_write_1__VAL_2 or
	  EN_multiply_constants or
	  MUX_m_pos_partial_sum_write_1__VAL_3 or
	  EN_nonlinearity or
	  MUX_m_pos_partial_sum_write_1__VAL_4 or
	  EN_add_constant or
	  MUX_m_pos_partial_sum_write_1__VAL_5 or
	  EN_combine or MUX_m_pos_partial_sum_write_1__VAL_6)
  case (1'b1)
    EN_reset_pe: m_pos_partial_sum_D_IN = 16'd0;
    EN_add_input:
	m_pos_partial_sum_D_IN = MUX_m_pos_partial_sum_write_1__VAL_2;
    EN_multiply_constants:
	m_pos_partial_sum_D_IN = MUX_m_pos_partial_sum_write_1__VAL_3;
    EN_nonlinearity:
	m_pos_partial_sum_D_IN = MUX_m_pos_partial_sum_write_1__VAL_4;
    EN_add_constant:
	m_pos_partial_sum_D_IN = MUX_m_pos_partial_sum_write_1__VAL_5;
    EN_combine: m_pos_partial_sum_D_IN = MUX_m_pos_partial_sum_write_1__VAL_6;
    default: m_pos_partial_sum_D_IN =
		 16'b1010101010101010 /* unspecified value */ ;
  endcase
  assign m_pos_partial_sum_EN =
	     EN_add_input || EN_multiply_constants || EN_add_constant ||
	     EN_combine ||
	     EN_nonlinearity ||
	     EN_reset_pe ;

  // register m_step
  assign m_step_D_IN = EN_reset_pe ? 4'd0 : MUX_m_step_write_1__VAL_2 ;
  assign m_step_EN = EN_add_input || EN_reset_pe ;

  // register m_weight_regs_0
  assign m_weight_regs_0_D_IN = load_weights_weights[1:0] ;
  assign m_weight_regs_0_EN = EN_load_weights ;

  // register m_weight_regs_1
  assign m_weight_regs_1_D_IN = load_weights_weights[3:2] ;
  assign m_weight_regs_1_EN = EN_load_weights ;

  // register m_weight_regs_2
  assign m_weight_regs_2_D_IN = load_weights_weights[5:4] ;
  assign m_weight_regs_2_EN = EN_load_weights ;

  // register m_weight_regs_3
  assign m_weight_regs_3_D_IN = load_weights_weights[7:6] ;
  assign m_weight_regs_3_EN = EN_load_weights ;

  // register m_weight_regs_4
  assign m_weight_regs_4_D_IN = load_weights_weights[9:8] ;
  assign m_weight_regs_4_EN = EN_load_weights ;

  // register m_weight_regs_5
  assign m_weight_regs_5_D_IN = load_weights_weights[11:10] ;
  assign m_weight_regs_5_EN = EN_load_weights ;

  // register m_weight_regs_6
  assign m_weight_regs_6_D_IN = load_weights_weights[13:12] ;
  assign m_weight_regs_6_EN = EN_load_weights ;

  // register m_weight_regs_7
  assign m_weight_regs_7_D_IN = load_weights_weights[15:14] ;
  assign m_weight_regs_7_EN = EN_load_weights ;

  // remaining internal signals
  assign IF_NOT_IF_SEXT_multiply_constants_neg_constant_ETC___d130 =
	     (!x__h6438[31] &&
	      IF_SEXT_multiply_constants_neg_constant_BITS_7_ETC___d127[23]) ?
	       24'd8388607 :
	       IF_SEXT_multiply_constants_neg_constant_BITS_7_ETC___d127 ;
  assign IF_NOT_IF_SEXT_multiply_constants_pos_constant_ETC___d86 =
	     (!x__h4685[31] &&
	      IF_SEXT_multiply_constants_pos_constant_BITS_7_ETC___d83[23]) ?
	       24'd8388607 :
	       IF_SEXT_multiply_constants_pos_constant_BITS_7_ETC___d83 ;
  assign IF_SEXT_multiply_constants_neg_constant_BITS_7_ETC___d118 =
	     x__h6492 * x__h6511 ;
  assign IF_SEXT_multiply_constants_neg_constant_BITS_7_ETC___d127 =
	     x__h6438[31:8] + { 16'd0, y_f__h6836 } ;
  assign IF_SEXT_multiply_constants_pos_constant_BITS_7_ETC___d74 =
	     x__h4742 * x__h4761 ;
  assign IF_SEXT_multiply_constants_pos_constant_BITS_7_ETC___d83 =
	     x__h4685[31:8] + { 16'd0, y_f__h5089 } ;
  assign SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d30 =
	     c__h1994 & y__h2395 ;
  assign SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d47 =
	     c__h1994 & y__h3472 ;
  assign add_constant_constant_BITS_7_TO_6__q4 = add_constant_constant[7:6] ;
  assign add_input_inp_BITS_7_TO_6__q1 = add_input_inp[7:6] ;
  assign c__h1994 = { inp_se_i__h2398, inp_se_f__h2399 } ;
  assign in2_f__h7772 = { add_constant_constant[5:0], 2'd0 } ;
  assign in2_i__h7771 =
	     { {6{add_constant_constant_BITS_7_TO_6__q4[1]}},
	       add_constant_constant_BITS_7_TO_6__q4 } ;
  assign inp_se_f__h2399 = { add_input_inp[5:0], 2'd0 } ;
  assign inp_se_i__h2398 =
	     { {6{add_input_inp_BITS_7_TO_6__q1[1]}},
	       add_input_inp_BITS_7_TO_6__q1 } ;
  assign m_neg_partial_sum_2_MINUS_SEXT_add_input_inp_B_ETC___d50 =
	     m_neg_partial_sum -
	     SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d47 ;
  assign m_pos_partial_sum_PLUS_SEXT_add_input_inp_BITS_ETC___d34 =
	     m_pos_partial_sum +
	     SEXT_add_input_inp_BITS_7_TO_6_2_3_CONCAT_add__ETC___d30 ;
  assign multiply_constants_neg_constant_BITS_7_TO_6__q3 =
	     multiply_constants_neg_constant[7:6] ;
  assign multiply_constants_pos_constant_BITS_7_TO_6__q2 =
	     multiply_constants_pos_constant[7:6] ;
  assign tmp1a_f__h4703 = { multiply_constants_pos_constant[5:0], 2'd0 } ;
  assign tmp1a_i__h4702 =
	     { {6{multiply_constants_pos_constant_BITS_7_TO_6__q2[1]}},
	       multiply_constants_pos_constant_BITS_7_TO_6__q2 } ;
  assign tmp3a_f__h6456 = { multiply_constants_neg_constant[5:0], 2'd0 } ;
  assign tmp3a_i__h6455 =
	     { {6{multiply_constants_neg_constant_BITS_7_TO_6__q3[1]}},
	       multiply_constants_neg_constant_BITS_7_TO_6__q3 } ;
  assign x__h4685 =
	     (tmp1a_i__h4702[7] && !m_pos_partial_sum[15] ||
	      m_pos_partial_sum[15] && !tmp1a_i__h4702[7]) ?
	       -IF_SEXT_multiply_constants_pos_constant_BITS_7_ETC___d74 :
	       IF_SEXT_multiply_constants_pos_constant_BITS_7_ETC___d74 ;
  assign x__h4742 = tmp1a_i__h4702[7] ? -x__h4758 : x__h4758 ;
  assign x__h4758 = { tmp1a_i__h4702, tmp1a_f__h4703 } ;
  assign x__h4761 =
	     m_pos_partial_sum[15] ? -m_pos_partial_sum : m_pos_partial_sum ;
  assign x__h6438 =
	     (tmp3a_i__h6455[7] && !m_neg_partial_sum[15] ||
	      m_neg_partial_sum[15] && !tmp3a_i__h6455[7]) ?
	       -IF_SEXT_multiply_constants_neg_constant_BITS_7_ETC___d118 :
	       IF_SEXT_multiply_constants_neg_constant_BITS_7_ETC___d118 ;
  assign x__h6492 = tmp3a_i__h6455[7] ? -x__h6508 : x__h6508 ;
  assign x__h6508 = { tmp3a_i__h6455, tmp3a_f__h6456 } ;
  assign x__h6511 =
	     m_neg_partial_sum[15] ? -m_neg_partial_sum : m_neg_partial_sum ;
  assign y__h2395 =
	     SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27[0] ?
	       16'd65535 :
	       16'd0 ;
  assign y__h3472 =
	     SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27[1] ?
	       16'd65535 :
	       16'd0 ;
  assign y_f__h5089 = x__h4685[7] ? 8'd1 : 8'd0 ;
  assign y_f__h6836 = x__h6438[7] ? 8'd1 : 8'd0 ;
  always@(m_step or
	  m_weight_regs_0 or
	  m_weight_regs_1 or
	  m_weight_regs_2 or
	  m_weight_regs_3 or
	  m_weight_regs_4 or
	  m_weight_regs_5 or m_weight_regs_6 or m_weight_regs_7)
  begin
    case (m_step)
      4'd0:
	  SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
	      m_weight_regs_0;
      4'd1:
	  SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
	      m_weight_regs_1;
      4'd2:
	  SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
	      m_weight_regs_2;
      4'd3:
	  SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
	      m_weight_regs_3;
      4'd4:
	  SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
	      m_weight_regs_4;
      4'd5:
	  SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
	      m_weight_regs_5;
      4'd6:
	  SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
	      m_weight_regs_6;
      4'd7:
	  SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
	      m_weight_regs_7;
      default: SEL_ARR_m_weight_regs_0_7_m_weight_regs_1_8_m__ETC___d27 =
		   2'b10 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY 16'd0;
	m_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY 16'd0;
	m_step <= `BSV_ASSIGNMENT_DELAY 4'd0;
	m_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	m_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	m_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	m_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	m_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	m_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	m_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	m_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (m_neg_partial_sum_EN)
	  m_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY m_neg_partial_sum_D_IN;
	if (m_pos_partial_sum_EN)
	  m_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY m_pos_partial_sum_D_IN;
	if (m_step_EN) m_step <= `BSV_ASSIGNMENT_DELAY m_step_D_IN;
	if (m_weight_regs_0_EN)
	  m_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY m_weight_regs_0_D_IN;
	if (m_weight_regs_1_EN)
	  m_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY m_weight_regs_1_D_IN;
	if (m_weight_regs_2_EN)
	  m_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY m_weight_regs_2_D_IN;
	if (m_weight_regs_3_EN)
	  m_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY m_weight_regs_3_D_IN;
	if (m_weight_regs_4_EN)
	  m_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY m_weight_regs_4_D_IN;
	if (m_weight_regs_5_EN)
	  m_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY m_weight_regs_5_D_IN;
	if (m_weight_regs_6_EN)
	  m_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY m_weight_regs_6_D_IN;
	if (m_weight_regs_7_EN)
	  m_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY m_weight_regs_7_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_neg_partial_sum = 16'hAAAA;
    m_pos_partial_sum = 16'hAAAA;
    m_step = 4'hA;
    m_weight_regs_0 = 2'h2;
    m_weight_regs_1 = 2'h2;
    m_weight_regs_2 = 2'h2;
    m_weight_regs_3 = 2'h2;
    m_weight_regs_4 = 2'h2;
    m_weight_regs_5 = 2'h2;
    m_weight_regs_6 = 2'h2;
    m_weight_regs_7 = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPE16

