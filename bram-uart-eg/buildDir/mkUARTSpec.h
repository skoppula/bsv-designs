/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Oct 10 17:03:19 EDT 2017
 * 
 */

/* Generation options: */
#ifndef __mkUARTSpec_h__
#define __mkUARTSpec_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkUARTSpec module */
class MOD_mkUARTSpec : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_u_rx_bit_count;
  MOD_Reg<tUInt8> INST_u_rx_curr_rx;
  MOD_Reg<tUInt8> INST_u_rx_curr_rx_valid;
  MOD_Reg<tUInt8> INST_u_rx_last_stop;
  MOD_Reg<tUInt8> INST_u_rx_parity_bit;
  MOD_Reg<tUInt8> INST_u_rx_r_framing_error;
  MOD_Reg<tUInt8> INST_u_rx_r_overrun_error;
  MOD_Reg<tUInt8> INST_u_rx_r_parity_error;
  MOD_Wire<tUInt8> INST_u_rx_r_rxd;
  MOD_Reg<tUInt8> INST_u_rx_r_rxd_old;
  MOD_Wire<tUInt8> INST_u_rx_rx_f_clear_w;
  MOD_Wire<tUInt8> INST_u_rx_rx_f_deq_w;
  MOD_Wire<tUInt8> INST_u_rx_rx_f_enq_w;
  MOD_Reg<tUInt8> INST_u_rx_rx_f_r_count;
  MOD_Fifo<tUInt8> INST_u_rx_rx_f_rx_f;
  MOD_Reg<tUInt8> INST_u_rx_state;
  MOD_Reg<tUInt32> INST_u_rx_ticker_counter;
  MOD_Wire<tUInt8> INST_u_rx_ticker_do_center;
  MOD_Reg<tUInt8> INST_u_tx_bit_count;
  MOD_Reg<tUInt8> INST_u_tx_curr_tx;
  MOD_Reg<tUInt8> INST_u_tx_last_stop;
  MOD_Reg<tUInt8> INST_u_tx_parity_bit;
  MOD_Wire<tUInt8> INST_u_tx_r_cts;
  MOD_Reg<tUInt8> INST_u_tx_state;
  MOD_Reg<tUInt32> INST_u_tx_ticker_counter;
  MOD_Wire<tUInt8> INST_u_tx_ticker_do_center;
  MOD_Fifo<tUInt8> INST_u_tx_tx_f;
 
 /* Constructor */
 public:
  MOD_mkUARTSpec(tSimStateHdl simHdl, char const *name, Module *parent, tUInt32 ARG_cfg);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt32 PORT_cfg;
  tUInt8 PORT_RDY_pins_rxd;
  tUInt8 PORT_RDY_pins_cts;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_u_rx_rx_f_rx_f_i_notEmpty____d111;
  tUInt32 DEF_b__h2687;
  tUInt32 DEF_b__h877;
  tUInt8 DEF_u_tx_state__h2765;
  tUInt8 DEF_u_rx_curr_rx_valid__h926;
  tUInt8 DEF_u_rx_rx_f_clear_w_whas____d1;
  tUInt8 DEF_u_rx_rx_f_enq_w_whas____d2;
  tUInt8 DEF_u_rx_r_rxd_wget____d30;
  tUInt8 DEF_u_tx_ticker_counter_2_EQ_0___d73;
  tUInt8 DEF_u_rx_ticker_counter_6_EQ_0___d17;
  tUInt8 DEF_u_tx_state_7_EQ_1___d91;
  tUInt8 DEF_u_tx_state_7_EQ_3___d78;
  tUInt8 DEF_u_tx_state_7_EQ_0___d87;
  tUInt8 DEF_NOT_u_rx_r_rxd_wget__0___d32;
 
 /* Local definitions */
 private:
  tUInt8 DEF_cfg_BITS_18_TO_17___d38;
  tUInt32 DEF_v__h2076;
  tUInt32 DEF_v__h1901;
  tUInt32 DEF_v__h1697;
  tUInt32 DEF_v__h1215;
  tUInt8 DEF_u_tx_curr_tx___d94;
  tUInt8 DEF_d__h941;
  tUInt8 DEF_u_rx_rx_f_rx_f_first____d110;
  tUInt8 DEF_b__h418;
  tUInt8 DEF_u_tx_parity_bit__h3200;
  tUInt8 DEF_x__h1867;
  tUInt32 DEF_cfg_BITS_16_TO_1___d13;
  tUInt8 DEF_u_tx_curr_tx_BIT_0___h3183;
  tUInt32 DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15;
  tUInt8 DEF_cfg_BITS_18_TO_17_8_EQ_0___d54;
  tUInt8 DEF_x__h1292;
  tUInt8 DEF_NOT_cfg_BIT_0_1___d62;
 
 /* Rules */
 public:
  void RL_u_rx_rx_f_upd_count();
  void RL_u_rx_ticker_update_counter();
  void RL_u_rx_write_data();
  void RL_u_rx_rxd_old();
  void RL_u_rx_wait_for_start();
  void RL_u_rx_start();
  void RL_u_rx_data();
  void RL_u_rx_parity();
  void RL_u_rx_stop();
  void RL_u_tx_ticker_update_counter();
  void RL_u_tx_stop();
  void RL_u_tx_start();
  void RL_u_tx_data();
  void RL_u_tx_parity();
 
 /* Methods */
 public:
  tUInt8 METH_pins_txd();
  tUInt8 METH_RDY_pins_txd();
  void METH_pins_rxd(tUInt8 ARG_pins_rxd);
  tUInt8 METH_RDY_pins_rxd();
  tUInt8 METH_pins_rts();
  tUInt8 METH_RDY_pins_rts();
  void METH_pins_cts(tUInt8 ARG_pins_cts);
  tUInt8 METH_RDY_pins_cts();
  tUInt8 METH_rx_first();
  tUInt8 METH_RDY_rx_first();
  tUInt8 METH_rx();
  tUInt8 METH_RDY_rx();
  void METH_tx(tUInt8 ARG_tx_i);
  tUInt8 METH_RDY_tx();
  void METH_clear();
  tUInt8 METH_RDY_clear();
  tUInt8 METH_errors();
  tUInt8 METH_RDY_errors();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkUARTSpec &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkUARTSpec &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkUARTSpec &backing);
};

#endif /* ifndef __mkUARTSpec_h__ */
