/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Oct 10 17:03:19 EDT 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkUARTSpec.h"


/* String declarations */
static std::string const __str_literal_2("Illegal start bit detected. Check baudrates.", 44u);
static std::string const __str_literal_5("Illegal stop bit detected.", 26u);
static std::string const __str_literal_4("Parity error. Dropping data.", 28u);
static std::string const __str_literal_3("Valid data begin overwritten.", 29u);
static std::string const __str_literal_1("Warning in %m at time %t: ", 26u);


/* Constructor */
MOD_mkUARTSpec::MOD_mkUARTSpec(tSimStateHdl simHdl,
			       char const *name,
			       Module *parent,
			       tUInt32 ARG_cfg)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_u_rx_bit_count(simHdl, "u_rx_bit_count", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_curr_rx(simHdl, "u_rx_curr_rx", this, 8u),
    INST_u_rx_curr_rx_valid(simHdl, "u_rx_curr_rx_valid", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_last_stop(simHdl, "u_rx_last_stop", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_parity_bit(simHdl, "u_rx_parity_bit", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_r_framing_error(simHdl, "u_rx_r_framing_error", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_r_overrun_error(simHdl, "u_rx_r_overrun_error", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_r_parity_error(simHdl, "u_rx_r_parity_error", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_r_rxd(simHdl, "u_rx_r_rxd", this, 1u, (tUInt8)0u),
    INST_u_rx_r_rxd_old(simHdl, "u_rx_r_rxd_old", this, 1u),
    INST_u_rx_rx_f_clear_w(simHdl, "u_rx_rx_f_clear_w", this, 0u),
    INST_u_rx_rx_f_deq_w(simHdl, "u_rx_rx_f_deq_w", this, 0u),
    INST_u_rx_rx_f_enq_w(simHdl, "u_rx_rx_f_enq_w", this, 0u),
    INST_u_rx_rx_f_r_count(simHdl, "u_rx_rx_f_r_count", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_rx_f_rx_f(simHdl, "u_rx_rx_f_rx_f", this, 8u, 8u, 1u, 0u),
    INST_u_rx_state(simHdl, "u_rx_state", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_u_rx_ticker_counter(simHdl, "u_rx_ticker_counter", this, 16u, 0u, (tUInt8)0u),
    INST_u_rx_ticker_do_center(simHdl, "u_rx_ticker_do_center", this, 0u),
    INST_u_tx_bit_count(simHdl, "u_tx_bit_count", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_u_tx_curr_tx(simHdl, "u_tx_curr_tx", this, 8u),
    INST_u_tx_last_stop(simHdl, "u_tx_last_stop", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_u_tx_parity_bit(simHdl, "u_tx_parity_bit", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_u_tx_r_cts(simHdl, "u_tx_r_cts", this, 1u, (tUInt8)0u),
    INST_u_tx_state(simHdl, "u_tx_state", this, 2u, (tUInt8)3u, (tUInt8)0u),
    INST_u_tx_ticker_counter(simHdl, "u_tx_ticker_counter", this, 16u, 0u, (tUInt8)0u),
    INST_u_tx_ticker_do_center(simHdl, "u_tx_ticker_do_center", this, 0u),
    INST_u_tx_tx_f(simHdl, "u_tx_tx_f", this, 8u, 2u, 1u, 0u),
    PORT_RST_N((tUInt8)1u),
    PORT_cfg(ARG_cfg),
    DEF_v__h2076(2863311530u),
    DEF_v__h1901(2863311530u),
    DEF_v__h1697(2863311530u),
    DEF_v__h1215(2863311530u)
{
  PORT_RDY_pins_rxd = false;
  PORT_RDY_pins_cts = false;
  symbol_count = 48u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkUARTSpec::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h2687", SYM_DEF, &DEF_b__h2687, 16u);
  init_symbol(&symbols[1u], "b__h877", SYM_DEF, &DEF_b__h877, 16u);
  init_symbol(&symbols[2u], "cfg", SYM_PORT, &PORT_cfg, 19u);
  init_symbol(&symbols[3u], "RDY_pins_cts", SYM_PORT, &PORT_RDY_pins_cts, 1u);
  init_symbol(&symbols[4u], "RDY_pins_rxd", SYM_PORT, &PORT_RDY_pins_rxd, 1u);
  init_symbol(&symbols[5u], "RL_u_rx_data", SYM_RULE);
  init_symbol(&symbols[6u], "RL_u_rx_parity", SYM_RULE);
  init_symbol(&symbols[7u], "RL_u_rx_rx_f_upd_count", SYM_RULE);
  init_symbol(&symbols[8u], "RL_u_rx_rxd_old", SYM_RULE);
  init_symbol(&symbols[9u], "RL_u_rx_start", SYM_RULE);
  init_symbol(&symbols[10u], "RL_u_rx_stop", SYM_RULE);
  init_symbol(&symbols[11u], "RL_u_rx_ticker_update_counter", SYM_RULE);
  init_symbol(&symbols[12u], "RL_u_rx_wait_for_start", SYM_RULE);
  init_symbol(&symbols[13u], "RL_u_rx_write_data", SYM_RULE);
  init_symbol(&symbols[14u], "RL_u_tx_data", SYM_RULE);
  init_symbol(&symbols[15u], "RL_u_tx_parity", SYM_RULE);
  init_symbol(&symbols[16u], "RL_u_tx_start", SYM_RULE);
  init_symbol(&symbols[17u], "RL_u_tx_stop", SYM_RULE);
  init_symbol(&symbols[18u], "RL_u_tx_ticker_update_counter", SYM_RULE);
  init_symbol(&symbols[19u], "u_rx_bit_count", SYM_MODULE, &INST_u_rx_bit_count);
  init_symbol(&symbols[20u], "u_rx_curr_rx", SYM_MODULE, &INST_u_rx_curr_rx);
  init_symbol(&symbols[21u], "u_rx_curr_rx_valid", SYM_MODULE, &INST_u_rx_curr_rx_valid);
  init_symbol(&symbols[22u], "u_rx_curr_rx_valid__h926", SYM_DEF, &DEF_u_rx_curr_rx_valid__h926, 1u);
  init_symbol(&symbols[23u], "u_rx_last_stop", SYM_MODULE, &INST_u_rx_last_stop);
  init_symbol(&symbols[24u], "u_rx_parity_bit", SYM_MODULE, &INST_u_rx_parity_bit);
  init_symbol(&symbols[25u], "u_rx_r_framing_error", SYM_MODULE, &INST_u_rx_r_framing_error);
  init_symbol(&symbols[26u], "u_rx_r_overrun_error", SYM_MODULE, &INST_u_rx_r_overrun_error);
  init_symbol(&symbols[27u], "u_rx_r_parity_error", SYM_MODULE, &INST_u_rx_r_parity_error);
  init_symbol(&symbols[28u], "u_rx_r_rxd", SYM_MODULE, &INST_u_rx_r_rxd);
  init_symbol(&symbols[29u], "u_rx_r_rxd_old", SYM_MODULE, &INST_u_rx_r_rxd_old);
  init_symbol(&symbols[30u], "u_rx_rx_f_clear_w", SYM_MODULE, &INST_u_rx_rx_f_clear_w);
  init_symbol(&symbols[31u], "u_rx_rx_f_deq_w", SYM_MODULE, &INST_u_rx_rx_f_deq_w);
  init_symbol(&symbols[32u], "u_rx_rx_f_enq_w", SYM_MODULE, &INST_u_rx_rx_f_enq_w);
  init_symbol(&symbols[33u], "u_rx_rx_f_r_count", SYM_MODULE, &INST_u_rx_rx_f_r_count);
  init_symbol(&symbols[34u], "u_rx_rx_f_rx_f", SYM_MODULE, &INST_u_rx_rx_f_rx_f);
  init_symbol(&symbols[35u], "u_rx_state", SYM_MODULE, &INST_u_rx_state);
  init_symbol(&symbols[36u], "u_rx_ticker_counter", SYM_MODULE, &INST_u_rx_ticker_counter);
  init_symbol(&symbols[37u], "u_rx_ticker_do_center", SYM_MODULE, &INST_u_rx_ticker_do_center);
  init_symbol(&symbols[38u], "u_tx_bit_count", SYM_MODULE, &INST_u_tx_bit_count);
  init_symbol(&symbols[39u], "u_tx_curr_tx", SYM_MODULE, &INST_u_tx_curr_tx);
  init_symbol(&symbols[40u], "u_tx_last_stop", SYM_MODULE, &INST_u_tx_last_stop);
  init_symbol(&symbols[41u], "u_tx_parity_bit", SYM_MODULE, &INST_u_tx_parity_bit);
  init_symbol(&symbols[42u], "u_tx_r_cts", SYM_MODULE, &INST_u_tx_r_cts);
  init_symbol(&symbols[43u], "u_tx_state", SYM_MODULE, &INST_u_tx_state);
  init_symbol(&symbols[44u], "u_tx_state__h2765", SYM_DEF, &DEF_u_tx_state__h2765, 2u);
  init_symbol(&symbols[45u], "u_tx_ticker_counter", SYM_MODULE, &INST_u_tx_ticker_counter);
  init_symbol(&symbols[46u], "u_tx_ticker_do_center", SYM_MODULE, &INST_u_tx_ticker_do_center);
  init_symbol(&symbols[47u], "u_tx_tx_f", SYM_MODULE, &INST_u_tx_tx_f);
}


/* Rule actions */

void MOD_mkUARTSpec::RL_u_rx_rx_f_upd_count()
{
  tUInt8 DEF_IF_u_rx_rx_f_clear_w_whas_THEN_0_ELSE_IF_u_rx__ETC___d11;
  DEF_b__h418 = INST_u_rx_rx_f_r_count.METH_read();
  DEF_u_rx_rx_f_clear_w_whas____d1 = INST_u_rx_rx_f_clear_w.METH_whas();
  DEF_u_rx_rx_f_enq_w_whas____d2 = INST_u_rx_rx_f_enq_w.METH_whas();
  DEF_IF_u_rx_rx_f_clear_w_whas_THEN_0_ELSE_IF_u_rx__ETC___d11 = DEF_u_rx_rx_f_clear_w_whas____d1 ? (tUInt8)0u : (DEF_u_rx_rx_f_enq_w_whas____d2 ? (tUInt8)15u & (DEF_b__h418 + (tUInt8)1u) : (tUInt8)15u & (DEF_b__h418 - (tUInt8)1u));
  INST_u_rx_rx_f_r_count.METH_write(DEF_IF_u_rx_rx_f_clear_w_whas_THEN_0_ELSE_IF_u_rx__ETC___d11);
}

void MOD_mkUARTSpec::RL_u_rx_ticker_update_counter()
{
  tUInt32 DEF_IF_u_rx_ticker_do_center_whas__2_THEN_cfg_BITS_ETC___d20;
  DEF_b__h877 = INST_u_rx_ticker_counter.METH_read();
  DEF_cfg_BITS_16_TO_1___d13 = (tUInt32)(65535u & (PORT_cfg >> 1u));
  DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15 = 65535u & (primShiftR32(16u,
									16u,
									(tUInt32)(DEF_cfg_BITS_16_TO_1___d13),
									32u,
									1u) - 1u);
  DEF_u_rx_ticker_counter_6_EQ_0___d17 = DEF_b__h877 == 0u;
  DEF_IF_u_rx_ticker_do_center_whas__2_THEN_cfg_BITS_ETC___d20 = INST_u_rx_ticker_do_center.METH_whas() ? DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15 : 65535u & ((DEF_u_rx_ticker_counter_6_EQ_0___d17 ? DEF_cfg_BITS_16_TO_1___d13 : DEF_b__h877) - 1u);
  INST_u_rx_ticker_counter.METH_write(DEF_IF_u_rx_ticker_do_center_whas__2_THEN_cfg_BITS_ETC___d20);
}

void MOD_mkUARTSpec::RL_u_rx_write_data()
{
  DEF_d__h941 = INST_u_rx_curr_rx.METH_read();
  INST_u_rx_rx_f_rx_f.METH_enq(DEF_d__h941);
  INST_u_rx_rx_f_enq_w.METH_wset();
  INST_u_rx_curr_rx_valid.METH_write((tUInt8)0u);
}

void MOD_mkUARTSpec::RL_u_rx_rxd_old()
{
  DEF_u_rx_r_rxd_wget____d30 = INST_u_rx_r_rxd.METH_wget();
  INST_u_rx_r_rxd_old.METH_write(DEF_u_rx_r_rxd_wget____d30);
}

void MOD_mkUARTSpec::RL_u_rx_wait_for_start()
{
  tUInt8 DEF_NOT_cfg_BITS_16_TO_1_3_EQ_1_6___d40;
  tUInt8 DEF_cfg_BITS_16_TO_1_3_EQ_1___d36;
  tUInt8 DEF_IF_cfg_BITS_16_TO_1_3_EQ_1_6_THEN_2_ELSE_1___d37;
  DEF_cfg_BITS_18_TO_17___d38 = (tUInt8)(PORT_cfg >> 17u);
  DEF_cfg_BITS_16_TO_1___d13 = (tUInt32)(65535u & (PORT_cfg >> 1u));
  DEF_cfg_BITS_16_TO_1_3_EQ_1___d36 = DEF_cfg_BITS_16_TO_1___d13 == 1u;
  DEF_IF_cfg_BITS_16_TO_1_3_EQ_1_6_THEN_2_ELSE_1___d37 = DEF_cfg_BITS_16_TO_1_3_EQ_1___d36 ? (tUInt8)2u : (tUInt8)1u;
  DEF_x__h1292 = DEF_cfg_BITS_18_TO_17___d38 == (tUInt8)1u;
  DEF_NOT_cfg_BITS_16_TO_1_3_EQ_1_6___d40 = !DEF_cfg_BITS_16_TO_1_3_EQ_1___d36;
  INST_u_rx_state.METH_write(DEF_IF_cfg_BITS_16_TO_1_3_EQ_1_6_THEN_2_ELSE_1___d37);
  if (DEF_cfg_BITS_16_TO_1_3_EQ_1___d36)
    INST_u_rx_parity_bit.METH_write(DEF_x__h1292);
  if (DEF_NOT_cfg_BITS_16_TO_1_3_EQ_1_6___d40)
    INST_u_rx_ticker_do_center.METH_wset();
}

void MOD_mkUARTSpec::RL_u_rx_start()
{
  tUInt8 DEF_IF_u_rx_r_rxd_wget__0_THEN_0_ELSE_2___d42;
  DEF_cfg_BITS_18_TO_17___d38 = (tUInt8)(PORT_cfg >> 17u);
  DEF_u_rx_r_rxd_wget____d30 = INST_u_rx_r_rxd.METH_wget();
  DEF_IF_u_rx_r_rxd_wget__0_THEN_0_ELSE_2___d42 = DEF_u_rx_r_rxd_wget____d30 ? (tUInt8)0u : (tUInt8)2u;
  DEF_x__h1292 = DEF_cfg_BITS_18_TO_17___d38 == (tUInt8)1u;
  DEF_NOT_u_rx_r_rxd_wget__0___d32 = !DEF_u_rx_r_rxd_wget____d30;
  INST_u_rx_state.METH_write(DEF_IF_u_rx_r_rxd_wget__0_THEN_0_ELSE_2___d42);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_u_rx_r_rxd_wget____d30)
      DEF_v__h1215 = dollar_stime(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_u_rx_r_rxd_wget____d30)
      dollar_fdisplay(sim_hdl,
		      this,
		      "32,s,32,s",
		      2147483650u,
		      &__str_literal_1,
		      DEF_v__h1215,
		      &__str_literal_2);
  if (DEF_u_rx_r_rxd_wget____d30)
    INST_u_rx_r_framing_error.METH_write((tUInt8)1u);
  if (DEF_NOT_u_rx_r_rxd_wget__0___d32)
    INST_u_rx_parity_bit.METH_write(DEF_x__h1292);
}

void MOD_mkUARTSpec::RL_u_rx_data()
{
  tUInt8 DEF_x__h1373;
  tUInt8 DEF_x__h1398;
  tUInt8 DEF_u_rx_bit_count_0_EQ_0_6_AND_u_rx_curr_rx_valid_6___d57;
  tUInt8 DEF_u_rx_bit_count_0_EQ_7___d51;
  tUInt8 DEF_IF_u_rx_bit_count_0_EQ_7_1_THEN_0_ELSE_u_rx_bi_ETC___d53;
  tUInt8 DEF_IF_cfg_BITS_18_TO_17_8_EQ_0_4_THEN_4_ELSE_3___d59;
  tUInt8 DEF__read_BITS_7_TO_1___h1386;
  tUInt8 DEF_b__h1425;
  tUInt8 DEF_u_rx_bit_count_0_EQ_7_1_AND_cfg_BITS_18_TO_17__ETC___d58;
  DEF_cfg_BITS_18_TO_17___d38 = (tUInt8)(PORT_cfg >> 17u);
  DEF_d__h941 = INST_u_rx_curr_rx.METH_read();
  DEF_b__h1425 = INST_u_rx_bit_count.METH_read();
  DEF_x__h1867 = INST_u_rx_parity_bit.METH_read();
  DEF_u_rx_curr_rx_valid__h926 = INST_u_rx_curr_rx_valid.METH_read();
  DEF_u_rx_r_rxd_wget____d30 = INST_u_rx_r_rxd.METH_wget();
  DEF__read_BITS_7_TO_1___h1386 = (tUInt8)(DEF_d__h941 >> 1u);
  DEF_cfg_BITS_18_TO_17_8_EQ_0___d54 = DEF_cfg_BITS_18_TO_17___d38 == (tUInt8)0u;
  DEF_IF_cfg_BITS_18_TO_17_8_EQ_0_4_THEN_4_ELSE_3___d59 = DEF_cfg_BITS_18_TO_17_8_EQ_0___d54 ? (tUInt8)4u : (tUInt8)3u;
  DEF_u_rx_bit_count_0_EQ_7___d51 = DEF_b__h1425 == (tUInt8)7u;
  DEF_IF_u_rx_bit_count_0_EQ_7_1_THEN_0_ELSE_u_rx_bi_ETC___d53 = DEF_u_rx_bit_count_0_EQ_7___d51 ? (tUInt8)0u : (tUInt8)7u & (DEF_b__h1425 + (tUInt8)1u);
  DEF_u_rx_bit_count_0_EQ_0_6_AND_u_rx_curr_rx_valid_6___d57 = DEF_b__h1425 == (tUInt8)0u && DEF_u_rx_curr_rx_valid__h926;
  DEF_u_rx_bit_count_0_EQ_7_1_AND_cfg_BITS_18_TO_17__ETC___d58 = (DEF_u_rx_bit_count_0_EQ_7___d51 && DEF_cfg_BITS_18_TO_17_8_EQ_0___d54) || DEF_u_rx_bit_count_0_EQ_0_6_AND_u_rx_curr_rx_valid_6___d57;
  DEF_x__h1398 = DEF_x__h1867 ^ DEF_u_rx_r_rxd_wget____d30;
  DEF_NOT_cfg_BIT_0_1___d62 = !((tUInt8)((tUInt8)1u & PORT_cfg));
  DEF_x__h1373 = (tUInt8)255u & ((DEF_u_rx_r_rxd_wget____d30 << 7u) | DEF__read_BITS_7_TO_1___h1386);
  INST_u_rx_curr_rx.METH_write(DEF_x__h1373);
  INST_u_rx_parity_bit.METH_write(DEF_x__h1398);
  INST_u_rx_bit_count.METH_write(DEF_IF_u_rx_bit_count_0_EQ_7_1_THEN_0_ELSE_u_rx_bi_ETC___d53);
  if (DEF_u_rx_bit_count_0_EQ_7_1_AND_cfg_BITS_18_TO_17__ETC___d58)
    INST_u_rx_curr_rx_valid.METH_write(DEF_u_rx_bit_count_0_EQ_7___d51);
  if (DEF_u_rx_bit_count_0_EQ_7___d51)
    INST_u_rx_state.METH_write(DEF_IF_cfg_BITS_18_TO_17_8_EQ_0_4_THEN_4_ELSE_3___d59);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_u_rx_bit_count_0_EQ_0_6_AND_u_rx_curr_rx_valid_6___d57)
      DEF_v__h1697 = dollar_stime(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_u_rx_bit_count_0_EQ_0_6_AND_u_rx_curr_rx_valid_6___d57)
      dollar_fdisplay(sim_hdl,
		      this,
		      "32,s,32,s",
		      2147483650u,
		      &__str_literal_1,
		      DEF_v__h1697,
		      &__str_literal_3);
  if (DEF_u_rx_bit_count_0_EQ_0_6_AND_u_rx_curr_rx_valid_6___d57)
    INST_u_rx_r_overrun_error.METH_write((tUInt8)1u);
  INST_u_rx_last_stop.METH_write(DEF_NOT_cfg_BIT_0_1___d62);
}

void MOD_mkUARTSpec::RL_u_rx_parity()
{
  tUInt8 DEF_NOT_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0_5___d66;
  tUInt8 DEF_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0___d65;
  DEF_x__h1867 = INST_u_rx_parity_bit.METH_read();
  DEF_u_rx_r_rxd_wget____d30 = INST_u_rx_r_rxd.METH_wget();
  DEF_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0___d65 = DEF_x__h1867 == DEF_u_rx_r_rxd_wget____d30;
  DEF_NOT_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0_5___d66 = !DEF_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0___d65;
  if (DEF_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0___d65)
    INST_u_rx_curr_rx_valid.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0_5___d66)
      DEF_v__h1901 = dollar_stime(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0_5___d66)
      dollar_fdisplay(sim_hdl,
		      this,
		      "32,s,32,s",
		      2147483650u,
		      &__str_literal_1,
		      DEF_v__h1901,
		      &__str_literal_4);
  if (DEF_NOT_u_rx_parity_bit_8_EQ_u_rx_r_rxd_wget__0_5___d66)
    INST_u_rx_r_parity_error.METH_write((tUInt8)1u);
  INST_u_rx_state.METH_write((tUInt8)4u);
}

void MOD_mkUARTSpec::RL_u_rx_stop()
{
  tUInt8 DEF_u_rx_last_stop__h2170;
  DEF_u_rx_last_stop__h2170 = INST_u_rx_last_stop.METH_read();
  DEF_u_rx_r_rxd_wget____d30 = INST_u_rx_r_rxd.METH_wget();
  DEF_NOT_u_rx_r_rxd_wget__0___d32 = !DEF_u_rx_r_rxd_wget____d30;
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_u_rx_r_rxd_wget__0___d32)
      DEF_v__h2076 = dollar_stime(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_u_rx_r_rxd_wget__0___d32)
      dollar_fdisplay(sim_hdl,
		      this,
		      "32,s,32,s",
		      2147483650u,
		      &__str_literal_1,
		      DEF_v__h2076,
		      &__str_literal_5);
  if (DEF_NOT_u_rx_r_rxd_wget__0___d32)
    INST_u_rx_r_framing_error.METH_write((tUInt8)1u);
  if (DEF_u_rx_last_stop__h2170)
    INST_u_rx_state.METH_write((tUInt8)0u);
  INST_u_rx_last_stop.METH_write((tUInt8)1u);
}

void MOD_mkUARTSpec::RL_u_tx_ticker_update_counter()
{
  tUInt32 DEF_IF_u_tx_ticker_do_center_whas__1_THEN_cfg_BITS_ETC___d76;
  DEF_b__h2687 = INST_u_tx_ticker_counter.METH_read();
  DEF_cfg_BITS_16_TO_1___d13 = (tUInt32)(65535u & (PORT_cfg >> 1u));
  DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15 = 65535u & (primShiftR32(16u,
									16u,
									(tUInt32)(DEF_cfg_BITS_16_TO_1___d13),
									32u,
									1u) - 1u);
  DEF_u_tx_ticker_counter_2_EQ_0___d73 = DEF_b__h2687 == 0u;
  DEF_IF_u_tx_ticker_do_center_whas__1_THEN_cfg_BITS_ETC___d76 = INST_u_tx_ticker_do_center.METH_whas() ? DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15 : 65535u & ((DEF_u_tx_ticker_counter_2_EQ_0___d73 ? DEF_cfg_BITS_16_TO_1___d13 : DEF_b__h2687) - 1u);
  INST_u_tx_ticker_counter.METH_write(DEF_IF_u_tx_ticker_do_center_whas__1_THEN_cfg_BITS_ETC___d76);
}

void MOD_mkUARTSpec::RL_u_tx_stop()
{
  tUInt8 DEF_u_tx_last_stop_0_AND_NOT_u_tx_r_cts_wget__1_2__ETC___d85;
  tUInt8 DEF_u_tx_last_stop__h2781;
  DEF_u_tx_last_stop__h2781 = INST_u_tx_last_stop.METH_read();
  DEF_u_tx_last_stop_0_AND_NOT_u_tx_r_cts_wget__1_2__ETC___d85 = (DEF_u_tx_last_stop__h2781 && !INST_u_tx_r_cts.METH_wget()) && INST_u_tx_tx_f.METH_notEmpty();
  if (DEF_u_tx_last_stop_0_AND_NOT_u_tx_r_cts_wget__1_2__ETC___d85)
    INST_u_tx_state.METH_write((tUInt8)0u);
  INST_u_tx_last_stop.METH_write((tUInt8)1u);
}

void MOD_mkUARTSpec::RL_u_tx_start()
{
  tUInt8 DEF_x__h2878;
  DEF_cfg_BITS_18_TO_17___d38 = (tUInt8)(PORT_cfg >> 17u);
  DEF_x__h2878 = INST_u_tx_tx_f.METH_first();
  DEF_x__h1292 = DEF_cfg_BITS_18_TO_17___d38 == (tUInt8)1u;
  INST_u_tx_state.METH_write((tUInt8)1u);
  INST_u_tx_curr_tx.METH_write(DEF_x__h2878);
  INST_u_tx_tx_f.METH_deq();
  INST_u_tx_parity_bit.METH_write(DEF_x__h1292);
}

void MOD_mkUARTSpec::RL_u_tx_data()
{
  tUInt8 DEF_x__h3002;
  tUInt8 DEF_x__h2952;
  tUInt8 DEF_IF_cfg_BITS_18_TO_17_8_EQ_0_4_THEN_3_ELSE_2___d103;
  tUInt8 DEF_u_tx_bit_count_9_EQ_7___d100;
  tUInt8 DEF_IF_u_tx_bit_count_9_EQ_7_00_THEN_0_ELSE_u_tx_b_ETC___d102;
  tUInt8 DEF_u_tx_curr_tx_BITS_7_TO_1___h3015;
  tUInt8 DEF_b__h3045;
  DEF_cfg_BITS_18_TO_17___d38 = (tUInt8)(PORT_cfg >> 17u);
  DEF_u_tx_curr_tx___d94 = INST_u_tx_curr_tx.METH_read();
  DEF_b__h3045 = INST_u_tx_bit_count.METH_read();
  DEF_u_tx_parity_bit__h3200 = INST_u_tx_parity_bit.METH_read();
  DEF_u_tx_curr_tx_BITS_7_TO_1___h3015 = (tUInt8)(DEF_u_tx_curr_tx___d94 >> 1u);
  DEF_u_tx_curr_tx_BIT_0___h3183 = (tUInt8)((tUInt8)1u & DEF_u_tx_curr_tx___d94);
  DEF_u_tx_bit_count_9_EQ_7___d100 = DEF_b__h3045 == (tUInt8)7u;
  DEF_IF_u_tx_bit_count_9_EQ_7_00_THEN_0_ELSE_u_tx_b_ETC___d102 = DEF_u_tx_bit_count_9_EQ_7___d100 ? (tUInt8)0u : (tUInt8)7u & (DEF_b__h3045 + (tUInt8)1u);
  DEF_cfg_BITS_18_TO_17_8_EQ_0___d54 = DEF_cfg_BITS_18_TO_17___d38 == (tUInt8)0u;
  DEF_IF_cfg_BITS_18_TO_17_8_EQ_0_4_THEN_3_ELSE_2___d103 = DEF_cfg_BITS_18_TO_17_8_EQ_0___d54 ? (tUInt8)3u : (tUInt8)2u;
  DEF_NOT_cfg_BIT_0_1___d62 = !((tUInt8)((tUInt8)1u & PORT_cfg));
  DEF_x__h2952 = DEF_u_tx_parity_bit__h3200 ^ DEF_u_tx_curr_tx_BIT_0___h3183;
  DEF_x__h3002 = (tUInt8)255u & DEF_u_tx_curr_tx_BITS_7_TO_1___h3015;
  INST_u_tx_parity_bit.METH_write(DEF_x__h2952);
  INST_u_tx_curr_tx.METH_write(DEF_x__h3002);
  INST_u_tx_last_stop.METH_write(DEF_NOT_cfg_BIT_0_1___d62);
  INST_u_tx_bit_count.METH_write(DEF_IF_u_tx_bit_count_9_EQ_7_00_THEN_0_ELSE_u_tx_b_ETC___d102);
  if (DEF_u_tx_bit_count_9_EQ_7___d100)
    INST_u_tx_state.METH_write(DEF_IF_cfg_BITS_18_TO_17_8_EQ_0_4_THEN_3_ELSE_2___d103);
}

void MOD_mkUARTSpec::RL_u_tx_parity()
{
  INST_u_tx_state.METH_write((tUInt8)3u);
}


/* Methods */

tUInt8 MOD_mkUARTSpec::METH_pins_txd()
{
  tUInt8 DEF_NOT_u_tx_state_7_EQ_0_7_06_AND_IF_u_tx_state_7_ETC___d108;
  tUInt8 PORT_pins_txd;
  DEF_u_tx_curr_tx___d94 = INST_u_tx_curr_tx.METH_read();
  DEF_u_tx_state__h2765 = INST_u_tx_state.METH_read();
  DEF_u_tx_parity_bit__h3200 = INST_u_tx_parity_bit.METH_read();
  DEF_u_tx_curr_tx_BIT_0___h3183 = (tUInt8)((tUInt8)1u & DEF_u_tx_curr_tx___d94);
  DEF_u_tx_state_7_EQ_1___d91 = DEF_u_tx_state__h2765 == (tUInt8)1u;
  DEF_u_tx_state_7_EQ_3___d78 = DEF_u_tx_state__h2765 == (tUInt8)3u;
  DEF_u_tx_state_7_EQ_0___d87 = DEF_u_tx_state__h2765 == (tUInt8)0u;
  DEF_NOT_u_tx_state_7_EQ_0_7_06_AND_IF_u_tx_state_7_ETC___d108 = !DEF_u_tx_state_7_EQ_0___d87 && (DEF_u_tx_state_7_EQ_1___d91 ? DEF_u_tx_curr_tx_BIT_0___h3183 : DEF_u_tx_parity_bit__h3200);
  PORT_pins_txd = DEF_u_tx_state_7_EQ_3___d78 || DEF_NOT_u_tx_state_7_EQ_0_7_06_AND_IF_u_tx_state_7_ETC___d108;
  return PORT_pins_txd;
}

tUInt8 MOD_mkUARTSpec::METH_RDY_pins_txd()
{
  tUInt8 PORT_RDY_pins_txd;
  tUInt8 DEF_CAN_FIRE_pins_txd;
  DEF_CAN_FIRE_pins_txd = (tUInt8)1u;
  PORT_RDY_pins_txd = DEF_CAN_FIRE_pins_txd;
  return PORT_RDY_pins_txd;
}

void MOD_mkUARTSpec::METH_pins_rxd(tUInt8 ARG_pins_rxd)
{
  if (PORT_RDY_pins_rxd)
    INST_u_rx_r_rxd.METH_wset(ARG_pins_rxd);
}

tUInt8 MOD_mkUARTSpec::METH_RDY_pins_rxd()
{
  tUInt8 DEF_CAN_FIRE_pins_rxd;
  DEF_CAN_FIRE_pins_rxd = (tUInt8)1u;
  PORT_RDY_pins_rxd = DEF_CAN_FIRE_pins_rxd;
  return PORT_RDY_pins_rxd;
}

tUInt8 MOD_mkUARTSpec::METH_pins_rts()
{
  tUInt8 DEF_u_rx_rx_f_r_count_ULT_4___d109;
  tUInt8 PORT_pins_rts;
  DEF_b__h418 = INST_u_rx_rx_f_r_count.METH_read();
  DEF_u_rx_rx_f_r_count_ULT_4___d109 = DEF_b__h418 < (tUInt8)4u;
  PORT_pins_rts = !DEF_u_rx_rx_f_r_count_ULT_4___d109;
  return PORT_pins_rts;
}

tUInt8 MOD_mkUARTSpec::METH_RDY_pins_rts()
{
  tUInt8 PORT_RDY_pins_rts;
  tUInt8 DEF_CAN_FIRE_pins_rts;
  DEF_CAN_FIRE_pins_rts = (tUInt8)1u;
  PORT_RDY_pins_rts = DEF_CAN_FIRE_pins_rts;
  return PORT_RDY_pins_rts;
}

void MOD_mkUARTSpec::METH_pins_cts(tUInt8 ARG_pins_cts)
{
  if (PORT_RDY_pins_cts)
    INST_u_tx_r_cts.METH_wset(ARG_pins_cts);
}

tUInt8 MOD_mkUARTSpec::METH_RDY_pins_cts()
{
  tUInt8 DEF_CAN_FIRE_pins_cts;
  DEF_CAN_FIRE_pins_cts = (tUInt8)1u;
  PORT_RDY_pins_cts = DEF_CAN_FIRE_pins_cts;
  return PORT_RDY_pins_cts;
}

tUInt8 MOD_mkUARTSpec::METH_rx_first()
{
  tUInt8 PORT_rx_first;
  DEF_u_rx_rx_f_rx_f_first____d110 = INST_u_rx_rx_f_rx_f.METH_first();
  PORT_rx_first = DEF_u_rx_rx_f_rx_f_first____d110;
  return PORT_rx_first;
}

tUInt8 MOD_mkUARTSpec::METH_RDY_rx_first()
{
  tUInt8 DEF_CAN_FIRE_rx_first;
  tUInt8 PORT_RDY_rx_first;
  DEF_u_rx_rx_f_rx_f_i_notEmpty____d111 = INST_u_rx_rx_f_rx_f.METH_i_notEmpty();
  DEF_CAN_FIRE_rx_first = DEF_u_rx_rx_f_rx_f_i_notEmpty____d111;
  PORT_RDY_rx_first = DEF_CAN_FIRE_rx_first;
  return PORT_RDY_rx_first;
}

tUInt8 MOD_mkUARTSpec::METH_rx()
{
  tUInt8 PORT_rx;
  DEF_u_rx_rx_f_rx_f_first____d110 = INST_u_rx_rx_f_rx_f.METH_first();
  PORT_rx = DEF_u_rx_rx_f_rx_f_first____d110;
  INST_u_rx_rx_f_rx_f.METH_deq();
  INST_u_rx_rx_f_deq_w.METH_wset();
  return PORT_rx;
}

tUInt8 MOD_mkUARTSpec::METH_RDY_rx()
{
  tUInt8 DEF_CAN_FIRE_rx;
  tUInt8 PORT_RDY_rx;
  DEF_u_rx_rx_f_rx_f_i_notEmpty____d111 = INST_u_rx_rx_f_rx_f.METH_i_notEmpty();
  DEF_CAN_FIRE_rx = DEF_u_rx_rx_f_rx_f_i_notEmpty____d111;
  PORT_RDY_rx = DEF_CAN_FIRE_rx;
  return PORT_RDY_rx;
}

void MOD_mkUARTSpec::METH_tx(tUInt8 ARG_tx_i)
{
  INST_u_tx_tx_f.METH_enq(ARG_tx_i);
}

tUInt8 MOD_mkUARTSpec::METH_RDY_tx()
{
  tUInt8 DEF_CAN_FIRE_tx;
  tUInt8 PORT_RDY_tx;
  DEF_CAN_FIRE_tx = INST_u_tx_tx_f.METH_i_notFull();
  PORT_RDY_tx = DEF_CAN_FIRE_tx;
  return PORT_RDY_tx;
}

void MOD_mkUARTSpec::METH_clear()
{
  INST_u_rx_rx_f_rx_f.METH_clear();
  INST_u_rx_rx_f_clear_w.METH_wset();
  INST_u_tx_tx_f.METH_clear();
}

tUInt8 MOD_mkUARTSpec::METH_RDY_clear()
{
  tUInt8 DEF_CAN_FIRE_clear;
  tUInt8 PORT_RDY_clear;
  DEF_CAN_FIRE_clear = (tUInt8)1u;
  PORT_RDY_clear = DEF_CAN_FIRE_clear;
  return PORT_RDY_clear;
}

tUInt8 MOD_mkUARTSpec::METH_errors()
{
  tUInt8 DEF_u_rx_r_parity_error__h3394;
  tUInt8 DEF_u_rx_r_overrun_error__h3396;
  tUInt8 DEF_u_rx_r_framing_error__h3398;
  tUInt8 PORT_errors;
  DEF_u_rx_r_framing_error__h3398 = INST_u_rx_r_framing_error.METH_read();
  DEF_u_rx_r_overrun_error__h3396 = INST_u_rx_r_overrun_error.METH_read();
  DEF_u_rx_r_parity_error__h3394 = INST_u_rx_r_parity_error.METH_read();
  PORT_errors = (tUInt8)7u & (((DEF_u_rx_r_parity_error__h3394 << 2u) | (DEF_u_rx_r_overrun_error__h3396 << 1u)) | DEF_u_rx_r_framing_error__h3398);
  return PORT_errors;
}

tUInt8 MOD_mkUARTSpec::METH_RDY_errors()
{
  tUInt8 PORT_RDY_errors;
  tUInt8 DEF_CAN_FIRE_errors;
  DEF_CAN_FIRE_errors = (tUInt8)1u;
  PORT_RDY_errors = DEF_CAN_FIRE_errors;
  return PORT_RDY_errors;
}


/* Reset routines */

void MOD_mkUARTSpec::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_u_tx_tx_f.reset_RST(ARG_rst_in);
  INST_u_tx_ticker_counter.reset_RST(ARG_rst_in);
  INST_u_tx_state.reset_RST(ARG_rst_in);
  INST_u_tx_parity_bit.reset_RST(ARG_rst_in);
  INST_u_tx_last_stop.reset_RST(ARG_rst_in);
  INST_u_tx_bit_count.reset_RST(ARG_rst_in);
  INST_u_rx_ticker_counter.reset_RST(ARG_rst_in);
  INST_u_rx_state.reset_RST(ARG_rst_in);
  INST_u_rx_rx_f_rx_f.reset_RST(ARG_rst_in);
  INST_u_rx_rx_f_r_count.reset_RST(ARG_rst_in);
  INST_u_rx_r_parity_error.reset_RST(ARG_rst_in);
  INST_u_rx_r_overrun_error.reset_RST(ARG_rst_in);
  INST_u_rx_r_framing_error.reset_RST(ARG_rst_in);
  INST_u_rx_parity_bit.reset_RST(ARG_rst_in);
  INST_u_rx_last_stop.reset_RST(ARG_rst_in);
  INST_u_rx_curr_rx_valid.reset_RST(ARG_rst_in);
  INST_u_rx_bit_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkUARTSpec::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkUARTSpec::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_u_rx_bit_count.dump_state(indent + 2u);
  INST_u_rx_curr_rx.dump_state(indent + 2u);
  INST_u_rx_curr_rx_valid.dump_state(indent + 2u);
  INST_u_rx_last_stop.dump_state(indent + 2u);
  INST_u_rx_parity_bit.dump_state(indent + 2u);
  INST_u_rx_r_framing_error.dump_state(indent + 2u);
  INST_u_rx_r_overrun_error.dump_state(indent + 2u);
  INST_u_rx_r_parity_error.dump_state(indent + 2u);
  INST_u_rx_r_rxd.dump_state(indent + 2u);
  INST_u_rx_r_rxd_old.dump_state(indent + 2u);
  INST_u_rx_rx_f_clear_w.dump_state(indent + 2u);
  INST_u_rx_rx_f_deq_w.dump_state(indent + 2u);
  INST_u_rx_rx_f_enq_w.dump_state(indent + 2u);
  INST_u_rx_rx_f_r_count.dump_state(indent + 2u);
  INST_u_rx_rx_f_rx_f.dump_state(indent + 2u);
  INST_u_rx_state.dump_state(indent + 2u);
  INST_u_rx_ticker_counter.dump_state(indent + 2u);
  INST_u_rx_ticker_do_center.dump_state(indent + 2u);
  INST_u_tx_bit_count.dump_state(indent + 2u);
  INST_u_tx_curr_tx.dump_state(indent + 2u);
  INST_u_tx_last_stop.dump_state(indent + 2u);
  INST_u_tx_parity_bit.dump_state(indent + 2u);
  INST_u_tx_r_cts.dump_state(indent + 2u);
  INST_u_tx_state.dump_state(indent + 2u);
  INST_u_tx_ticker_counter.dump_state(indent + 2u);
  INST_u_tx_ticker_do_center.dump_state(indent + 2u);
  INST_u_tx_tx_f.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkUARTSpec::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 61u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_cfg_BIT_0_1___d62", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_u_rx_r_rxd_wget__0___d32", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2687", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h418", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h877", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cfg_BITS_16_TO_1___d13", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cfg_BITS_18_TO_17_8_EQ_0___d54", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cfg_BITS_18_TO_17___d38", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "d__h941", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_rx_curr_rx_valid__h926", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_rx_r_rxd_wget____d30", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_rx_rx_f_clear_w_whas____d1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_rx_rx_f_enq_w_whas____d2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_rx_rx_f_rx_f_first____d110", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_rx_rx_f_rx_f_i_notEmpty____d111", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_rx_ticker_counter_6_EQ_0___d17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_tx_curr_tx_BIT_0___h3183", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_tx_curr_tx___d94", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_tx_parity_bit__h3200", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_tx_state_7_EQ_0___d87", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_tx_state_7_EQ_1___d91", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_tx_state_7_EQ_3___d78", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_tx_state__h2765", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "u_tx_ticker_counter_2_EQ_0___d73", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1215", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1697", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1901", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h2076", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1292", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1867", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_pins_cts", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_pins_rxd", 1u);
  num = INST_u_rx_bit_count.dump_VCD_defs(num);
  num = INST_u_rx_curr_rx.dump_VCD_defs(num);
  num = INST_u_rx_curr_rx_valid.dump_VCD_defs(num);
  num = INST_u_rx_last_stop.dump_VCD_defs(num);
  num = INST_u_rx_parity_bit.dump_VCD_defs(num);
  num = INST_u_rx_r_framing_error.dump_VCD_defs(num);
  num = INST_u_rx_r_overrun_error.dump_VCD_defs(num);
  num = INST_u_rx_r_parity_error.dump_VCD_defs(num);
  num = INST_u_rx_r_rxd.dump_VCD_defs(num);
  num = INST_u_rx_r_rxd_old.dump_VCD_defs(num);
  num = INST_u_rx_rx_f_clear_w.dump_VCD_defs(num);
  num = INST_u_rx_rx_f_deq_w.dump_VCD_defs(num);
  num = INST_u_rx_rx_f_enq_w.dump_VCD_defs(num);
  num = INST_u_rx_rx_f_r_count.dump_VCD_defs(num);
  num = INST_u_rx_rx_f_rx_f.dump_VCD_defs(num);
  num = INST_u_rx_state.dump_VCD_defs(num);
  num = INST_u_rx_ticker_counter.dump_VCD_defs(num);
  num = INST_u_rx_ticker_do_center.dump_VCD_defs(num);
  num = INST_u_tx_bit_count.dump_VCD_defs(num);
  num = INST_u_tx_curr_tx.dump_VCD_defs(num);
  num = INST_u_tx_last_stop.dump_VCD_defs(num);
  num = INST_u_tx_parity_bit.dump_VCD_defs(num);
  num = INST_u_tx_r_cts.dump_VCD_defs(num);
  num = INST_u_tx_state.dump_VCD_defs(num);
  num = INST_u_tx_ticker_counter.dump_VCD_defs(num);
  num = INST_u_tx_ticker_do_center.dump_VCD_defs(num);
  num = INST_u_tx_tx_f.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkUARTSpec::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkUARTSpec &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkUARTSpec::vcd_defs(tVCDDumpType dt, MOD_mkUARTSpec &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_cfg_BIT_0_1___d62) != DEF_NOT_cfg_BIT_0_1___d62)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_cfg_BIT_0_1___d62, 1u);
	backing.DEF_NOT_cfg_BIT_0_1___d62 = DEF_NOT_cfg_BIT_0_1___d62;
      }
      ++num;
      if ((backing.DEF_NOT_u_rx_r_rxd_wget__0___d32) != DEF_NOT_u_rx_r_rxd_wget__0___d32)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_u_rx_r_rxd_wget__0___d32, 1u);
	backing.DEF_NOT_u_rx_r_rxd_wget__0___d32 = DEF_NOT_u_rx_r_rxd_wget__0___d32;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h2687) != DEF_b__h2687)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2687, 16u);
	backing.DEF_b__h2687 = DEF_b__h2687;
      }
      ++num;
      if ((backing.DEF_b__h418) != DEF_b__h418)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h418, 4u);
	backing.DEF_b__h418 = DEF_b__h418;
      }
      ++num;
      if ((backing.DEF_b__h877) != DEF_b__h877)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h877, 16u);
	backing.DEF_b__h877 = DEF_b__h877;
      }
      ++num;
      if ((backing.DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15) != DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15)
      {
	vcd_write_val(sim_hdl, num, DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15, 16u);
	backing.DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15 = DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15;
      }
      ++num;
      if ((backing.DEF_cfg_BITS_16_TO_1___d13) != DEF_cfg_BITS_16_TO_1___d13)
      {
	vcd_write_val(sim_hdl, num, DEF_cfg_BITS_16_TO_1___d13, 16u);
	backing.DEF_cfg_BITS_16_TO_1___d13 = DEF_cfg_BITS_16_TO_1___d13;
      }
      ++num;
      if ((backing.DEF_cfg_BITS_18_TO_17_8_EQ_0___d54) != DEF_cfg_BITS_18_TO_17_8_EQ_0___d54)
      {
	vcd_write_val(sim_hdl, num, DEF_cfg_BITS_18_TO_17_8_EQ_0___d54, 1u);
	backing.DEF_cfg_BITS_18_TO_17_8_EQ_0___d54 = DEF_cfg_BITS_18_TO_17_8_EQ_0___d54;
      }
      ++num;
      if ((backing.DEF_cfg_BITS_18_TO_17___d38) != DEF_cfg_BITS_18_TO_17___d38)
      {
	vcd_write_val(sim_hdl, num, DEF_cfg_BITS_18_TO_17___d38, 2u);
	backing.DEF_cfg_BITS_18_TO_17___d38 = DEF_cfg_BITS_18_TO_17___d38;
      }
      ++num;
      if ((backing.DEF_d__h941) != DEF_d__h941)
      {
	vcd_write_val(sim_hdl, num, DEF_d__h941, 8u);
	backing.DEF_d__h941 = DEF_d__h941;
      }
      ++num;
      if ((backing.DEF_u_rx_curr_rx_valid__h926) != DEF_u_rx_curr_rx_valid__h926)
      {
	vcd_write_val(sim_hdl, num, DEF_u_rx_curr_rx_valid__h926, 1u);
	backing.DEF_u_rx_curr_rx_valid__h926 = DEF_u_rx_curr_rx_valid__h926;
      }
      ++num;
      if ((backing.DEF_u_rx_r_rxd_wget____d30) != DEF_u_rx_r_rxd_wget____d30)
      {
	vcd_write_val(sim_hdl, num, DEF_u_rx_r_rxd_wget____d30, 1u);
	backing.DEF_u_rx_r_rxd_wget____d30 = DEF_u_rx_r_rxd_wget____d30;
      }
      ++num;
      if ((backing.DEF_u_rx_rx_f_clear_w_whas____d1) != DEF_u_rx_rx_f_clear_w_whas____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_u_rx_rx_f_clear_w_whas____d1, 1u);
	backing.DEF_u_rx_rx_f_clear_w_whas____d1 = DEF_u_rx_rx_f_clear_w_whas____d1;
      }
      ++num;
      if ((backing.DEF_u_rx_rx_f_enq_w_whas____d2) != DEF_u_rx_rx_f_enq_w_whas____d2)
      {
	vcd_write_val(sim_hdl, num, DEF_u_rx_rx_f_enq_w_whas____d2, 1u);
	backing.DEF_u_rx_rx_f_enq_w_whas____d2 = DEF_u_rx_rx_f_enq_w_whas____d2;
      }
      ++num;
      if ((backing.DEF_u_rx_rx_f_rx_f_first____d110) != DEF_u_rx_rx_f_rx_f_first____d110)
      {
	vcd_write_val(sim_hdl, num, DEF_u_rx_rx_f_rx_f_first____d110, 8u);
	backing.DEF_u_rx_rx_f_rx_f_first____d110 = DEF_u_rx_rx_f_rx_f_first____d110;
      }
      ++num;
      if ((backing.DEF_u_rx_rx_f_rx_f_i_notEmpty____d111) != DEF_u_rx_rx_f_rx_f_i_notEmpty____d111)
      {
	vcd_write_val(sim_hdl, num, DEF_u_rx_rx_f_rx_f_i_notEmpty____d111, 1u);
	backing.DEF_u_rx_rx_f_rx_f_i_notEmpty____d111 = DEF_u_rx_rx_f_rx_f_i_notEmpty____d111;
      }
      ++num;
      if ((backing.DEF_u_rx_ticker_counter_6_EQ_0___d17) != DEF_u_rx_ticker_counter_6_EQ_0___d17)
      {
	vcd_write_val(sim_hdl, num, DEF_u_rx_ticker_counter_6_EQ_0___d17, 1u);
	backing.DEF_u_rx_ticker_counter_6_EQ_0___d17 = DEF_u_rx_ticker_counter_6_EQ_0___d17;
      }
      ++num;
      if ((backing.DEF_u_tx_curr_tx_BIT_0___h3183) != DEF_u_tx_curr_tx_BIT_0___h3183)
      {
	vcd_write_val(sim_hdl, num, DEF_u_tx_curr_tx_BIT_0___h3183, 1u);
	backing.DEF_u_tx_curr_tx_BIT_0___h3183 = DEF_u_tx_curr_tx_BIT_0___h3183;
      }
      ++num;
      if ((backing.DEF_u_tx_curr_tx___d94) != DEF_u_tx_curr_tx___d94)
      {
	vcd_write_val(sim_hdl, num, DEF_u_tx_curr_tx___d94, 8u);
	backing.DEF_u_tx_curr_tx___d94 = DEF_u_tx_curr_tx___d94;
      }
      ++num;
      if ((backing.DEF_u_tx_parity_bit__h3200) != DEF_u_tx_parity_bit__h3200)
      {
	vcd_write_val(sim_hdl, num, DEF_u_tx_parity_bit__h3200, 1u);
	backing.DEF_u_tx_parity_bit__h3200 = DEF_u_tx_parity_bit__h3200;
      }
      ++num;
      if ((backing.DEF_u_tx_state_7_EQ_0___d87) != DEF_u_tx_state_7_EQ_0___d87)
      {
	vcd_write_val(sim_hdl, num, DEF_u_tx_state_7_EQ_0___d87, 1u);
	backing.DEF_u_tx_state_7_EQ_0___d87 = DEF_u_tx_state_7_EQ_0___d87;
      }
      ++num;
      if ((backing.DEF_u_tx_state_7_EQ_1___d91) != DEF_u_tx_state_7_EQ_1___d91)
      {
	vcd_write_val(sim_hdl, num, DEF_u_tx_state_7_EQ_1___d91, 1u);
	backing.DEF_u_tx_state_7_EQ_1___d91 = DEF_u_tx_state_7_EQ_1___d91;
      }
      ++num;
      if ((backing.DEF_u_tx_state_7_EQ_3___d78) != DEF_u_tx_state_7_EQ_3___d78)
      {
	vcd_write_val(sim_hdl, num, DEF_u_tx_state_7_EQ_3___d78, 1u);
	backing.DEF_u_tx_state_7_EQ_3___d78 = DEF_u_tx_state_7_EQ_3___d78;
      }
      ++num;
      if ((backing.DEF_u_tx_state__h2765) != DEF_u_tx_state__h2765)
      {
	vcd_write_val(sim_hdl, num, DEF_u_tx_state__h2765, 2u);
	backing.DEF_u_tx_state__h2765 = DEF_u_tx_state__h2765;
      }
      ++num;
      if ((backing.DEF_u_tx_ticker_counter_2_EQ_0___d73) != DEF_u_tx_ticker_counter_2_EQ_0___d73)
      {
	vcd_write_val(sim_hdl, num, DEF_u_tx_ticker_counter_2_EQ_0___d73, 1u);
	backing.DEF_u_tx_ticker_counter_2_EQ_0___d73 = DEF_u_tx_ticker_counter_2_EQ_0___d73;
      }
      ++num;
      if ((backing.DEF_v__h1215) != DEF_v__h1215)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1215, 32u);
	backing.DEF_v__h1215 = DEF_v__h1215;
      }
      ++num;
      if ((backing.DEF_v__h1697) != DEF_v__h1697)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1697, 32u);
	backing.DEF_v__h1697 = DEF_v__h1697;
      }
      ++num;
      if ((backing.DEF_v__h1901) != DEF_v__h1901)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1901, 32u);
	backing.DEF_v__h1901 = DEF_v__h1901;
      }
      ++num;
      if ((backing.DEF_v__h2076) != DEF_v__h2076)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h2076, 32u);
	backing.DEF_v__h2076 = DEF_v__h2076;
      }
      ++num;
      if ((backing.DEF_x__h1292) != DEF_x__h1292)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1292, 1u);
	backing.DEF_x__h1292 = DEF_x__h1292;
      }
      ++num;
      if ((backing.DEF_x__h1867) != DEF_x__h1867)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1867, 1u);
	backing.DEF_x__h1867 = DEF_x__h1867;
      }
      ++num;
      if ((backing.PORT_RDY_pins_cts) != PORT_RDY_pins_cts)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_pins_cts, 1u);
	backing.PORT_RDY_pins_cts = PORT_RDY_pins_cts;
      }
      ++num;
      if ((backing.PORT_RDY_pins_rxd) != PORT_RDY_pins_rxd)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_pins_rxd, 1u);
	backing.PORT_RDY_pins_rxd = PORT_RDY_pins_rxd;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_cfg_BIT_0_1___d62, 1u);
      backing.DEF_NOT_cfg_BIT_0_1___d62 = DEF_NOT_cfg_BIT_0_1___d62;
      vcd_write_val(sim_hdl, num++, DEF_NOT_u_rx_r_rxd_wget__0___d32, 1u);
      backing.DEF_NOT_u_rx_r_rxd_wget__0___d32 = DEF_NOT_u_rx_r_rxd_wget__0___d32;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h2687, 16u);
      backing.DEF_b__h2687 = DEF_b__h2687;
      vcd_write_val(sim_hdl, num++, DEF_b__h418, 4u);
      backing.DEF_b__h418 = DEF_b__h418;
      vcd_write_val(sim_hdl, num++, DEF_b__h877, 16u);
      backing.DEF_b__h877 = DEF_b__h877;
      vcd_write_val(sim_hdl, num++, DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15, 16u);
      backing.DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15 = DEF_cfg_BITS_16_TO_1_3_SRL_1_4_MINUS_1___d15;
      vcd_write_val(sim_hdl, num++, DEF_cfg_BITS_16_TO_1___d13, 16u);
      backing.DEF_cfg_BITS_16_TO_1___d13 = DEF_cfg_BITS_16_TO_1___d13;
      vcd_write_val(sim_hdl, num++, DEF_cfg_BITS_18_TO_17_8_EQ_0___d54, 1u);
      backing.DEF_cfg_BITS_18_TO_17_8_EQ_0___d54 = DEF_cfg_BITS_18_TO_17_8_EQ_0___d54;
      vcd_write_val(sim_hdl, num++, DEF_cfg_BITS_18_TO_17___d38, 2u);
      backing.DEF_cfg_BITS_18_TO_17___d38 = DEF_cfg_BITS_18_TO_17___d38;
      vcd_write_val(sim_hdl, num++, DEF_d__h941, 8u);
      backing.DEF_d__h941 = DEF_d__h941;
      vcd_write_val(sim_hdl, num++, DEF_u_rx_curr_rx_valid__h926, 1u);
      backing.DEF_u_rx_curr_rx_valid__h926 = DEF_u_rx_curr_rx_valid__h926;
      vcd_write_val(sim_hdl, num++, DEF_u_rx_r_rxd_wget____d30, 1u);
      backing.DEF_u_rx_r_rxd_wget____d30 = DEF_u_rx_r_rxd_wget____d30;
      vcd_write_val(sim_hdl, num++, DEF_u_rx_rx_f_clear_w_whas____d1, 1u);
      backing.DEF_u_rx_rx_f_clear_w_whas____d1 = DEF_u_rx_rx_f_clear_w_whas____d1;
      vcd_write_val(sim_hdl, num++, DEF_u_rx_rx_f_enq_w_whas____d2, 1u);
      backing.DEF_u_rx_rx_f_enq_w_whas____d2 = DEF_u_rx_rx_f_enq_w_whas____d2;
      vcd_write_val(sim_hdl, num++, DEF_u_rx_rx_f_rx_f_first____d110, 8u);
      backing.DEF_u_rx_rx_f_rx_f_first____d110 = DEF_u_rx_rx_f_rx_f_first____d110;
      vcd_write_val(sim_hdl, num++, DEF_u_rx_rx_f_rx_f_i_notEmpty____d111, 1u);
      backing.DEF_u_rx_rx_f_rx_f_i_notEmpty____d111 = DEF_u_rx_rx_f_rx_f_i_notEmpty____d111;
      vcd_write_val(sim_hdl, num++, DEF_u_rx_ticker_counter_6_EQ_0___d17, 1u);
      backing.DEF_u_rx_ticker_counter_6_EQ_0___d17 = DEF_u_rx_ticker_counter_6_EQ_0___d17;
      vcd_write_val(sim_hdl, num++, DEF_u_tx_curr_tx_BIT_0___h3183, 1u);
      backing.DEF_u_tx_curr_tx_BIT_0___h3183 = DEF_u_tx_curr_tx_BIT_0___h3183;
      vcd_write_val(sim_hdl, num++, DEF_u_tx_curr_tx___d94, 8u);
      backing.DEF_u_tx_curr_tx___d94 = DEF_u_tx_curr_tx___d94;
      vcd_write_val(sim_hdl, num++, DEF_u_tx_parity_bit__h3200, 1u);
      backing.DEF_u_tx_parity_bit__h3200 = DEF_u_tx_parity_bit__h3200;
      vcd_write_val(sim_hdl, num++, DEF_u_tx_state_7_EQ_0___d87, 1u);
      backing.DEF_u_tx_state_7_EQ_0___d87 = DEF_u_tx_state_7_EQ_0___d87;
      vcd_write_val(sim_hdl, num++, DEF_u_tx_state_7_EQ_1___d91, 1u);
      backing.DEF_u_tx_state_7_EQ_1___d91 = DEF_u_tx_state_7_EQ_1___d91;
      vcd_write_val(sim_hdl, num++, DEF_u_tx_state_7_EQ_3___d78, 1u);
      backing.DEF_u_tx_state_7_EQ_3___d78 = DEF_u_tx_state_7_EQ_3___d78;
      vcd_write_val(sim_hdl, num++, DEF_u_tx_state__h2765, 2u);
      backing.DEF_u_tx_state__h2765 = DEF_u_tx_state__h2765;
      vcd_write_val(sim_hdl, num++, DEF_u_tx_ticker_counter_2_EQ_0___d73, 1u);
      backing.DEF_u_tx_ticker_counter_2_EQ_0___d73 = DEF_u_tx_ticker_counter_2_EQ_0___d73;
      vcd_write_val(sim_hdl, num++, DEF_v__h1215, 32u);
      backing.DEF_v__h1215 = DEF_v__h1215;
      vcd_write_val(sim_hdl, num++, DEF_v__h1697, 32u);
      backing.DEF_v__h1697 = DEF_v__h1697;
      vcd_write_val(sim_hdl, num++, DEF_v__h1901, 32u);
      backing.DEF_v__h1901 = DEF_v__h1901;
      vcd_write_val(sim_hdl, num++, DEF_v__h2076, 32u);
      backing.DEF_v__h2076 = DEF_v__h2076;
      vcd_write_val(sim_hdl, num++, DEF_x__h1292, 1u);
      backing.DEF_x__h1292 = DEF_x__h1292;
      vcd_write_val(sim_hdl, num++, DEF_x__h1867, 1u);
      backing.DEF_x__h1867 = DEF_x__h1867;
      vcd_write_val(sim_hdl, num++, PORT_RDY_pins_cts, 1u);
      backing.PORT_RDY_pins_cts = PORT_RDY_pins_cts;
      vcd_write_val(sim_hdl, num++, PORT_RDY_pins_rxd, 1u);
      backing.PORT_RDY_pins_rxd = PORT_RDY_pins_rxd;
    }
}

void MOD_mkUARTSpec::vcd_prims(tVCDDumpType dt, MOD_mkUARTSpec &backing)
{
  INST_u_rx_bit_count.dump_VCD(dt, backing.INST_u_rx_bit_count);
  INST_u_rx_curr_rx.dump_VCD(dt, backing.INST_u_rx_curr_rx);
  INST_u_rx_curr_rx_valid.dump_VCD(dt, backing.INST_u_rx_curr_rx_valid);
  INST_u_rx_last_stop.dump_VCD(dt, backing.INST_u_rx_last_stop);
  INST_u_rx_parity_bit.dump_VCD(dt, backing.INST_u_rx_parity_bit);
  INST_u_rx_r_framing_error.dump_VCD(dt, backing.INST_u_rx_r_framing_error);
  INST_u_rx_r_overrun_error.dump_VCD(dt, backing.INST_u_rx_r_overrun_error);
  INST_u_rx_r_parity_error.dump_VCD(dt, backing.INST_u_rx_r_parity_error);
  INST_u_rx_r_rxd.dump_VCD(dt, backing.INST_u_rx_r_rxd);
  INST_u_rx_r_rxd_old.dump_VCD(dt, backing.INST_u_rx_r_rxd_old);
  INST_u_rx_rx_f_clear_w.dump_VCD(dt, backing.INST_u_rx_rx_f_clear_w);
  INST_u_rx_rx_f_deq_w.dump_VCD(dt, backing.INST_u_rx_rx_f_deq_w);
  INST_u_rx_rx_f_enq_w.dump_VCD(dt, backing.INST_u_rx_rx_f_enq_w);
  INST_u_rx_rx_f_r_count.dump_VCD(dt, backing.INST_u_rx_rx_f_r_count);
  INST_u_rx_rx_f_rx_f.dump_VCD(dt, backing.INST_u_rx_rx_f_rx_f);
  INST_u_rx_state.dump_VCD(dt, backing.INST_u_rx_state);
  INST_u_rx_ticker_counter.dump_VCD(dt, backing.INST_u_rx_ticker_counter);
  INST_u_rx_ticker_do_center.dump_VCD(dt, backing.INST_u_rx_ticker_do_center);
  INST_u_tx_bit_count.dump_VCD(dt, backing.INST_u_tx_bit_count);
  INST_u_tx_curr_tx.dump_VCD(dt, backing.INST_u_tx_curr_tx);
  INST_u_tx_last_stop.dump_VCD(dt, backing.INST_u_tx_last_stop);
  INST_u_tx_parity_bit.dump_VCD(dt, backing.INST_u_tx_parity_bit);
  INST_u_tx_r_cts.dump_VCD(dt, backing.INST_u_tx_r_cts);
  INST_u_tx_state.dump_VCD(dt, backing.INST_u_tx_state);
  INST_u_tx_ticker_counter.dump_VCD(dt, backing.INST_u_tx_ticker_counter);
  INST_u_tx_ticker_do_center.dump_VCD(dt, backing.INST_u_tx_ticker_do_center);
  INST_u_tx_tx_f.dump_VCD(dt, backing.INST_u_tx_tx_f);
}
