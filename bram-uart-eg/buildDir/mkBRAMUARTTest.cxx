/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Oct 10 17:03:19 EDT 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkBRAMUARTTest.h"


/* String declarations */
static std::string const __str_literal_5("\t", 1u);
static std::string const __str_literal_7("\n", 1u);
static std::string const __str_literal_3("     %m.", 8u);
static std::string const __str_literal_6("'h%h", 4u);
static std::string const __str_literal_8("DUT feature BRAM [%d - 1] = %h", 30u);
static std::string const __str_literal_2("DUT iter %d", 11u);
static std::string const __str_literal_9("DUT mismatch in features (RAM ERROR)", 36u);
static std::string const __str_literal_4("DUT uart received feature", 25u);
static std::string const __str_literal_10("DUT uart transmitted feature2", 29u);
static std::string const __str_literal_1("ERROR: %m: mkBRAMSeverAdapter overrun", 37u);
static std::string const __str_literal_21("Error: \"BRAMUARTTest.bsv\", line 107, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l107c33] and\n  [RL_action_l110c33, RL_action_d_init_np_1, RL_action_np_1,\n  RL_action_f_update_l59c25] ) fired in the same clock cycle.\n",
					  248u);
static std::string const __str_literal_22("Error: \"BRAMUARTTest.bsv\", line 110, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l110c33] and\n  [RL_action_d_init_np_1, RL_action_np_1, RL_action_f_update_l59c25] ) fired\n  in the same clock cycle.\n",
					  229u);
static std::string const __str_literal_11("Error: \"BRAMUARTTest.bsv\", line 59, column 31: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l59c25] and\n  [RL_action_d_init_np, RL_action_np, RL_action_l62c33, RL_action_l66c33,\n  RL_action_l70c33, RL_action_l79c33, RL_action_l86c33, RL_action_l93c33,\n  RL_action_l99c33, RL_action_l107c33, RL_action_l110c33,\n  RL_action_d_init_np_1, RL_action_np_1, RL_action_f_update_l59c25] ) fired in\n  the same clock cycle.\n",
					  439u);
static std::string const __str_literal_14("Error: \"BRAMUARTTest.bsv\", line 62, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l62c33] and\n  [RL_action_l66c33, RL_action_l70c33, RL_action_l79c33, RL_action_l86c33,\n  RL_action_l93c33, RL_action_l99c33, RL_action_l107c33, RL_action_l110c33,\n  RL_action_d_init_np_1, RL_action_np_1, RL_action_f_update_l59c25] ) fired in\n  the same clock cycle.\n",
					  377u);
static std::string const __str_literal_15("Error: \"BRAMUARTTest.bsv\", line 66, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l66c33] and\n  [RL_action_l70c33, RL_action_l79c33, RL_action_l86c33, RL_action_l93c33,\n  RL_action_l99c33, RL_action_l107c33, RL_action_l110c33,\n  RL_action_d_init_np_1, RL_action_np_1, RL_action_f_update_l59c25] ) fired in\n  the same clock cycle.\n",
					  359u);
static std::string const __str_literal_16("Error: \"BRAMUARTTest.bsv\", line 70, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l70c33] and\n  [RL_action_l79c33, RL_action_l86c33, RL_action_l93c33, RL_action_l99c33,\n  RL_action_l107c33, RL_action_l110c33, RL_action_d_init_np_1, RL_action_np_1,\n  RL_action_f_update_l59c25] ) fired in the same clock cycle.\n",
					  339u);
static std::string const __str_literal_17("Error: \"BRAMUARTTest.bsv\", line 79, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l79c33] and\n  [RL_action_l86c33, RL_action_l93c33, RL_action_l99c33, RL_action_l107c33,\n  RL_action_l110c33, RL_action_d_init_np_1, RL_action_np_1,\n  RL_action_f_update_l59c25] ) fired in the same clock cycle.\n",
					  321u);
static std::string const __str_literal_18("Error: \"BRAMUARTTest.bsv\", line 86, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l86c33] and\n  [RL_action_l93c33, RL_action_l99c33, RL_action_l107c33, RL_action_l110c33,\n  RL_action_d_init_np_1, RL_action_np_1, RL_action_f_update_l59c25] ) fired in\n  the same clock cycle.\n",
					  303u);
static std::string const __str_literal_19("Error: \"BRAMUARTTest.bsv\", line 93, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l93c33] and\n  [RL_action_l99c33, RL_action_l107c33, RL_action_l110c33,\n  RL_action_d_init_np_1, RL_action_np_1, RL_action_f_update_l59c25] ) fired in\n  the same clock cycle.\n",
					  285u);
static std::string const __str_literal_20("Error: \"BRAMUARTTest.bsv\", line 99, column 33: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l99c33] and\n  [RL_action_l107c33, RL_action_l110c33, RL_action_d_init_np_1,\n  RL_action_np_1, RL_action_f_update_l59c25] ) fired in the same clock cycle.\n",
					  265u);
static std::string const __str_literal_12("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_d_init_np] and\n  [RL_action_np, RL_action_l62c33, RL_action_l66c33, RL_action_l70c33,\n  RL_action_l79c33, RL_action_l86c33, RL_action_l93c33, RL_action_l99c33,\n  RL_action_l107c33, RL_action_l110c33, RL_action_d_init_np_1, RL_action_np_1,\n  RL_action_f_update_l59c25] ) fired in the same clock cycle.\n",
					  405u);
static std::string const __str_literal_23("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_d_init_np_1] and\n  [RL_action_np_1, RL_action_f_update_l59c25] ) fired in the same clock cycle.\n",
					  200u);
static std::string const __str_literal_13("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_np] and\n  [RL_action_l62c33, RL_action_l66c33, RL_action_l70c33, RL_action_l79c33,\n  RL_action_l86c33, RL_action_l93c33, RL_action_l99c33, RL_action_l107c33,\n  RL_action_l110c33, RL_action_d_init_np_1, RL_action_np_1,\n  RL_action_f_update_l59c25] ) fired in the same clock cycle.\n",
					  384u);
static std::string const __str_literal_24("Error: \"StmtFSM.bs\", line 41, column 0: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_np_1] and\n  [RL_action_f_update_l59c25] ) fired in the same clock cycle.\n",
					  177u);


/* Constructor */
MOD_mkBRAMUARTTest::MOD_mkBRAMUARTTest(tSimStateHdl simHdl,
				       char const *name,
				       Module *parent,
				       tUInt32 ARG_cfg)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_feature(simHdl, "feature", this, 16u, 43690u, (tUInt8)0u),
    INST_feature2(simHdl, "feature2", this, 16u, 43690u, (tUInt8)0u),
    INST_featureBRAM_memory(simHdl, "featureBRAM_memory", this, (tUInt8)0u, 11u, 16u, 2048u, 1u),
    INST_featureBRAM_serverAdapter_cnt(simHdl,
				       "featureBRAM_serverAdapter_cnt",
				       this,
				       3u,
				       (tUInt8)0u,
				       (tUInt8)0u),
    INST_featureBRAM_serverAdapter_cnt_1(simHdl,
					 "featureBRAM_serverAdapter_cnt_1",
					 this,
					 3u,
					 (tUInt8)0u),
    INST_featureBRAM_serverAdapter_cnt_2(simHdl,
					 "featureBRAM_serverAdapter_cnt_2",
					 this,
					 3u,
					 (tUInt8)0u),
    INST_featureBRAM_serverAdapter_cnt_3(simHdl,
					 "featureBRAM_serverAdapter_cnt_3",
					 this,
					 3u,
					 (tUInt8)0u),
    INST_featureBRAM_serverAdapter_outDataCore(simHdl,
					       "featureBRAM_serverAdapter_outDataCore",
					       this,
					       16u,
					       3u,
					       1u,
					       0u),
    INST_featureBRAM_serverAdapter_outData_deqCalled(simHdl,
						     "featureBRAM_serverAdapter_outData_deqCalled",
						     this,
						     0u),
    INST_featureBRAM_serverAdapter_outData_enqData(simHdl,
						   "featureBRAM_serverAdapter_outData_enqData",
						   this,
						   16u,
						   (tUInt8)0u),
    INST_featureBRAM_serverAdapter_outData_outData(simHdl,
						   "featureBRAM_serverAdapter_outData_outData",
						   this,
						   16u,
						   (tUInt8)0u),
    INST_featureBRAM_serverAdapter_s1(simHdl,
				      "featureBRAM_serverAdapter_s1",
				      this,
				      2u,
				      (tUInt8)0u,
				      (tUInt8)0u),
    INST_featureBRAM_serverAdapter_s1_1(simHdl, "featureBRAM_serverAdapter_s1_1", this, 2u, (tUInt8)0u),
    INST_featureBRAM_serverAdapter_writeWithResp(simHdl,
						 "featureBRAM_serverAdapter_writeWithResp",
						 this,
						 2u,
						 (tUInt8)0u),
    INST_featureRAM_error_r(simHdl, "featureRAM_error_r", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_fptr_r(simHdl, "fptr_r", this, 11u, 0u, (tUInt8)0u),
    INST_fptr_w(simHdl, "fptr_w", this, 11u, 0u, (tUInt8)0u),
    INST_i(simHdl, "i", this, 32u),
    INST_jj_1_delay_count(simHdl, "jj_1_delay_count", this, 7u, (tUInt8)0u, (tUInt8)0u),
    INST_jj_delay_count(simHdl, "jj_delay_count", this, 10u, 1u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 5u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    INST_uart(simHdl, "uart", this, ARG_cfg),
    PORT_RST_N((tUInt8)1u),
    PORT_cfg(ARG_cfg),
    DEF_v__h45861(12297829382473034410llu),
    DEF_v__h43209(12297829382473034410llu)
{
  PORT_RDY_uart_pins_rxd = false;
  PORT_RDY_uart_pins_cts = false;
  symbol_count = 102u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkBRAMUARTTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_15", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_16", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_17", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_18", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_19", SYM_RULE);
  init_symbol(&symbols[5u], "__me_check_20", SYM_RULE);
  init_symbol(&symbols[6u], "__me_check_21", SYM_RULE);
  init_symbol(&symbols[7u], "__me_check_22", SYM_RULE);
  init_symbol(&symbols[8u], "__me_check_23", SYM_RULE);
  init_symbol(&symbols[9u], "__me_check_24", SYM_RULE);
  init_symbol(&symbols[10u], "__me_check_25", SYM_RULE);
  init_symbol(&symbols[11u], "__me_check_26", SYM_RULE);
  init_symbol(&symbols[12u], "__me_check_27", SYM_RULE);
  init_symbol(&symbols[13u], "__me_check_28", SYM_RULE);
  init_symbol(&symbols[14u], "_read__h1840", SYM_DEF, &DEF__read__h1840, 32u);
  init_symbol(&symbols[15u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[16u], "b__h1039", SYM_DEF, &DEF_b__h1039, 3u);
  init_symbol(&symbols[17u], "cfg", SYM_PORT, &PORT_cfg, 19u);
  init_symbol(&symbols[18u], "feature", SYM_MODULE, &INST_feature);
  init_symbol(&symbols[19u], "feature2", SYM_MODULE, &INST_feature2);
  init_symbol(&symbols[20u], "featureBRAM_memory", SYM_MODULE, &INST_featureBRAM_memory);
  init_symbol(&symbols[21u],
	      "featureBRAM_serverAdapter_cnt",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_cnt);
  init_symbol(&symbols[22u],
	      "featureBRAM_serverAdapter_cnt_1",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_cnt_1);
  init_symbol(&symbols[23u],
	      "featureBRAM_serverAdapter_cnt_2",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_cnt_2);
  init_symbol(&symbols[24u],
	      "featureBRAM_serverAdapter_cnt_3",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_cnt_3);
  init_symbol(&symbols[25u],
	      "featureBRAM_serverAdapter_outData_deqCalled",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_outData_deqCalled);
  init_symbol(&symbols[26u],
	      "featureBRAM_serverAdapter_outData_enqData",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_outData_enqData);
  init_symbol(&symbols[27u],
	      "featureBRAM_serverAdapter_outData_outData",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_outData_outData);
  init_symbol(&symbols[28u],
	      "featureBRAM_serverAdapter_outDataCore",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_outDataCore);
  init_symbol(&symbols[29u],
	      "featureBRAM_serverAdapter_s1",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_s1);
  init_symbol(&symbols[30u],
	      "featureBRAM_serverAdapter_s1_1",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_s1_1);
  init_symbol(&symbols[31u],
	      "featureBRAM_serverAdapter_writeWithResp",
	      SYM_MODULE,
	      &INST_featureBRAM_serverAdapter_writeWithResp);
  init_symbol(&symbols[32u], "featureRAM_error_r", SYM_MODULE, &INST_featureRAM_error_r);
  init_symbol(&symbols[33u], "fptr_r", SYM_MODULE, &INST_fptr_r);
  init_symbol(&symbols[34u], "fptr_w", SYM_MODULE, &INST_fptr_w);
  init_symbol(&symbols[35u], "i", SYM_MODULE, &INST_i);
  init_symbol(&symbols[36u], "jj_1_delay_count", SYM_MODULE, &INST_jj_1_delay_count);
  init_symbol(&symbols[37u], "jj_delay_count", SYM_MODULE, &INST_jj_delay_count);
  init_symbol(&symbols[38u], "RDY_uart_pins_cts", SYM_PORT, &PORT_RDY_uart_pins_cts, 1u);
  init_symbol(&symbols[39u], "RDY_uart_pins_rxd", SYM_PORT, &PORT_RDY_uart_pins_rxd, 1u);
  init_symbol(&symbols[40u], "RL_action_d_init_np", SYM_RULE);
  init_symbol(&symbols[41u], "RL_action_d_init_np_1", SYM_RULE);
  init_symbol(&symbols[42u], "RL_action_f_init_l59c25", SYM_RULE);
  init_symbol(&symbols[43u], "RL_action_f_update_l59c25", SYM_RULE);
  init_symbol(&symbols[44u], "RL_action_l107c33", SYM_RULE);
  init_symbol(&symbols[45u], "RL_action_l110c33", SYM_RULE);
  init_symbol(&symbols[46u], "RL_action_l62c33", SYM_RULE);
  init_symbol(&symbols[47u], "RL_action_l66c33", SYM_RULE);
  init_symbol(&symbols[48u], "RL_action_l70c33", SYM_RULE);
  init_symbol(&symbols[49u], "RL_action_l79c33", SYM_RULE);
  init_symbol(&symbols[50u], "RL_action_l86c33", SYM_RULE);
  init_symbol(&symbols[51u], "RL_action_l93c33", SYM_RULE);
  init_symbol(&symbols[52u], "RL_action_l99c33", SYM_RULE);
  init_symbol(&symbols[53u], "RL_action_np", SYM_RULE);
  init_symbol(&symbols[54u], "RL_action_np_1", SYM_RULE);
  init_symbol(&symbols[55u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[56u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[57u], "RL_featureBRAM_serverAdapter_cnt_finalAdd", SYM_RULE);
  init_symbol(&symbols[58u], "RL_featureBRAM_serverAdapter_moveToOutFIFO", SYM_RULE);
  init_symbol(&symbols[59u], "RL_featureBRAM_serverAdapter_outData_deqOnly", SYM_RULE);
  init_symbol(&symbols[60u], "RL_featureBRAM_serverAdapter_outData_enqAndDeq", SYM_RULE);
  init_symbol(&symbols[61u], "RL_featureBRAM_serverAdapter_outData_enqOnly", SYM_RULE);
  init_symbol(&symbols[62u], "RL_featureBRAM_serverAdapter_outData_setFirstCore", SYM_RULE);
  init_symbol(&symbols[63u], "RL_featureBRAM_serverAdapter_outData_setFirstEnq", SYM_RULE);
  init_symbol(&symbols[64u], "RL_featureBRAM_serverAdapter_overRun", SYM_RULE);
  init_symbol(&symbols[65u], "RL_featureBRAM_serverAdapter_s1__dreg_update", SYM_RULE);
  init_symbol(&symbols[66u], "RL_featureBRAM_serverAdapter_stageReadResponseAlways", SYM_RULE);
  init_symbol(&symbols[67u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[68u], "RL_idle_l59c25", SYM_RULE);
  init_symbol(&symbols[69u], "RL_idle_l59c25_1", SYM_RULE);
  init_symbol(&symbols[70u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[71u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[72u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[73u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[74u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[75u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[76u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[77u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[78u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[79u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[80u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[81u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[82u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[83u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[84u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[85u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[86u], "uart", SYM_MODULE, &INST_uart);
  init_symbol(&symbols[87u],
	      "WILL_FIRE_RL_action_d_init_np",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_d_init_np,
	      1u);
  init_symbol(&symbols[88u],
	      "WILL_FIRE_RL_action_d_init_np_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_d_init_np_1,
	      1u);
  init_symbol(&symbols[89u],
	      "WILL_FIRE_RL_action_f_init_l59c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_init_l59c25,
	      1u);
  init_symbol(&symbols[90u],
	      "WILL_FIRE_RL_action_f_update_l59c25",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_f_update_l59c25,
	      1u);
  init_symbol(&symbols[91u],
	      "WILL_FIRE_RL_action_l107c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l107c33,
	      1u);
  init_symbol(&symbols[92u],
	      "WILL_FIRE_RL_action_l110c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l110c33,
	      1u);
  init_symbol(&symbols[93u],
	      "WILL_FIRE_RL_action_l62c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l62c33,
	      1u);
  init_symbol(&symbols[94u],
	      "WILL_FIRE_RL_action_l66c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l66c33,
	      1u);
  init_symbol(&symbols[95u],
	      "WILL_FIRE_RL_action_l70c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l70c33,
	      1u);
  init_symbol(&symbols[96u],
	      "WILL_FIRE_RL_action_l79c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l79c33,
	      1u);
  init_symbol(&symbols[97u],
	      "WILL_FIRE_RL_action_l86c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l86c33,
	      1u);
  init_symbol(&symbols[98u],
	      "WILL_FIRE_RL_action_l93c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l93c33,
	      1u);
  init_symbol(&symbols[99u],
	      "WILL_FIRE_RL_action_l99c33",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l99c33,
	      1u);
  init_symbol(&symbols[100u], "WILL_FIRE_RL_action_np", SYM_DEF, &DEF_WILL_FIRE_RL_action_np, 1u);
  init_symbol(&symbols[101u], "WILL_FIRE_RL_action_np_1", SYM_DEF, &DEF_WILL_FIRE_RL_action_np_1, 1u);
}


/* Rule actions */

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_outData_setFirstCore()
{
  tUInt32 DEF_x__h561;
  DEF_x__h561 = INST_featureBRAM_serverAdapter_outDataCore.METH_first();
  INST_featureBRAM_serverAdapter_outData_outData.METH_wset(DEF_x__h561);
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_outData_setFirstEnq()
{
  DEF_x__h649 = INST_featureBRAM_serverAdapter_outData_enqData.METH_wget();
  INST_featureBRAM_serverAdapter_outData_outData.METH_wset(DEF_x__h649);
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_outData_enqOnly()
{
  DEF_x__h649 = INST_featureBRAM_serverAdapter_outData_enqData.METH_wget();
  INST_featureBRAM_serverAdapter_outDataCore.METH_enq(DEF_x__h649);
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_outData_deqOnly()
{
  INST_featureBRAM_serverAdapter_outDataCore.METH_deq();
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_outData_enqAndDeq()
{
  DEF_x__h649 = INST_featureBRAM_serverAdapter_outData_enqData.METH_wget();
  INST_featureBRAM_serverAdapter_outDataCore.METH_enq(DEF_x__h649);
  INST_featureBRAM_serverAdapter_outDataCore.METH_deq();
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_cnt_finalAdd()
{
  tUInt8 DEF_IF_featureBRAM_serverAdapter_cnt_3_whas__3_THE_ETC___d33;
  tUInt8 DEF_b__h1019;
  DEF_b__h1019 = INST_featureBRAM_serverAdapter_cnt_3.METH_wget();
  DEF_b__h1039 = INST_featureBRAM_serverAdapter_cnt.METH_read();
  DEF_featureBRAM_serverAdapter_cnt_3_whas____d23 = INST_featureBRAM_serverAdapter_cnt_3.METH_whas();
  DEF_featureBRAM_serverAdapter_cnt_2_whas____d21 = INST_featureBRAM_serverAdapter_cnt_2.METH_whas();
  DEF_featureBRAM_serverAdapter_cnt_1_whas____d20 = INST_featureBRAM_serverAdapter_cnt_1.METH_whas();
  DEF_IF_featureBRAM_serverAdapter_cnt_3_whas__3_THE_ETC___d33 = DEF_featureBRAM_serverAdapter_cnt_3_whas____d23 ? DEF_b__h1019 : (tUInt8)7u & (((tUInt8)7u & (DEF_b__h1039 + (DEF_featureBRAM_serverAdapter_cnt_1_whas____d20 ? INST_featureBRAM_serverAdapter_cnt_1.METH_wget() : (tUInt8)0u))) + (DEF_featureBRAM_serverAdapter_cnt_2_whas____d21 ? INST_featureBRAM_serverAdapter_cnt_2.METH_wget() : (tUInt8)0u));
  INST_featureBRAM_serverAdapter_cnt.METH_write(DEF_IF_featureBRAM_serverAdapter_cnt_3_whas__3_THE_ETC___d33);
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_s1__dreg_update()
{
  tUInt8 DEF_featureBRAM_serverAdapter_s1_1_whas__4_AND_0_O_ETC___d42;
  tUInt8 DEF_featureBRAM_serverAdapter_s1_1_wget____d35;
  DEF_featureBRAM_serverAdapter_s1_1_wget____d35 = INST_featureBRAM_serverAdapter_s1_1.METH_wget();
  DEF_featureBRAM_serverAdapter_s1_1_whas__4_AND_0_O_ETC___d42 = (tUInt8)3u & (((INST_featureBRAM_serverAdapter_s1_1.METH_whas() && (tUInt8)(DEF_featureBRAM_serverAdapter_s1_1_wget____d35 >> 1u)) << 1u) | (tUInt8)((tUInt8)1u & DEF_featureBRAM_serverAdapter_s1_1_wget____d35));
  INST_featureBRAM_serverAdapter_s1.METH_write(DEF_featureBRAM_serverAdapter_s1_1_whas__4_AND_0_O_ETC___d42);
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_stageReadResponseAlways()
{
  tUInt8 DEF__1_CONCAT_NOT_featureBRAM_serverAdapter_writeWi_ETC___d49;
  tUInt8 DEF_NOT_featureBRAM_serverAdapter_writeWithResp_wg_ETC___d48;
  tUInt8 DEF_ab_BIT_0___h1497;
  tUInt8 DEF_ab_BIT_1___h1493;
  tUInt8 DEF_ab__h1487;
  DEF_ab__h1487 = INST_featureBRAM_serverAdapter_writeWithResp.METH_wget();
  DEF_ab_BIT_1___h1493 = (tUInt8)(DEF_ab__h1487 >> 1u);
  DEF_ab_BIT_0___h1497 = (tUInt8)((tUInt8)1u & DEF_ab__h1487);
  DEF_NOT_featureBRAM_serverAdapter_writeWithResp_wg_ETC___d48 = !DEF_ab_BIT_1___h1493 || DEF_ab_BIT_0___h1497;
  DEF__1_CONCAT_NOT_featureBRAM_serverAdapter_writeWi_ETC___d49 = (tUInt8)3u & (((tUInt8)1u << 1u) | DEF_NOT_featureBRAM_serverAdapter_writeWithResp_wg_ETC___d48);
  INST_featureBRAM_serverAdapter_s1_1.METH_wset(DEF__1_CONCAT_NOT_featureBRAM_serverAdapter_writeWi_ETC___d49);
  if (DEF_NOT_featureBRAM_serverAdapter_writeWithResp_wg_ETC___d48)
    INST_featureBRAM_serverAdapter_cnt_1.METH_wset((tUInt8)1u);
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_moveToOutFIFO()
{
  tUInt32 DEF_v__h1596;
  DEF_v__h1596 = INST_featureBRAM_memory.METH_read();
  DEF_featureBRAM_serverAdapter_s1___d50 = INST_featureBRAM_serverAdapter_s1.METH_read();
  DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51 = (tUInt8)((tUInt8)1u & DEF_featureBRAM_serverAdapter_s1___d50);
  if (DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51)
    INST_featureBRAM_serverAdapter_outData_enqData.METH_wset(DEF_v__h1596);
}

void MOD_mkBRAMUARTTest::RL_featureBRAM_serverAdapter_overRun()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_1);
}

void MOD_mkBRAMUARTTest::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas__0_AND_start_reg_2_wget__1___d62;
  DEF_start_reg_2_whas__0_AND_start_reg_2_wget__1___d62 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas__0_AND_start_reg_2_wget__1___d62);
}

void MOD_mkBRAMUARTTest::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkBRAMUARTTest::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__2_AND_state_fired_1_wget__3___d74;
  DEF_state_fired_1_whas__2_AND_state_fired_1_wget__3___d74 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__2_AND_state_fired_1_wget__3___d74);
}

void MOD_mkBRAMUARTTest::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__5_OR_NOT_state_overlap_pw_w_ETC___d80;
  tUInt8 DEF_state_can_overlap__h7648;
  DEF_state_can_overlap__h7648 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__5_OR_NOT_state_overlap_pw_w_ETC___d80 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h7648);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__5_OR_NOT_state_overlap_pw_w_ETC___d80);
}

void MOD_mkBRAMUARTTest::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkBRAMUARTTest::RL_action_f_init_l59c25()
{
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_i.METH_write(0u);
}

void MOD_mkBRAMUARTTest::RL_action_d_init_np()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_delay_count.METH_write(1u);
}

void MOD_mkBRAMUARTTest::RL_action_np()
{
  tUInt32 DEF_x__h42148;
  DEF_jj_delay_count_read____d111 = INST_jj_delay_count.METH_read();
  DEF_x__h42148 = 1023u & ((((tUInt32)(511u & DEF_jj_delay_count_read____d111)) << 1u) | (tUInt32)((tUInt8)0u));
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_delay_count.METH_write(DEF_x__h42148);
}

void MOD_mkBRAMUARTTest::RL_action_l62c33()
{
  DEF__read__h1840 = INST_i.METH_read();
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_2, DEF__read__h1840);
}

void MOD_mkBRAMUARTTest::RL_action_l66c33()
{
  tUInt32 DEF_x__h42847;
  tUInt8 DEF_AVMeth_uart_rx;
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  DEF_AVMeth_uart_rx = INST_uart.METH_rx();
  DEF_v__h43183 = DEF_AVMeth_uart_rx;
  DEF_x__h42847 = 65535u & ((((tUInt32)(DEF_v__h43183)) << 8u) | (tUInt32)((tUInt8)0u));
  INST_feature.METH_write(DEF_x__h42847);
}

void MOD_mkBRAMUARTTest::RL_action_l70c33()
{
  tUInt32 DEF_ftmp__h43195;
  tUInt8 DEF_feature_BITS_15_TO_8___h43257;
  tUInt8 DEF_AVMeth_uart_rx;
  DEF_x3__h43641 = INST_feature.METH_read();
  DEF_feature_BITS_15_TO_8___h43257 = (tUInt8)(DEF_x3__h43641 >> 8u);
  INST_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  DEF_AVMeth_uart_rx = INST_uart.METH_rx();
  DEF_v__h43183 = DEF_AVMeth_uart_rx;
  DEF_ftmp__h43195 = 65535u & ((((tUInt32)(DEF_feature_BITS_15_TO_8___h43257)) << 8u) | (tUInt32)(DEF_v__h43183));
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h43209 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl,
		 this,
		 "64,s,s,s",
		 DEF_v__h43209,
		 &__str_literal_3,
		 &__str_literal_4,
		 &__str_literal_5);
    dollar_write(sim_hdl, this, "s,16", &__str_literal_6, DEF_ftmp__h43195);
    dollar_write(sim_hdl, this, "s", &__str_literal_7);
  }
  INST_feature.METH_write(DEF_ftmp__h43195);
}

void MOD_mkBRAMUARTTest::RL_action_l79c33()
{
  tUInt32 DEF_x__h43684;
  tUInt32 DEF_x2__h43640;
  DEF_x3__h43641 = INST_feature.METH_read();
  DEF_x2__h43640 = INST_fptr_w.METH_read();
  DEF_x__h43684 = 2047u & (DEF_x2__h43640 + 1u);
  INST_state_mkFSMstate.METH_write((tUInt8)7u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_featureBRAM_memory.METH_put((tUInt8)1u, DEF_x2__h43640, DEF_x3__h43641);
  INST_featureBRAM_serverAdapter_writeWithResp.METH_wset((tUInt8)2u);
  INST_fptr_w.METH_write(DEF_x__h43684);
}

void MOD_mkBRAMUARTTest::RL_action_l86c33()
{
  tUInt32 DEF_x__h44094;
  DEF_x2__h44052 = INST_fptr_r.METH_read();
  DEF_x__h44094 = 2047u & (DEF_x2__h44052 + 1u);
  INST_state_mkFSMstate.METH_write((tUInt8)8u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_featureBRAM_memory.METH_put((tUInt8)0u, DEF_x2__h44052, 0u);
  INST_featureBRAM_serverAdapter_writeWithResp.METH_wset((tUInt8)0u);
  INST_fptr_r.METH_write(DEF_x__h44094);
}

void MOD_mkBRAMUARTTest::RL_action_l93c33()
{
  tUInt32 DEF_v__h44453;
  DEF_v__h44453 = INST_featureBRAM_serverAdapter_outData_outData.METH_wget();
  DEF_x2__h44052 = INST_fptr_r.METH_read();
  INST_state_mkFSMstate.METH_write((tUInt8)9u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_featureBRAM_serverAdapter_outData_deqCalled.METH_wset();
  INST_featureBRAM_serverAdapter_cnt_2.METH_wset((tUInt8)7u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,11,16", &__str_literal_8, DEF_x2__h44052, DEF_v__h44453);
  INST_feature2.METH_write(DEF_v__h44453);
}

void MOD_mkBRAMUARTTest::RL_action_l99c33()
{
  tUInt32 DEF_x__h45025;
  tUInt8 DEF_NOT_feature2_55_EQ_feature_32_56___d157;
  DEF_val__h45857 = INST_feature2.METH_read();
  DEF_x3__h43641 = INST_feature.METH_read();
  DEF_NOT_feature2_55_EQ_feature_32_56___d157 = !(DEF_val__h45857 == DEF_x3__h43641);
  DEF_x__h45025 = 65535u & (DEF_val__h45857 + 1u);
  INST_state_mkFSMstate.METH_write((tUInt8)10u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_feature2_55_EQ_feature_32_56___d157)
      dollar_display(sim_hdl, this, "s", &__str_literal_9);
  if (DEF_NOT_feature2_55_EQ_feature_32_56___d157)
    INST_featureRAM_error_r.METH_write((tUInt8)1u);
  INST_feature2.METH_write(DEF_x__h45025);
}

void MOD_mkBRAMUARTTest::RL_action_l107c33()
{
  tUInt8 DEF_i__h45400;
  DEF_val__h45857 = INST_feature2.METH_read();
  DEF_i__h45400 = (tUInt8)(DEF_val__h45857 >> 8u);
  INST_state_mkFSMstate.METH_write((tUInt8)11u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_uart.METH_tx(DEF_i__h45400);
}

void MOD_mkBRAMUARTTest::RL_action_l110c33()
{
  tUInt8 DEF_i__h45817;
  DEF_val__h45857 = INST_feature2.METH_read();
  DEF_i__h45817 = (tUInt8)((tUInt8)255u & DEF_val__h45857);
  INST_state_mkFSMstate.METH_write((tUInt8)12u);
  INST_state_set_pw.METH_wset();
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_uart.METH_tx(DEF_i__h45817);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h45861 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl,
		 this,
		 "64,s,s,s",
		 DEF_v__h45861,
		 &__str_literal_3,
		 &__str_literal_10,
		 &__str_literal_5);
    dollar_write(sim_hdl, this, "s,16", &__str_literal_6, DEF_val__h45857);
    dollar_write(sim_hdl, this, "s", &__str_literal_7);
  }
}

void MOD_mkBRAMUARTTest::RL_action_d_init_np_1()
{
  INST_state_mkFSMstate.METH_write((tUInt8)13u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_1_delay_count.METH_write((tUInt8)0u);
}

void MOD_mkBRAMUARTTest::RL_action_np_1()
{
  tUInt8 DEF_x__h46753;
  DEF_jj_1_delay_count_read____d171 = INST_jj_1_delay_count.METH_read();
  DEF_x__h46753 = (tUInt8)127u & (DEF_jj_1_delay_count_read____d171 + (tUInt8)1u);
  INST_state_mkFSMstate.METH_write((tUInt8)14u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_jj_1_delay_count.METH_write(DEF_x__h46753);
}

void MOD_mkBRAMUARTTest::RL_action_f_update_l59c25()
{
  tUInt32 DEF_x__h47258;
  DEF__read__h1840 = INST_i.METH_read();
  DEF_x__h47258 = DEF__read__h1840 + 1u;
  INST_state_mkFSMstate.METH_write((tUInt8)15u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_i.METH_write(DEF_x__h47258);
}

void MOD_mkBRAMUARTTest::RL_idle_l59c25()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkBRAMUARTTest::RL_idle_l59c25_1()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkBRAMUARTTest::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkBRAMUARTTest::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkBRAMUARTTest::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkBRAMUARTTest::__me_check_15()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_f_init_l59c25 && (((((((((((((DEF_WILL_FIRE_RL_action_d_init_np || DEF_WILL_FIRE_RL_action_np) || DEF_WILL_FIRE_RL_action_l62c33) || DEF_WILL_FIRE_RL_action_l66c33) || DEF_WILL_FIRE_RL_action_l70c33) || DEF_WILL_FIRE_RL_action_l79c33) || DEF_WILL_FIRE_RL_action_l86c33) || DEF_WILL_FIRE_RL_action_l93c33) || DEF_WILL_FIRE_RL_action_l99c33) || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}

void MOD_mkBRAMUARTTest::__me_check_16()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_d_init_np && ((((((((((((DEF_WILL_FIRE_RL_action_np || DEF_WILL_FIRE_RL_action_l62c33) || DEF_WILL_FIRE_RL_action_l66c33) || DEF_WILL_FIRE_RL_action_l70c33) || DEF_WILL_FIRE_RL_action_l79c33) || DEF_WILL_FIRE_RL_action_l86c33) || DEF_WILL_FIRE_RL_action_l93c33) || DEF_WILL_FIRE_RL_action_l99c33) || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_12);
}

void MOD_mkBRAMUARTTest::__me_check_17()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_np && (((((((((((DEF_WILL_FIRE_RL_action_l62c33 || DEF_WILL_FIRE_RL_action_l66c33) || DEF_WILL_FIRE_RL_action_l70c33) || DEF_WILL_FIRE_RL_action_l79c33) || DEF_WILL_FIRE_RL_action_l86c33) || DEF_WILL_FIRE_RL_action_l93c33) || DEF_WILL_FIRE_RL_action_l99c33) || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_13);
}

void MOD_mkBRAMUARTTest::__me_check_18()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l62c33 && ((((((((((DEF_WILL_FIRE_RL_action_l66c33 || DEF_WILL_FIRE_RL_action_l70c33) || DEF_WILL_FIRE_RL_action_l79c33) || DEF_WILL_FIRE_RL_action_l86c33) || DEF_WILL_FIRE_RL_action_l93c33) || DEF_WILL_FIRE_RL_action_l99c33) || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_14);
}

void MOD_mkBRAMUARTTest::__me_check_19()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l66c33 && (((((((((DEF_WILL_FIRE_RL_action_l70c33 || DEF_WILL_FIRE_RL_action_l79c33) || DEF_WILL_FIRE_RL_action_l86c33) || DEF_WILL_FIRE_RL_action_l93c33) || DEF_WILL_FIRE_RL_action_l99c33) || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_15);
}

void MOD_mkBRAMUARTTest::__me_check_20()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l70c33 && ((((((((DEF_WILL_FIRE_RL_action_l79c33 || DEF_WILL_FIRE_RL_action_l86c33) || DEF_WILL_FIRE_RL_action_l93c33) || DEF_WILL_FIRE_RL_action_l99c33) || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_16);
}

void MOD_mkBRAMUARTTest::__me_check_21()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l79c33 && (((((((DEF_WILL_FIRE_RL_action_l86c33 || DEF_WILL_FIRE_RL_action_l93c33) || DEF_WILL_FIRE_RL_action_l99c33) || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_17);
}

void MOD_mkBRAMUARTTest::__me_check_22()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l86c33 && ((((((DEF_WILL_FIRE_RL_action_l93c33 || DEF_WILL_FIRE_RL_action_l99c33) || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_18);
}

void MOD_mkBRAMUARTTest::__me_check_23()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l93c33 && (((((DEF_WILL_FIRE_RL_action_l99c33 || DEF_WILL_FIRE_RL_action_l107c33) || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_19);
}

void MOD_mkBRAMUARTTest::__me_check_24()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l99c33 && ((((DEF_WILL_FIRE_RL_action_l107c33 || DEF_WILL_FIRE_RL_action_l110c33) || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_20);
}

void MOD_mkBRAMUARTTest::__me_check_25()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l107c33 && (((DEF_WILL_FIRE_RL_action_l110c33 || DEF_WILL_FIRE_RL_action_d_init_np_1) || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_21);
}

void MOD_mkBRAMUARTTest::__me_check_26()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l110c33 && ((DEF_WILL_FIRE_RL_action_d_init_np_1 || DEF_WILL_FIRE_RL_action_np_1) || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_22);
}

void MOD_mkBRAMUARTTest::__me_check_27()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_d_init_np_1 && (DEF_WILL_FIRE_RL_action_np_1 || DEF_WILL_FIRE_RL_action_f_update_l59c25))
      dollar_error(sim_hdl, this, "s", &__str_literal_23);
}

void MOD_mkBRAMUARTTest::__me_check_28()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_np_1 && DEF_WILL_FIRE_RL_action_f_update_l59c25)
      dollar_error(sim_hdl, this, "s", &__str_literal_24);
}


/* Methods */

tUInt8 MOD_mkBRAMUARTTest::METH_uart_pins_txd()
{
  tUInt8 PORT_uart_pins_txd;
  PORT_uart_pins_txd = INST_uart.METH_pins_txd();
  return PORT_uart_pins_txd;
}

tUInt8 MOD_mkBRAMUARTTest::METH_RDY_uart_pins_txd()
{
  tUInt8 PORT_RDY_uart_pins_txd;
  tUInt8 DEF_CAN_FIRE_uart_pins_txd;
  DEF_CAN_FIRE_uart_pins_txd = (tUInt8)1u;
  PORT_RDY_uart_pins_txd = DEF_CAN_FIRE_uart_pins_txd;
  return PORT_RDY_uart_pins_txd;
}

void MOD_mkBRAMUARTTest::METH_uart_pins_rxd(tUInt8 ARG_uart_pins_rxd)
{
  if (PORT_RDY_uart_pins_rxd)
    INST_uart.METH_pins_rxd(ARG_uart_pins_rxd);
}

tUInt8 MOD_mkBRAMUARTTest::METH_RDY_uart_pins_rxd()
{
  tUInt8 DEF_CAN_FIRE_uart_pins_rxd;
  DEF_CAN_FIRE_uart_pins_rxd = (tUInt8)1u;
  PORT_RDY_uart_pins_rxd = DEF_CAN_FIRE_uart_pins_rxd;
  return PORT_RDY_uart_pins_rxd;
}

tUInt8 MOD_mkBRAMUARTTest::METH_uart_pins_rts()
{
  tUInt8 PORT_uart_pins_rts;
  PORT_uart_pins_rts = INST_uart.METH_pins_rts();
  return PORT_uart_pins_rts;
}

tUInt8 MOD_mkBRAMUARTTest::METH_RDY_uart_pins_rts()
{
  tUInt8 PORT_RDY_uart_pins_rts;
  tUInt8 DEF_CAN_FIRE_uart_pins_rts;
  DEF_CAN_FIRE_uart_pins_rts = (tUInt8)1u;
  PORT_RDY_uart_pins_rts = DEF_CAN_FIRE_uart_pins_rts;
  return PORT_RDY_uart_pins_rts;
}

void MOD_mkBRAMUARTTest::METH_uart_pins_cts(tUInt8 ARG_uart_pins_cts)
{
  if (PORT_RDY_uart_pins_cts)
    INST_uart.METH_pins_cts(ARG_uart_pins_cts);
}

tUInt8 MOD_mkBRAMUARTTest::METH_RDY_uart_pins_cts()
{
  tUInt8 DEF_CAN_FIRE_uart_pins_cts;
  DEF_CAN_FIRE_uart_pins_cts = (tUInt8)1u;
  PORT_RDY_uart_pins_cts = DEF_CAN_FIRE_uart_pins_cts;
  return PORT_RDY_uart_pins_cts;
}

tUInt8 MOD_mkBRAMUARTTest::METH_featureRAM_error()
{
  tUInt8 PORT_featureRAM_error;
  PORT_featureRAM_error = INST_featureRAM_error_r.METH_read();
  return PORT_featureRAM_error;
}

tUInt8 MOD_mkBRAMUARTTest::METH_RDY_featureRAM_error()
{
  tUInt8 PORT_RDY_featureRAM_error;
  tUInt8 DEF_CAN_FIRE_featureRAM_error;
  DEF_CAN_FIRE_featureRAM_error = (tUInt8)1u;
  PORT_RDY_featureRAM_error = DEF_CAN_FIRE_featureRAM_error;
  return PORT_RDY_featureRAM_error;
}

tUInt8 MOD_mkBRAMUARTTest::METH_uart_errors()
{
  tUInt8 PORT_uart_errors;
  PORT_uart_errors = INST_uart.METH_errors();
  return PORT_uart_errors;
}

tUInt8 MOD_mkBRAMUARTTest::METH_RDY_uart_errors()
{
  tUInt8 PORT_RDY_uart_errors;
  tUInt8 DEF_CAN_FIRE_uart_errors;
  DEF_CAN_FIRE_uart_errors = (tUInt8)1u;
  PORT_RDY_uart_errors = DEF_CAN_FIRE_uart_errors;
  return PORT_RDY_uart_errors;
}


/* Reset routines */

void MOD_mkBRAMUARTTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_uart.reset_RST_N(ARG_rst_in);
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_jj_delay_count.reset_RST(ARG_rst_in);
  INST_jj_1_delay_count.reset_RST(ARG_rst_in);
  INST_fptr_w.reset_RST(ARG_rst_in);
  INST_fptr_r.reset_RST(ARG_rst_in);
  INST_featureRAM_error_r.reset_RST(ARG_rst_in);
  INST_featureBRAM_serverAdapter_s1.reset_RST(ARG_rst_in);
  INST_featureBRAM_serverAdapter_outDataCore.reset_RST(ARG_rst_in);
  INST_featureBRAM_serverAdapter_cnt.reset_RST(ARG_rst_in);
  INST_feature2.reset_RST(ARG_rst_in);
  INST_feature.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkBRAMUARTTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkBRAMUARTTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_feature.dump_state(indent + 2u);
  INST_feature2.dump_state(indent + 2u);
  INST_featureBRAM_memory.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_cnt.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_cnt_1.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_cnt_2.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_cnt_3.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_outDataCore.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_outData_deqCalled.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_outData_enqData.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_outData_outData.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_s1.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_s1_1.dump_state(indent + 2u);
  INST_featureBRAM_serverAdapter_writeWithResp.dump_state(indent + 2u);
  INST_featureRAM_error_r.dump_state(indent + 2u);
  INST_fptr_r.dump_state(indent + 2u);
  INST_fptr_w.dump_state(indent + 2u);
  INST_i.dump_state(indent + 2u);
  INST_jj_1_delay_count.dump_state(indent + 2u);
  INST_jj_delay_count.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
  INST_uart.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkBRAMUARTTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 66u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_d_init_np", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_d_init_np_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_init_l59c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_f_update_l59c25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l107c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l110c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l62c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l66c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l70c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l79c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l86c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l93c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l99c33", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_np", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_np_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h1840", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h1039", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "featureBRAM_serverAdapter_cnt_1_whas____d20", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "featureBRAM_serverAdapter_cnt_2_whas____d21", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "featureBRAM_serverAdapter_cnt_3_whas____d23", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "featureBRAM_serverAdapter_s1_0_BIT_0___d51", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "featureBRAM_serverAdapter_s1___d50", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_1_delay_count_read____d171", 7u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "jj_delay_count_read____d111", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h43183", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h43209", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h45861", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "val__h45857", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x2__h44052", 11u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x3__h43641", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h649", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_uart_pins_cts", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_uart_pins_rxd", 1u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_feature.dump_VCD_defs(num);
  num = INST_feature2.dump_VCD_defs(num);
  num = INST_featureBRAM_memory.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_cnt.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_cnt_1.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_cnt_2.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_cnt_3.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_outDataCore.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_outData_deqCalled.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_outData_enqData.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_outData_outData.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_s1.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_s1_1.dump_VCD_defs(num);
  num = INST_featureBRAM_serverAdapter_writeWithResp.dump_VCD_defs(num);
  num = INST_featureRAM_error_r.dump_VCD_defs(num);
  num = INST_fptr_r.dump_VCD_defs(num);
  num = INST_fptr_w.dump_VCD_defs(num);
  num = INST_i.dump_VCD_defs(num);
  num = INST_jj_1_delay_count.dump_VCD_defs(num);
  num = INST_jj_delay_count.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_uart.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkBRAMUARTTest::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBRAMUARTTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkBRAMUARTTest::vcd_defs(tVCDDumpType dt, MOD_mkBRAMUARTTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 7u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 11u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_d_init_np) != DEF_WILL_FIRE_RL_action_d_init_np)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_d_init_np, 1u);
	backing.DEF_WILL_FIRE_RL_action_d_init_np = DEF_WILL_FIRE_RL_action_d_init_np;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_d_init_np_1) != DEF_WILL_FIRE_RL_action_d_init_np_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_d_init_np_1, 1u);
	backing.DEF_WILL_FIRE_RL_action_d_init_np_1 = DEF_WILL_FIRE_RL_action_d_init_np_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_init_l59c25) != DEF_WILL_FIRE_RL_action_f_init_l59c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_init_l59c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_init_l59c25 = DEF_WILL_FIRE_RL_action_f_init_l59c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_f_update_l59c25) != DEF_WILL_FIRE_RL_action_f_update_l59c25)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_f_update_l59c25, 1u);
	backing.DEF_WILL_FIRE_RL_action_f_update_l59c25 = DEF_WILL_FIRE_RL_action_f_update_l59c25;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l107c33) != DEF_WILL_FIRE_RL_action_l107c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l107c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l107c33 = DEF_WILL_FIRE_RL_action_l107c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l110c33) != DEF_WILL_FIRE_RL_action_l110c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l110c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l110c33 = DEF_WILL_FIRE_RL_action_l110c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l62c33) != DEF_WILL_FIRE_RL_action_l62c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l62c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l62c33 = DEF_WILL_FIRE_RL_action_l62c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l66c33) != DEF_WILL_FIRE_RL_action_l66c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l66c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l66c33 = DEF_WILL_FIRE_RL_action_l66c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l70c33) != DEF_WILL_FIRE_RL_action_l70c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l70c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l70c33 = DEF_WILL_FIRE_RL_action_l70c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l79c33) != DEF_WILL_FIRE_RL_action_l79c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l79c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l79c33 = DEF_WILL_FIRE_RL_action_l79c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l86c33) != DEF_WILL_FIRE_RL_action_l86c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l86c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l86c33 = DEF_WILL_FIRE_RL_action_l86c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l93c33) != DEF_WILL_FIRE_RL_action_l93c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l93c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l93c33 = DEF_WILL_FIRE_RL_action_l93c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l99c33) != DEF_WILL_FIRE_RL_action_l99c33)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l99c33, 1u);
	backing.DEF_WILL_FIRE_RL_action_l99c33 = DEF_WILL_FIRE_RL_action_l99c33;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_np) != DEF_WILL_FIRE_RL_action_np)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_np, 1u);
	backing.DEF_WILL_FIRE_RL_action_np = DEF_WILL_FIRE_RL_action_np;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_np_1) != DEF_WILL_FIRE_RL_action_np_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_np_1, 1u);
	backing.DEF_WILL_FIRE_RL_action_np_1 = DEF_WILL_FIRE_RL_action_np_1;
      }
      ++num;
      if ((backing.DEF__read__h1840) != DEF__read__h1840)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h1840, 32u);
	backing.DEF__read__h1840 = DEF__read__h1840;
      }
      ++num;
      if ((backing.DEF_b__h1039) != DEF_b__h1039)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h1039, 3u);
	backing.DEF_b__h1039 = DEF_b__h1039;
      }
      ++num;
      if ((backing.DEF_featureBRAM_serverAdapter_cnt_1_whas____d20) != DEF_featureBRAM_serverAdapter_cnt_1_whas____d20)
      {
	vcd_write_val(sim_hdl, num, DEF_featureBRAM_serverAdapter_cnt_1_whas____d20, 1u);
	backing.DEF_featureBRAM_serverAdapter_cnt_1_whas____d20 = DEF_featureBRAM_serverAdapter_cnt_1_whas____d20;
      }
      ++num;
      if ((backing.DEF_featureBRAM_serverAdapter_cnt_2_whas____d21) != DEF_featureBRAM_serverAdapter_cnt_2_whas____d21)
      {
	vcd_write_val(sim_hdl, num, DEF_featureBRAM_serverAdapter_cnt_2_whas____d21, 1u);
	backing.DEF_featureBRAM_serverAdapter_cnt_2_whas____d21 = DEF_featureBRAM_serverAdapter_cnt_2_whas____d21;
      }
      ++num;
      if ((backing.DEF_featureBRAM_serverAdapter_cnt_3_whas____d23) != DEF_featureBRAM_serverAdapter_cnt_3_whas____d23)
      {
	vcd_write_val(sim_hdl, num, DEF_featureBRAM_serverAdapter_cnt_3_whas____d23, 1u);
	backing.DEF_featureBRAM_serverAdapter_cnt_3_whas____d23 = DEF_featureBRAM_serverAdapter_cnt_3_whas____d23;
      }
      ++num;
      if ((backing.DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51) != DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51)
      {
	vcd_write_val(sim_hdl, num, DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51, 1u);
	backing.DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51 = DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51;
      }
      ++num;
      if ((backing.DEF_featureBRAM_serverAdapter_s1___d50) != DEF_featureBRAM_serverAdapter_s1___d50)
      {
	vcd_write_val(sim_hdl, num, DEF_featureBRAM_serverAdapter_s1___d50, 2u);
	backing.DEF_featureBRAM_serverAdapter_s1___d50 = DEF_featureBRAM_serverAdapter_s1___d50;
      }
      ++num;
      if ((backing.DEF_jj_1_delay_count_read____d171) != DEF_jj_1_delay_count_read____d171)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_1_delay_count_read____d171, 7u);
	backing.DEF_jj_1_delay_count_read____d171 = DEF_jj_1_delay_count_read____d171;
      }
      ++num;
      if ((backing.DEF_jj_delay_count_read____d111) != DEF_jj_delay_count_read____d111)
      {
	vcd_write_val(sim_hdl, num, DEF_jj_delay_count_read____d111, 10u);
	backing.DEF_jj_delay_count_read____d111 = DEF_jj_delay_count_read____d111;
      }
      ++num;
      if ((backing.DEF_v__h43183) != DEF_v__h43183)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h43183, 8u);
	backing.DEF_v__h43183 = DEF_v__h43183;
      }
      ++num;
      if ((backing.DEF_v__h43209) != DEF_v__h43209)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h43209, 64u);
	backing.DEF_v__h43209 = DEF_v__h43209;
      }
      ++num;
      if ((backing.DEF_v__h45861) != DEF_v__h45861)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h45861, 64u);
	backing.DEF_v__h45861 = DEF_v__h45861;
      }
      ++num;
      if ((backing.DEF_val__h45857) != DEF_val__h45857)
      {
	vcd_write_val(sim_hdl, num, DEF_val__h45857, 16u);
	backing.DEF_val__h45857 = DEF_val__h45857;
      }
      ++num;
      if ((backing.DEF_x2__h44052) != DEF_x2__h44052)
      {
	vcd_write_val(sim_hdl, num, DEF_x2__h44052, 11u);
	backing.DEF_x2__h44052 = DEF_x2__h44052;
      }
      ++num;
      if ((backing.DEF_x3__h43641) != DEF_x3__h43641)
      {
	vcd_write_val(sim_hdl, num, DEF_x3__h43641, 16u);
	backing.DEF_x3__h43641 = DEF_x3__h43641;
      }
      ++num;
      if ((backing.DEF_x__h649) != DEF_x__h649)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h649, 16u);
	backing.DEF_x__h649 = DEF_x__h649;
      }
      ++num;
      if ((backing.PORT_RDY_uart_pins_cts) != PORT_RDY_uart_pins_cts)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_uart_pins_cts, 1u);
	backing.PORT_RDY_uart_pins_cts = PORT_RDY_uart_pins_cts;
      }
      ++num;
      if ((backing.PORT_RDY_uart_pins_rxd) != PORT_RDY_uart_pins_rxd)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_uart_pins_rxd, 1u);
	backing.PORT_RDY_uart_pins_rxd = PORT_RDY_uart_pins_rxd;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_d_init_np, 1u);
      backing.DEF_WILL_FIRE_RL_action_d_init_np = DEF_WILL_FIRE_RL_action_d_init_np;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_d_init_np_1, 1u);
      backing.DEF_WILL_FIRE_RL_action_d_init_np_1 = DEF_WILL_FIRE_RL_action_d_init_np_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_init_l59c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_init_l59c25 = DEF_WILL_FIRE_RL_action_f_init_l59c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_f_update_l59c25, 1u);
      backing.DEF_WILL_FIRE_RL_action_f_update_l59c25 = DEF_WILL_FIRE_RL_action_f_update_l59c25;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l107c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l107c33 = DEF_WILL_FIRE_RL_action_l107c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l110c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l110c33 = DEF_WILL_FIRE_RL_action_l110c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l62c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l62c33 = DEF_WILL_FIRE_RL_action_l62c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l66c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l66c33 = DEF_WILL_FIRE_RL_action_l66c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l70c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l70c33 = DEF_WILL_FIRE_RL_action_l70c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l79c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l79c33 = DEF_WILL_FIRE_RL_action_l79c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l86c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l86c33 = DEF_WILL_FIRE_RL_action_l86c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l93c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l93c33 = DEF_WILL_FIRE_RL_action_l93c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l99c33, 1u);
      backing.DEF_WILL_FIRE_RL_action_l99c33 = DEF_WILL_FIRE_RL_action_l99c33;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_np, 1u);
      backing.DEF_WILL_FIRE_RL_action_np = DEF_WILL_FIRE_RL_action_np;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_np_1, 1u);
      backing.DEF_WILL_FIRE_RL_action_np_1 = DEF_WILL_FIRE_RL_action_np_1;
      vcd_write_val(sim_hdl, num++, DEF__read__h1840, 32u);
      backing.DEF__read__h1840 = DEF__read__h1840;
      vcd_write_val(sim_hdl, num++, DEF_b__h1039, 3u);
      backing.DEF_b__h1039 = DEF_b__h1039;
      vcd_write_val(sim_hdl, num++, DEF_featureBRAM_serverAdapter_cnt_1_whas____d20, 1u);
      backing.DEF_featureBRAM_serverAdapter_cnt_1_whas____d20 = DEF_featureBRAM_serverAdapter_cnt_1_whas____d20;
      vcd_write_val(sim_hdl, num++, DEF_featureBRAM_serverAdapter_cnt_2_whas____d21, 1u);
      backing.DEF_featureBRAM_serverAdapter_cnt_2_whas____d21 = DEF_featureBRAM_serverAdapter_cnt_2_whas____d21;
      vcd_write_val(sim_hdl, num++, DEF_featureBRAM_serverAdapter_cnt_3_whas____d23, 1u);
      backing.DEF_featureBRAM_serverAdapter_cnt_3_whas____d23 = DEF_featureBRAM_serverAdapter_cnt_3_whas____d23;
      vcd_write_val(sim_hdl, num++, DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51, 1u);
      backing.DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51 = DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51;
      vcd_write_val(sim_hdl, num++, DEF_featureBRAM_serverAdapter_s1___d50, 2u);
      backing.DEF_featureBRAM_serverAdapter_s1___d50 = DEF_featureBRAM_serverAdapter_s1___d50;
      vcd_write_val(sim_hdl, num++, DEF_jj_1_delay_count_read____d171, 7u);
      backing.DEF_jj_1_delay_count_read____d171 = DEF_jj_1_delay_count_read____d171;
      vcd_write_val(sim_hdl, num++, DEF_jj_delay_count_read____d111, 10u);
      backing.DEF_jj_delay_count_read____d111 = DEF_jj_delay_count_read____d111;
      vcd_write_val(sim_hdl, num++, DEF_v__h43183, 8u);
      backing.DEF_v__h43183 = DEF_v__h43183;
      vcd_write_val(sim_hdl, num++, DEF_v__h43209, 64u);
      backing.DEF_v__h43209 = DEF_v__h43209;
      vcd_write_val(sim_hdl, num++, DEF_v__h45861, 64u);
      backing.DEF_v__h45861 = DEF_v__h45861;
      vcd_write_val(sim_hdl, num++, DEF_val__h45857, 16u);
      backing.DEF_val__h45857 = DEF_val__h45857;
      vcd_write_val(sim_hdl, num++, DEF_x2__h44052, 11u);
      backing.DEF_x2__h44052 = DEF_x2__h44052;
      vcd_write_val(sim_hdl, num++, DEF_x3__h43641, 16u);
      backing.DEF_x3__h43641 = DEF_x3__h43641;
      vcd_write_val(sim_hdl, num++, DEF_x__h649, 16u);
      backing.DEF_x__h649 = DEF_x__h649;
      vcd_write_val(sim_hdl, num++, PORT_RDY_uart_pins_cts, 1u);
      backing.PORT_RDY_uart_pins_cts = PORT_RDY_uart_pins_cts;
      vcd_write_val(sim_hdl, num++, PORT_RDY_uart_pins_rxd, 1u);
      backing.PORT_RDY_uart_pins_rxd = PORT_RDY_uart_pins_rxd;
    }
}

void MOD_mkBRAMUARTTest::vcd_prims(tVCDDumpType dt, MOD_mkBRAMUARTTest &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_feature.dump_VCD(dt, backing.INST_feature);
  INST_feature2.dump_VCD(dt, backing.INST_feature2);
  INST_featureBRAM_memory.dump_VCD(dt, backing.INST_featureBRAM_memory);
  INST_featureBRAM_serverAdapter_cnt.dump_VCD(dt, backing.INST_featureBRAM_serverAdapter_cnt);
  INST_featureBRAM_serverAdapter_cnt_1.dump_VCD(dt, backing.INST_featureBRAM_serverAdapter_cnt_1);
  INST_featureBRAM_serverAdapter_cnt_2.dump_VCD(dt, backing.INST_featureBRAM_serverAdapter_cnt_2);
  INST_featureBRAM_serverAdapter_cnt_3.dump_VCD(dt, backing.INST_featureBRAM_serverAdapter_cnt_3);
  INST_featureBRAM_serverAdapter_outDataCore.dump_VCD(dt,
						      backing.INST_featureBRAM_serverAdapter_outDataCore);
  INST_featureBRAM_serverAdapter_outData_deqCalled.dump_VCD(dt,
							    backing.INST_featureBRAM_serverAdapter_outData_deqCalled);
  INST_featureBRAM_serverAdapter_outData_enqData.dump_VCD(dt,
							  backing.INST_featureBRAM_serverAdapter_outData_enqData);
  INST_featureBRAM_serverAdapter_outData_outData.dump_VCD(dt,
							  backing.INST_featureBRAM_serverAdapter_outData_outData);
  INST_featureBRAM_serverAdapter_s1.dump_VCD(dt, backing.INST_featureBRAM_serverAdapter_s1);
  INST_featureBRAM_serverAdapter_s1_1.dump_VCD(dt, backing.INST_featureBRAM_serverAdapter_s1_1);
  INST_featureBRAM_serverAdapter_writeWithResp.dump_VCD(dt,
							backing.INST_featureBRAM_serverAdapter_writeWithResp);
  INST_featureRAM_error_r.dump_VCD(dt, backing.INST_featureRAM_error_r);
  INST_fptr_r.dump_VCD(dt, backing.INST_fptr_r);
  INST_fptr_w.dump_VCD(dt, backing.INST_fptr_w);
  INST_i.dump_VCD(dt, backing.INST_i);
  INST_jj_1_delay_count.dump_VCD(dt, backing.INST_jj_1_delay_count);
  INST_jj_delay_count.dump_VCD(dt, backing.INST_jj_delay_count);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}

void MOD_mkBRAMUARTTest::vcd_submodules(tVCDDumpType dt,
					unsigned int levels,
					MOD_mkBRAMUARTTest &backing)
{
  INST_uart.dump_VCD(dt, levels, backing.INST_uart);
}
