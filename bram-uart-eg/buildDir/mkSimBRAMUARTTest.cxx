/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Oct 10 17:03:19 EDT 2017
 * 
 */
#include "bluesim_primitives.h"
#include "mkSimBRAMUARTTest.h"


/* String declarations */
static std::string const __str_literal_3("\t", 1u);
static std::string const __str_literal_5("\n", 1u);
static std::string const __str_literal_1("     %m.", 8u);
static std::string const __str_literal_4("'h%h", 4u);
static std::string const __str_literal_8("Error: \"BRAMUARTTest.bsv\", line 137, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_transrecFSM_action_l137c17]\n  and [RL_transrecFSM_action_l141c17, RL_transrecFSM_action_l144c17,\n  RL_transrecFSM_action_l148c9, RL_transrecFSM_action_l152c9] ) fired in the\n  same clock cycle.\n",
					 299u);
static std::string const __str_literal_9("Error: \"BRAMUARTTest.bsv\", line 141, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_transrecFSM_action_l141c17]\n  and [RL_transrecFSM_action_l144c17, RL_transrecFSM_action_l148c9,\n  RL_transrecFSM_action_l152c9] ) fired in the same clock cycle.\n",
					 266u);
static std::string const __str_literal_10("Error: \"BRAMUARTTest.bsv\", line 144, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_transrecFSM_action_l144c17]\n  and [RL_transrecFSM_action_l148c9, RL_transrecFSM_action_l152c9] ) fired in\n  the same clock cycle.\n",
					  235u);
static std::string const __str_literal_11("Error: \"BRAMUARTTest.bsv\", line 148, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_transrecFSM_action_l148c9]\n  and [RL_transrecFSM_action_l152c9] ) fired in the same clock cycle.\n",
					  201u);
static std::string const __str_literal_7("testing mismatches in features (UART ERROR)", 43u);
static std::string const __str_literal_6("testing uart received feature", 29u);
static std::string const __str_literal_2("testing uart transmitted feature", 32u);


/* Constructor */
MOD_mkSimBRAMUARTTest::MOD_mkSimBRAMUARTTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cnt(simHdl, "cnt", this, 32u, 0u, (tUInt8)0u),
    INST_dut(simHdl, "dut", this, 1146u),
    INST_transrecFSM_abort(simHdl, "transrecFSM_abort", this, 1u, (tUInt8)0u),
    INST_transrecFSM_start_reg(simHdl, "transrecFSM_start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_transrecFSM_start_reg_1(simHdl, "transrecFSM_start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_transrecFSM_start_reg_2(simHdl, "transrecFSM_start_reg_2", this, 1u, (tUInt8)0u),
    INST_transrecFSM_start_wire(simHdl, "transrecFSM_start_wire", this, 1u, (tUInt8)0u),
    INST_transrecFSM_state_can_overlap(simHdl,
				       "transrecFSM_state_can_overlap",
				       this,
				       1u,
				       (tUInt8)1u,
				       (tUInt8)0u),
    INST_transrecFSM_state_fired(simHdl, "transrecFSM_state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_transrecFSM_state_fired_1(simHdl, "transrecFSM_state_fired_1", this, 1u, (tUInt8)0u),
    INST_transrecFSM_state_mkFSMstate(simHdl,
				      "transrecFSM_state_mkFSMstate",
				      this,
				      3u,
				      (tUInt8)0u,
				      (tUInt8)0u),
    INST_transrecFSM_state_overlap_pw(simHdl, "transrecFSM_state_overlap_pw", this, 0u),
    INST_transrecFSM_state_set_pw(simHdl, "transrecFSM_state_set_pw", this, 0u),
    INST_uart(simHdl, "uart", this, 1146u),
    INST_x(simHdl, "x", this, 16u, 0u, (tUInt8)0u),
    INST_x_rec(simHdl, "x_rec", this, 16u, 43690u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h11385(12297829382473034410llu),
    DEF_v__h10905(12297829382473034410llu)
{
  symbol_count = 41u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkSimBRAMUARTTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[4u], "b__h11712", SYM_DEF, &DEF_b__h11712, 32u);
  init_symbol(&symbols[5u], "cnt", SYM_MODULE, &INST_cnt);
  init_symbol(&symbols[6u], "dut", SYM_MODULE, &INST_dut);
  init_symbol(&symbols[7u], "RL_check", SYM_RULE);
  init_symbol(&symbols[8u], "RL_pin_connection", SYM_RULE);
  init_symbol(&symbols[9u], "RL_startit", SYM_RULE);
  init_symbol(&symbols[10u], "RL_transrecFSM_action_l137c17", SYM_RULE);
  init_symbol(&symbols[11u], "RL_transrecFSM_action_l141c17", SYM_RULE);
  init_symbol(&symbols[12u], "RL_transrecFSM_action_l144c17", SYM_RULE);
  init_symbol(&symbols[13u], "RL_transrecFSM_action_l148c9", SYM_RULE);
  init_symbol(&symbols[14u], "RL_transrecFSM_action_l152c9", SYM_RULE);
  init_symbol(&symbols[15u], "RL_transrecFSM_fsm_start", SYM_RULE);
  init_symbol(&symbols[16u], "RL_transrecFSM_idle_l136c9", SYM_RULE);
  init_symbol(&symbols[17u], "RL_transrecFSM_restart", SYM_RULE);
  init_symbol(&symbols[18u], "RL_transrecFSM_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[19u], "RL_transrecFSM_state_every", SYM_RULE);
  init_symbol(&symbols[20u], "RL_transrecFSM_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[21u], "RL_transrecFSM_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[22u], "transrecFSM_abort", SYM_MODULE, &INST_transrecFSM_abort);
  init_symbol(&symbols[23u], "transrecFSM_start_reg", SYM_MODULE, &INST_transrecFSM_start_reg);
  init_symbol(&symbols[24u], "transrecFSM_start_reg_1", SYM_MODULE, &INST_transrecFSM_start_reg_1);
  init_symbol(&symbols[25u], "transrecFSM_start_reg_2", SYM_MODULE, &INST_transrecFSM_start_reg_2);
  init_symbol(&symbols[26u], "transrecFSM_start_wire", SYM_MODULE, &INST_transrecFSM_start_wire);
  init_symbol(&symbols[27u],
	      "transrecFSM_state_can_overlap",
	      SYM_MODULE,
	      &INST_transrecFSM_state_can_overlap);
  init_symbol(&symbols[28u], "transrecFSM_state_fired", SYM_MODULE, &INST_transrecFSM_state_fired);
  init_symbol(&symbols[29u],
	      "transrecFSM_state_fired_1",
	      SYM_MODULE,
	      &INST_transrecFSM_state_fired_1);
  init_symbol(&symbols[30u],
	      "transrecFSM_state_mkFSMstate",
	      SYM_MODULE,
	      &INST_transrecFSM_state_mkFSMstate);
  init_symbol(&symbols[31u],
	      "transrecFSM_state_overlap_pw",
	      SYM_MODULE,
	      &INST_transrecFSM_state_overlap_pw);
  init_symbol(&symbols[32u], "transrecFSM_state_set_pw", SYM_MODULE, &INST_transrecFSM_state_set_pw);
  init_symbol(&symbols[33u], "uart", SYM_MODULE, &INST_uart);
  init_symbol(&symbols[34u],
	      "WILL_FIRE_RL_transrecFSM_action_l137c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_transrecFSM_action_l137c17,
	      1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_transrecFSM_action_l141c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_transrecFSM_action_l141c17,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_transrecFSM_action_l144c17",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_transrecFSM_action_l144c17,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_transrecFSM_action_l148c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_transrecFSM_action_l148c9,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_transrecFSM_action_l152c9",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_transrecFSM_action_l152c9,
	      1u);
  init_symbol(&symbols[39u], "x", SYM_MODULE, &INST_x);
  init_symbol(&symbols[40u], "x_rec", SYM_MODULE, &INST_x_rec);
}


/* Rule actions */

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_start_reg__dreg_update()
{
  tUInt8 DEF_transrecFSM_start_reg_2_whas_AND_transrecFSM_s_ETC___d3;
  DEF_transrecFSM_start_reg_2_whas_AND_transrecFSM_s_ETC___d3 = INST_transrecFSM_start_reg_2.METH_whas() && INST_transrecFSM_start_reg_2.METH_wget();
  INST_transrecFSM_start_reg_1.METH_write(DEF_transrecFSM_start_reg_2_whas_AND_transrecFSM_s_ETC___d3);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_state_handle_abort()
{
  INST_transrecFSM_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_state_fired__dreg_update()
{
  tUInt8 DEF_transrecFSM_state_fired_1_whas__3_AND_transrec_ETC___d15;
  DEF_transrecFSM_state_fired_1_whas__3_AND_transrec_ETC___d15 = INST_transrecFSM_state_fired_1.METH_whas() && INST_transrecFSM_state_fired_1.METH_wget();
  INST_transrecFSM_state_fired.METH_write(DEF_transrecFSM_state_fired_1_whas__3_AND_transrec_ETC___d15);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_state_every()
{
  tUInt8 DEF_transrecFSM_state_set_pw_whas__6_OR_NOT_transr_ETC___d21;
  tUInt8 DEF_transrecFSM_state_can_overlap__h2079;
  DEF_transrecFSM_state_can_overlap__h2079 = INST_transrecFSM_state_can_overlap.METH_read();
  DEF_transrecFSM_state_set_pw_whas__6_OR_NOT_transr_ETC___d21 = INST_transrecFSM_state_set_pw.METH_whas() || (!INST_transrecFSM_state_overlap_pw.METH_whas() && DEF_transrecFSM_state_can_overlap__h2079);
  INST_transrecFSM_state_can_overlap.METH_write(DEF_transrecFSM_state_set_pw_whas__6_OR_NOT_transr_ETC___d21);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_restart()
{
  INST_transrecFSM_start_wire.METH_wset((tUInt8)1u);
  INST_transrecFSM_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_action_l137c17()
{
  tUInt32 DEF_x__h10407;
  DEF_val__h10901 = INST_x.METH_read();
  DEF_x__h10407 = 65535u & ((((tUInt32)((tUInt8)1u)) << 15u) | (tUInt32)(32767u & (65535u & (DEF_val__h10901 + 2u))));
  INST_transrecFSM_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_transrecFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_transrecFSM_state_set_pw.METH_wset();
  INST_x.METH_write(DEF_x__h10407);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_action_l141c17()
{
  tUInt8 DEF_i__h10627;
  DEF_val__h10901 = INST_x.METH_read();
  DEF_i__h10627 = (tUInt8)(DEF_val__h10901 >> 8u);
  INST_transrecFSM_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_transrecFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_transrecFSM_state_set_pw.METH_wset();
  INST_uart.METH_tx(DEF_i__h10627);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_action_l144c17()
{
  tUInt8 DEF_i__h10861;
  DEF_val__h10901 = INST_x.METH_read();
  DEF_i__h10861 = (tUInt8)((tUInt8)255u & DEF_val__h10901);
  INST_transrecFSM_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_transrecFSM_state_set_pw.METH_wset();
  INST_transrecFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_uart.METH_tx(DEF_i__h10861);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h10905 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl,
		 this,
		 "64,s,s,s",
		 DEF_v__h10905,
		 &__str_literal_1,
		 &__str_literal_2,
		 &__str_literal_3);
    dollar_write(sim_hdl, this, "s,16", &__str_literal_4, DEF_val__h10901);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
  }
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_action_l148c9()
{
  tUInt32 DEF_x__h11149;
  tUInt8 DEF_AVMeth_uart_rx;
  INST_transrecFSM_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_transrecFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_transrecFSM_state_set_pw.METH_wset();
  DEF_AVMeth_uart_rx = INST_uart.METH_rx();
  DEF_v__h11359 = DEF_AVMeth_uart_rx;
  DEF_x__h11149 = 65535u & ((((tUInt32)(DEF_v__h11359)) << 8u) | (tUInt32)((tUInt8)0u));
  INST_x_rec.METH_write(DEF_x__h11149);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_action_l152c9()
{
  tUInt32 DEF_xtmp__h11371;
  tUInt8 DEF_x_rec_BITS_15_TO_8___h11433;
  tUInt8 DEF_AVMeth_uart_rx;
  DEF__read__h280 = INST_x_rec.METH_read();
  DEF_x_rec_BITS_15_TO_8___h11433 = (tUInt8)(DEF__read__h280 >> 8u);
  INST_transrecFSM_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_transrecFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_transrecFSM_state_set_pw.METH_wset();
  DEF_AVMeth_uart_rx = INST_uart.METH_rx();
  DEF_v__h11359 = DEF_AVMeth_uart_rx;
  DEF_xtmp__h11371 = 65535u & ((((tUInt32)(DEF_x_rec_BITS_15_TO_8___h11433)) << 8u) | (tUInt32)(DEF_v__h11359));
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h11385 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl,
		 this,
		 "64,s,s,s",
		 DEF_v__h11385,
		 &__str_literal_1,
		 &__str_literal_6,
		 &__str_literal_3);
    dollar_write(sim_hdl, this, "s,16", &__str_literal_4, DEF_xtmp__h11371);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
  }
  INST_x_rec.METH_write(DEF_xtmp__h11371);
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_idle_l136c9()
{
  INST_transrecFSM_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_transrecFSM_state_fired_1.METH_wset((tUInt8)1u);
  INST_transrecFSM_state_set_pw.METH_wset();
}

void MOD_mkSimBRAMUARTTest::RL_transrecFSM_fsm_start()
{
  INST_transrecFSM_start_wire.METH_wset((tUInt8)1u);
  INST_transrecFSM_start_reg_2.METH_wset((tUInt8)1u);
  INST_transrecFSM_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkSimBRAMUARTTest::RL_startit()
{
  tUInt32 DEF_cnt_3_PLUS_1___d76;
  DEF_b__h11712 = INST_cnt.METH_read();
  DEF_cnt_3_PLUS_1___d76 = DEF_b__h11712 + 1u;
  INST_transrecFSM_start_reg.METH_write((tUInt8)1u);
  INST_cnt.METH_write(DEF_cnt_3_PLUS_1___d76);
}

void MOD_mkSimBRAMUARTTest::RL_check()
{
  tUInt8 DEF_NOT_x_7_PLUS_1_7_EQ_x_rec_1_8___d79;
  DEF__read__h280 = INST_x_rec.METH_read();
  DEF_val__h10901 = INST_x.METH_read();
  DEF_NOT_x_7_PLUS_1_7_EQ_x_rec_1_8___d79 = !((65535u & (DEF_val__h10901 + 1u)) == DEF__read__h280);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_x_7_PLUS_1_7_EQ_x_rec_1_8___d79)
      dollar_display(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkSimBRAMUARTTest::RL_pin_connection()
{
  tUInt8 DEF_cts__h11877;
  tUInt8 DEF_rxd__h11820;
  tUInt8 DEF_rxd__h11785;
  tUInt8 DEF_cts__h11853;
  DEF_cts__h11853 = INST_dut.METH_uart_pins_rts();
  DEF_rxd__h11785 = INST_dut.METH_uart_pins_txd();
  DEF_rxd__h11820 = INST_uart.METH_pins_txd();
  DEF_cts__h11877 = INST_uart.METH_pins_rts();
  INST_uart.METH_pins_rxd(DEF_rxd__h11785);
  INST_dut.METH_uart_pins_rxd(DEF_rxd__h11820);
  INST_uart.METH_pins_cts(DEF_cts__h11853);
  INST_dut.METH_uart_pins_cts(DEF_cts__h11877);
}

void MOD_mkSimBRAMUARTTest::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_transrecFSM_action_l137c17 && (((DEF_WILL_FIRE_RL_transrecFSM_action_l141c17 || DEF_WILL_FIRE_RL_transrecFSM_action_l144c17) || DEF_WILL_FIRE_RL_transrecFSM_action_l148c9) || DEF_WILL_FIRE_RL_transrecFSM_action_l152c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkSimBRAMUARTTest::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_transrecFSM_action_l141c17 && ((DEF_WILL_FIRE_RL_transrecFSM_action_l144c17 || DEF_WILL_FIRE_RL_transrecFSM_action_l148c9) || DEF_WILL_FIRE_RL_transrecFSM_action_l152c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkSimBRAMUARTTest::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_transrecFSM_action_l144c17 && (DEF_WILL_FIRE_RL_transrecFSM_action_l148c9 || DEF_WILL_FIRE_RL_transrecFSM_action_l152c9))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkSimBRAMUARTTest::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_transrecFSM_action_l148c9 && DEF_WILL_FIRE_RL_transrecFSM_action_l152c9)
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}


/* Methods */


/* Reset routines */

void MOD_mkSimBRAMUARTTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_x_rec.reset_RST(ARG_rst_in);
  INST_x.reset_RST(ARG_rst_in);
  INST_uart.reset_RST_N(ARG_rst_in);
  INST_transrecFSM_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_transrecFSM_state_fired.reset_RST(ARG_rst_in);
  INST_transrecFSM_state_can_overlap.reset_RST(ARG_rst_in);
  INST_transrecFSM_start_reg_1.reset_RST(ARG_rst_in);
  INST_transrecFSM_start_reg.reset_RST(ARG_rst_in);
  INST_dut.reset_RST_N(ARG_rst_in);
  INST_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkSimBRAMUARTTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkSimBRAMUARTTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cnt.dump_state(indent + 2u);
  INST_dut.dump_state(indent + 2u);
  INST_transrecFSM_abort.dump_state(indent + 2u);
  INST_transrecFSM_start_reg.dump_state(indent + 2u);
  INST_transrecFSM_start_reg_1.dump_state(indent + 2u);
  INST_transrecFSM_start_reg_2.dump_state(indent + 2u);
  INST_transrecFSM_start_wire.dump_state(indent + 2u);
  INST_transrecFSM_state_can_overlap.dump_state(indent + 2u);
  INST_transrecFSM_state_fired.dump_state(indent + 2u);
  INST_transrecFSM_state_fired_1.dump_state(indent + 2u);
  INST_transrecFSM_state_mkFSMstate.dump_state(indent + 2u);
  INST_transrecFSM_state_overlap_pw.dump_state(indent + 2u);
  INST_transrecFSM_state_set_pw.dump_state(indent + 2u);
  INST_uart.dump_state(indent + 2u);
  INST_x.dump_state(indent + 2u);
  INST_x_rec.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkSimBRAMUARTTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 26u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_transrecFSM_action_l137c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_transrecFSM_action_l141c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_transrecFSM_action_l144c17", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_transrecFSM_action_l148c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_transrecFSM_action_l152c9", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h280", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h11712", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h10905", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h11359", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h11385", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "val__h10901", 16u);
  num = INST_cnt.dump_VCD_defs(num);
  num = INST_transrecFSM_abort.dump_VCD_defs(num);
  num = INST_transrecFSM_start_reg.dump_VCD_defs(num);
  num = INST_transrecFSM_start_reg_1.dump_VCD_defs(num);
  num = INST_transrecFSM_start_reg_2.dump_VCD_defs(num);
  num = INST_transrecFSM_start_wire.dump_VCD_defs(num);
  num = INST_transrecFSM_state_can_overlap.dump_VCD_defs(num);
  num = INST_transrecFSM_state_fired.dump_VCD_defs(num);
  num = INST_transrecFSM_state_fired_1.dump_VCD_defs(num);
  num = INST_transrecFSM_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_transrecFSM_state_overlap_pw.dump_VCD_defs(num);
  num = INST_transrecFSM_state_set_pw.dump_VCD_defs(num);
  num = INST_x.dump_VCD_defs(num);
  num = INST_x_rec.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_dut.dump_VCD_defs(l);
    num = INST_uart.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkSimBRAMUARTTest::dump_VCD(tVCDDumpType dt,
				     unsigned int levels,
				     MOD_mkSimBRAMUARTTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkSimBRAMUARTTest::vcd_defs(tVCDDumpType dt, MOD_mkSimBRAMUARTTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_transrecFSM_action_l137c17) != DEF_WILL_FIRE_RL_transrecFSM_action_l137c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_transrecFSM_action_l137c17, 1u);
	backing.DEF_WILL_FIRE_RL_transrecFSM_action_l137c17 = DEF_WILL_FIRE_RL_transrecFSM_action_l137c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_transrecFSM_action_l141c17) != DEF_WILL_FIRE_RL_transrecFSM_action_l141c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_transrecFSM_action_l141c17, 1u);
	backing.DEF_WILL_FIRE_RL_transrecFSM_action_l141c17 = DEF_WILL_FIRE_RL_transrecFSM_action_l141c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_transrecFSM_action_l144c17) != DEF_WILL_FIRE_RL_transrecFSM_action_l144c17)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_transrecFSM_action_l144c17, 1u);
	backing.DEF_WILL_FIRE_RL_transrecFSM_action_l144c17 = DEF_WILL_FIRE_RL_transrecFSM_action_l144c17;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_transrecFSM_action_l148c9) != DEF_WILL_FIRE_RL_transrecFSM_action_l148c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_transrecFSM_action_l148c9, 1u);
	backing.DEF_WILL_FIRE_RL_transrecFSM_action_l148c9 = DEF_WILL_FIRE_RL_transrecFSM_action_l148c9;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_transrecFSM_action_l152c9) != DEF_WILL_FIRE_RL_transrecFSM_action_l152c9)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_transrecFSM_action_l152c9, 1u);
	backing.DEF_WILL_FIRE_RL_transrecFSM_action_l152c9 = DEF_WILL_FIRE_RL_transrecFSM_action_l152c9;
      }
      ++num;
      if ((backing.DEF__read__h280) != DEF__read__h280)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h280, 16u);
	backing.DEF__read__h280 = DEF__read__h280;
      }
      ++num;
      if ((backing.DEF_b__h11712) != DEF_b__h11712)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h11712, 32u);
	backing.DEF_b__h11712 = DEF_b__h11712;
      }
      ++num;
      if ((backing.DEF_v__h10905) != DEF_v__h10905)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h10905, 64u);
	backing.DEF_v__h10905 = DEF_v__h10905;
      }
      ++num;
      if ((backing.DEF_v__h11359) != DEF_v__h11359)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h11359, 8u);
	backing.DEF_v__h11359 = DEF_v__h11359;
      }
      ++num;
      if ((backing.DEF_v__h11385) != DEF_v__h11385)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h11385, 64u);
	backing.DEF_v__h11385 = DEF_v__h11385;
      }
      ++num;
      if ((backing.DEF_val__h10901) != DEF_val__h10901)
      {
	vcd_write_val(sim_hdl, num, DEF_val__h10901, 16u);
	backing.DEF_val__h10901 = DEF_val__h10901;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_transrecFSM_action_l137c17, 1u);
      backing.DEF_WILL_FIRE_RL_transrecFSM_action_l137c17 = DEF_WILL_FIRE_RL_transrecFSM_action_l137c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_transrecFSM_action_l141c17, 1u);
      backing.DEF_WILL_FIRE_RL_transrecFSM_action_l141c17 = DEF_WILL_FIRE_RL_transrecFSM_action_l141c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_transrecFSM_action_l144c17, 1u);
      backing.DEF_WILL_FIRE_RL_transrecFSM_action_l144c17 = DEF_WILL_FIRE_RL_transrecFSM_action_l144c17;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_transrecFSM_action_l148c9, 1u);
      backing.DEF_WILL_FIRE_RL_transrecFSM_action_l148c9 = DEF_WILL_FIRE_RL_transrecFSM_action_l148c9;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_transrecFSM_action_l152c9, 1u);
      backing.DEF_WILL_FIRE_RL_transrecFSM_action_l152c9 = DEF_WILL_FIRE_RL_transrecFSM_action_l152c9;
      vcd_write_val(sim_hdl, num++, DEF__read__h280, 16u);
      backing.DEF__read__h280 = DEF__read__h280;
      vcd_write_val(sim_hdl, num++, DEF_b__h11712, 32u);
      backing.DEF_b__h11712 = DEF_b__h11712;
      vcd_write_val(sim_hdl, num++, DEF_v__h10905, 64u);
      backing.DEF_v__h10905 = DEF_v__h10905;
      vcd_write_val(sim_hdl, num++, DEF_v__h11359, 8u);
      backing.DEF_v__h11359 = DEF_v__h11359;
      vcd_write_val(sim_hdl, num++, DEF_v__h11385, 64u);
      backing.DEF_v__h11385 = DEF_v__h11385;
      vcd_write_val(sim_hdl, num++, DEF_val__h10901, 16u);
      backing.DEF_val__h10901 = DEF_val__h10901;
    }
}

void MOD_mkSimBRAMUARTTest::vcd_prims(tVCDDumpType dt, MOD_mkSimBRAMUARTTest &backing)
{
  INST_cnt.dump_VCD(dt, backing.INST_cnt);
  INST_transrecFSM_abort.dump_VCD(dt, backing.INST_transrecFSM_abort);
  INST_transrecFSM_start_reg.dump_VCD(dt, backing.INST_transrecFSM_start_reg);
  INST_transrecFSM_start_reg_1.dump_VCD(dt, backing.INST_transrecFSM_start_reg_1);
  INST_transrecFSM_start_reg_2.dump_VCD(dt, backing.INST_transrecFSM_start_reg_2);
  INST_transrecFSM_start_wire.dump_VCD(dt, backing.INST_transrecFSM_start_wire);
  INST_transrecFSM_state_can_overlap.dump_VCD(dt, backing.INST_transrecFSM_state_can_overlap);
  INST_transrecFSM_state_fired.dump_VCD(dt, backing.INST_transrecFSM_state_fired);
  INST_transrecFSM_state_fired_1.dump_VCD(dt, backing.INST_transrecFSM_state_fired_1);
  INST_transrecFSM_state_mkFSMstate.dump_VCD(dt, backing.INST_transrecFSM_state_mkFSMstate);
  INST_transrecFSM_state_overlap_pw.dump_VCD(dt, backing.INST_transrecFSM_state_overlap_pw);
  INST_transrecFSM_state_set_pw.dump_VCD(dt, backing.INST_transrecFSM_state_set_pw);
  INST_x.dump_VCD(dt, backing.INST_x);
  INST_x_rec.dump_VCD(dt, backing.INST_x_rec);
}

void MOD_mkSimBRAMUARTTest::vcd_submodules(tVCDDumpType dt,
					   unsigned int levels,
					   MOD_mkSimBRAMUARTTest &backing)
{
  INST_dut.dump_VCD(dt, levels, backing.INST_dut);
  INST_uart.dump_VCD(dt, levels, backing.INST_uart);
}
