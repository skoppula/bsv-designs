/*
 * Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
 * 
 * On Tue Oct 10 17:03:19 EDT 2017
 * 
 */

/* Generation options: */
#ifndef __mkBRAMUARTTest_h__
#define __mkBRAMUARTTest_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkUARTSpec.h"


/* Class declaration for the mkBRAMUARTTest module */
class MOD_mkBRAMUARTTest : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt32> INST_feature;
  MOD_Reg<tUInt32> INST_feature2;
  MOD_BRAM<tUInt32,tUInt32,tUInt8> INST_featureBRAM_memory;
  MOD_Reg<tUInt8> INST_featureBRAM_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_featureBRAM_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_featureBRAM_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_featureBRAM_serverAdapter_cnt_3;
  MOD_Fifo<tUInt32> INST_featureBRAM_serverAdapter_outDataCore;
  MOD_Wire<tUInt8> INST_featureBRAM_serverAdapter_outData_deqCalled;
  MOD_Wire<tUInt32> INST_featureBRAM_serverAdapter_outData_enqData;
  MOD_Wire<tUInt32> INST_featureBRAM_serverAdapter_outData_outData;
  MOD_Reg<tUInt8> INST_featureBRAM_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_featureBRAM_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_featureBRAM_serverAdapter_writeWithResp;
  MOD_Reg<tUInt8> INST_featureRAM_error_r;
  MOD_Reg<tUInt32> INST_fptr_r;
  MOD_Reg<tUInt32> INST_fptr_w;
  MOD_Reg<tUInt32> INST_i;
  MOD_ConfigReg<tUInt8> INST_jj_1_delay_count;
  MOD_ConfigReg<tUInt32> INST_jj_delay_count;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
  MOD_mkUARTSpec INST_uart;
 
 /* Constructor */
 public:
  MOD_mkBRAMUARTTest(tSimStateHdl simHdl, char const *name, Module *parent, tUInt32 ARG_cfg);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt32 PORT_cfg;
  tUInt8 PORT_RDY_uart_pins_rxd;
  tUInt8 PORT_RDY_uart_pins_cts;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_action_f_update_l59c25;
  tUInt8 DEF_WILL_FIRE_RL_action_np_1;
  tUInt8 DEF_WILL_FIRE_RL_action_d_init_np_1;
  tUInt8 DEF_WILL_FIRE_RL_action_l110c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l107c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l99c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l93c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l86c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l79c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l70c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l66c33;
  tUInt8 DEF_WILL_FIRE_RL_action_l62c33;
  tUInt8 DEF_WILL_FIRE_RL_action_np;
  tUInt8 DEF_WILL_FIRE_RL_action_d_init_np;
  tUInt8 DEF_WILL_FIRE_RL_action_f_init_l59c25;
  tUInt32 DEF__read__h1840;
  tUInt32 DEF_jj_delay_count_read____d111;
  tUInt8 DEF_jj_1_delay_count_read____d171;
  tUInt8 DEF_b__h1039;
  tUInt8 DEF_featureBRAM_serverAdapter_s1___d50;
  tUInt8 DEF_featureBRAM_serverAdapter_cnt_3_whas____d23;
  tUInt8 DEF_featureBRAM_serverAdapter_cnt_2_whas____d21;
  tUInt8 DEF_featureBRAM_serverAdapter_cnt_1_whas____d20;
  tUInt8 DEF_featureBRAM_serverAdapter_s1_0_BIT_0___d51;
 
 /* Local definitions */
 private:
  tUInt64 DEF_v__h45861;
  tUInt64 DEF_v__h43209;
  tUInt8 DEF_v__h43183;
  tUInt32 DEF_x__h649;
  tUInt32 DEF_val__h45857;
  tUInt32 DEF_x3__h43641;
  tUInt32 DEF_x2__h44052;
 
 /* Rules */
 public:
  void RL_featureBRAM_serverAdapter_outData_setFirstCore();
  void RL_featureBRAM_serverAdapter_outData_setFirstEnq();
  void RL_featureBRAM_serverAdapter_outData_enqOnly();
  void RL_featureBRAM_serverAdapter_outData_deqOnly();
  void RL_featureBRAM_serverAdapter_outData_enqAndDeq();
  void RL_featureBRAM_serverAdapter_cnt_finalAdd();
  void RL_featureBRAM_serverAdapter_s1__dreg_update();
  void RL_featureBRAM_serverAdapter_stageReadResponseAlways();
  void RL_featureBRAM_serverAdapter_moveToOutFIFO();
  void RL_featureBRAM_serverAdapter_overRun();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_f_init_l59c25();
  void RL_action_d_init_np();
  void RL_action_np();
  void RL_action_l62c33();
  void RL_action_l66c33();
  void RL_action_l70c33();
  void RL_action_l79c33();
  void RL_action_l86c33();
  void RL_action_l93c33();
  void RL_action_l99c33();
  void RL_action_l107c33();
  void RL_action_l110c33();
  void RL_action_d_init_np_1();
  void RL_action_np_1();
  void RL_action_f_update_l59c25();
  void RL_idle_l59c25();
  void RL_idle_l59c25_1();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_15();
  void __me_check_16();
  void __me_check_17();
  void __me_check_18();
  void __me_check_19();
  void __me_check_20();
  void __me_check_21();
  void __me_check_22();
  void __me_check_23();
  void __me_check_24();
  void __me_check_25();
  void __me_check_26();
  void __me_check_27();
  void __me_check_28();
 
 /* Methods */
 public:
  tUInt8 METH_uart_pins_txd();
  tUInt8 METH_RDY_uart_pins_txd();
  void METH_uart_pins_rxd(tUInt8 ARG_uart_pins_rxd);
  tUInt8 METH_RDY_uart_pins_rxd();
  tUInt8 METH_uart_pins_rts();
  tUInt8 METH_RDY_uart_pins_rts();
  void METH_uart_pins_cts(tUInt8 ARG_uart_pins_cts);
  tUInt8 METH_RDY_uart_pins_cts();
  tUInt8 METH_featureRAM_error();
  tUInt8 METH_RDY_featureRAM_error();
  tUInt8 METH_uart_errors();
  tUInt8 METH_RDY_uart_errors();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBRAMUARTTest &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkBRAMUARTTest &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkBRAMUARTTest &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkBRAMUARTTest &backing);
};

#endif /* ifndef __mkBRAMUARTTest_h__ */
