//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Mon Nov 27 13:02:12 EST 2017
//
//
// Ports:
// Name                         I/O  size props
// uart_pins_txd                  O     1
// uart_pins_rts                  O     1
// uart_errors                    O     3 reg
// test_error                     O     1 reg
// RDY_test_error                 O     1 const
// cfg                            I    19
// CLK                            I     1 clock
// RST_N                          I     1 reset
// uart_pins_rxd                  I     1
// uart_pins_cts                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTbPEOnBoard(cfg,
		     CLK,
		     RST_N,

		     uart_pins_txd,

		     uart_pins_rxd,

		     uart_pins_rts,

		     uart_pins_cts,

		     uart_errors,

		     test_error,
		     RDY_test_error);
  input  [18 : 0] cfg;
  input  CLK;
  input  RST_N;

  // value method uart_pins_txd
  output uart_pins_txd;

  // action method uart_pins_rxd
  input  uart_pins_rxd;

  // value method uart_pins_rts
  output uart_pins_rts;

  // action method uart_pins_cts
  input  uart_pins_cts;

  // value method uart_errors
  output [2 : 0] uart_errors;

  // value method test_error
  output test_error;
  output RDY_test_error;

  // signals for module outputs
  wire [2 : 0] uart_errors;
  wire RDY_test_error, test_error, uart_pins_rts, uart_pins_txd;

  // register cycle1
  reg [31 : 0] cycle1;
  wire [31 : 0] cycle1$D_IN;
  wire cycle1$EN;

  // register cycle2
  reg [31 : 0] cycle2;
  wire [31 : 0] cycle2$D_IN;
  wire cycle2$EN;

  // register cycle3
  reg [31 : 0] cycle3;
  wire [31 : 0] cycle3$D_IN;
  wire cycle3$EN;

  // register pe1_neg_partial_sum
  reg [47 : 0] pe1_neg_partial_sum;
  wire [47 : 0] pe1_neg_partial_sum$D_IN;
  wire pe1_neg_partial_sum$EN;

  // register pe1_pos_partial_sum
  reg [47 : 0] pe1_pos_partial_sum;
  wire [47 : 0] pe1_pos_partial_sum$D_IN;
  wire pe1_pos_partial_sum$EN;

  // register pe1_step
  reg [3 : 0] pe1_step;
  wire [3 : 0] pe1_step$D_IN;
  wire pe1_step$EN;

  // register pe1_weight_regs_0
  reg [1 : 0] pe1_weight_regs_0;
  wire [1 : 0] pe1_weight_regs_0$D_IN;
  wire pe1_weight_regs_0$EN;

  // register pe1_weight_regs_1
  reg [1 : 0] pe1_weight_regs_1;
  wire [1 : 0] pe1_weight_regs_1$D_IN;
  wire pe1_weight_regs_1$EN;

  // register pe1_weight_regs_2
  reg [1 : 0] pe1_weight_regs_2;
  wire [1 : 0] pe1_weight_regs_2$D_IN;
  wire pe1_weight_regs_2$EN;

  // register pe1_weight_regs_3
  reg [1 : 0] pe1_weight_regs_3;
  wire [1 : 0] pe1_weight_regs_3$D_IN;
  wire pe1_weight_regs_3$EN;

  // register pe1_weight_regs_4
  reg [1 : 0] pe1_weight_regs_4;
  wire [1 : 0] pe1_weight_regs_4$D_IN;
  wire pe1_weight_regs_4$EN;

  // register pe1_weight_regs_5
  reg [1 : 0] pe1_weight_regs_5;
  wire [1 : 0] pe1_weight_regs_5$D_IN;
  wire pe1_weight_regs_5$EN;

  // register pe1_weight_regs_6
  reg [1 : 0] pe1_weight_regs_6;
  wire [1 : 0] pe1_weight_regs_6$D_IN;
  wire pe1_weight_regs_6$EN;

  // register pe1_weight_regs_7
  reg [1 : 0] pe1_weight_regs_7;
  wire [1 : 0] pe1_weight_regs_7$D_IN;
  wire pe1_weight_regs_7$EN;

  // register pe2_neg_partial_sum
  reg [47 : 0] pe2_neg_partial_sum;
  wire [47 : 0] pe2_neg_partial_sum$D_IN;
  wire pe2_neg_partial_sum$EN;

  // register pe2_pos_partial_sum
  reg [47 : 0] pe2_pos_partial_sum;
  wire [47 : 0] pe2_pos_partial_sum$D_IN;
  wire pe2_pos_partial_sum$EN;

  // register pe2_step
  reg [3 : 0] pe2_step;
  wire [3 : 0] pe2_step$D_IN;
  wire pe2_step$EN;

  // register pe2_weight_regs_0
  reg [1 : 0] pe2_weight_regs_0;
  wire [1 : 0] pe2_weight_regs_0$D_IN;
  wire pe2_weight_regs_0$EN;

  // register pe2_weight_regs_1
  reg [1 : 0] pe2_weight_regs_1;
  wire [1 : 0] pe2_weight_regs_1$D_IN;
  wire pe2_weight_regs_1$EN;

  // register pe2_weight_regs_2
  reg [1 : 0] pe2_weight_regs_2;
  wire [1 : 0] pe2_weight_regs_2$D_IN;
  wire pe2_weight_regs_2$EN;

  // register pe2_weight_regs_3
  reg [1 : 0] pe2_weight_regs_3;
  wire [1 : 0] pe2_weight_regs_3$D_IN;
  wire pe2_weight_regs_3$EN;

  // register pe2_weight_regs_4
  reg [1 : 0] pe2_weight_regs_4;
  wire [1 : 0] pe2_weight_regs_4$D_IN;
  wire pe2_weight_regs_4$EN;

  // register pe2_weight_regs_5
  reg [1 : 0] pe2_weight_regs_5;
  wire [1 : 0] pe2_weight_regs_5$D_IN;
  wire pe2_weight_regs_5$EN;

  // register pe2_weight_regs_6
  reg [1 : 0] pe2_weight_regs_6;
  wire [1 : 0] pe2_weight_regs_6$D_IN;
  wire pe2_weight_regs_6$EN;

  // register pe2_weight_regs_7
  reg [1 : 0] pe2_weight_regs_7;
  wire [1 : 0] pe2_weight_regs_7$D_IN;
  wire pe2_weight_regs_7$EN;

  // register pe3_neg_partial_sum
  reg [47 : 0] pe3_neg_partial_sum;
  wire [47 : 0] pe3_neg_partial_sum$D_IN;
  wire pe3_neg_partial_sum$EN;

  // register pe3_pos_partial_sum
  reg [47 : 0] pe3_pos_partial_sum;
  wire [47 : 0] pe3_pos_partial_sum$D_IN;
  wire pe3_pos_partial_sum$EN;

  // register pe3_step
  reg [3 : 0] pe3_step;
  wire [3 : 0] pe3_step$D_IN;
  wire pe3_step$EN;

  // register pe3_weight_regs_0
  reg [1 : 0] pe3_weight_regs_0;
  wire [1 : 0] pe3_weight_regs_0$D_IN;
  wire pe3_weight_regs_0$EN;

  // register pe3_weight_regs_1
  reg [1 : 0] pe3_weight_regs_1;
  wire [1 : 0] pe3_weight_regs_1$D_IN;
  wire pe3_weight_regs_1$EN;

  // register pe3_weight_regs_2
  reg [1 : 0] pe3_weight_regs_2;
  wire [1 : 0] pe3_weight_regs_2$D_IN;
  wire pe3_weight_regs_2$EN;

  // register pe3_weight_regs_3
  reg [1 : 0] pe3_weight_regs_3;
  wire [1 : 0] pe3_weight_regs_3$D_IN;
  wire pe3_weight_regs_3$EN;

  // register pe3_weight_regs_4
  reg [1 : 0] pe3_weight_regs_4;
  wire [1 : 0] pe3_weight_regs_4$D_IN;
  wire pe3_weight_regs_4$EN;

  // register pe3_weight_regs_5
  reg [1 : 0] pe3_weight_regs_5;
  wire [1 : 0] pe3_weight_regs_5$D_IN;
  wire pe3_weight_regs_5$EN;

  // register pe3_weight_regs_6
  reg [1 : 0] pe3_weight_regs_6;
  wire [1 : 0] pe3_weight_regs_6$D_IN;
  wire pe3_weight_regs_6$EN;

  // register pe3_weight_regs_7
  reg [1 : 0] pe3_weight_regs_7;
  wire [1 : 0] pe3_weight_regs_7$D_IN;
  wire pe3_weight_regs_7$EN;

  // register psum
  reg [7 : 0] psum;
  wire [7 : 0] psum$D_IN;
  wire psum$EN;

  // register psum2
  reg [7 : 0] psum2;
  wire [7 : 0] psum2$D_IN;
  wire psum2$EN;

  // register test_error_reg
  reg test_error_reg;
  wire test_error_reg$D_IN, test_error_reg$EN;

  // ports of submodule uart
  wire [7 : 0] uart$tx_i;
  wire [2 : 0] uart$errors;
  wire uart$EN_clear,
       uart$EN_rx,
       uart$EN_tx,
       uart$pins_cts,
       uart$pins_rts,
       uart$pins_rxd,
       uart$pins_txd;

  // rule scheduling signals
  wire WILL_FIRE_RL_test_rw_weights;

  // remaining internal signals
  reg [5 : 0] CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1,
	      CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2,
	      fpart__h16975;
  reg [1 : 0] SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77,
	      SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70,
	      SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568,
	      SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31,
	      SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567,
	      SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478,
	      x__h10192,
	      x__h21897;
  wire [77 : 0] _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d274,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d277,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d285,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d294,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d341,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d344,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d352,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d361,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d370,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d199,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d202,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d210,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d219,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d228,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d408,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d411,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d419,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d428,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d437,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d280,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_pe1_po_ETC___d347,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d205,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_PLUS_I_ETC___d414,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d289,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d356,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d214,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_ETC___d423,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d223,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d298,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d365,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d432,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d232,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d307,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d374,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d441;
  wire [47 : 0] IF_cycle3_50_EQ_9_54_THEN_IF_pe3_pos_partial_s_ETC___d496,
		SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34,
		SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51,
		SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481,
		SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503,
		c__h21063,
		c__h9382,
		pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54,
		pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38,
		pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506,
		pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485,
		x__h21093,
		x__h26094,
		y__h10186,
		y__h12610,
		y__h21891,
		y__h24334;
  wire [38 : 0] digit__h17181,
		digit__h17239,
		digit__h17319,
		digit__h17399,
		digit__h17479,
		digit__h18251,
		digit__h18309,
		digit__h18389,
		digit__h18469,
		digit__h18549,
		digit__h18867,
		digit__h18925,
		digit__h19005,
		digit__h19085,
		digit__h19165,
		digit__h19483,
		digit__h19541,
		digit__h19621,
		digit__h19701,
		digit__h19781,
		tx7237_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q3,
		tx7317_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q4,
		tx7397_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q5,
		tx7477_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q6,
		tx8307_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q8,
		tx8387_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q9,
		tx8467_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q10,
		tx8547_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q11,
		tx8923_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13,
		tx9003_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14,
		tx9083_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15,
		tx9163_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16,
		tx9539_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q18,
		tx9619_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q19,
		tx9699_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q20,
		tx9779_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q21,
		tx__h17237,
		tx__h17317,
		tx__h17397,
		tx__h17477,
		tx__h18307,
		tx__h18387,
		tx__h18467,
		tx__h18547,
		tx__h18923,
		tx__h19003,
		tx__h19083,
		tx__h19163,
		tx__h19539,
		tx__h19619,
		tx__h19699,
		tx__h19779,
		y__h17367,
		y__h17447,
		y__h17527,
		y__h18437,
		y__h18517,
		y__h18597,
		y__h19053,
		y__h19133,
		y__h19213,
		y__h19669,
		y__h19749,
		y__h19829;
  wire [31 : 0] cycle2_52_MINUS_1___d566, x__h10193, x__h16987, x__h21898;
  wire [23 : 0] inp_se_f__h10190,
		inp_se_f__h21895,
		inp_se_i__h10189,
		inp_se_i__h21894;
  wire [15 : 0] IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d91,
		x__h15686;
  wire [9 : 0] IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d105,
	       x__h15539;
  wire [7 : 0] x__h15379, x__h15937, x__h15953, x__h15956, x__h16881;
  wire [5 : 0] IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d538,
	       fpart__h18074,
	       x__h17202,
	       x__h18272,
	       x__h18888,
	       x__h19504,
	       y_avValue_snd__h17145,
	       y_avValue_snd__h18215,
	       y_avValue_snd__h18831,
	       y_avValue_snd__h19447,
	       y_f__h16339;
  wire [2 : 0] SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242,
	       SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312,
	       SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170,
	       SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379;
  wire [1 : 0] IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d533,
	       IF_NOT_x5539_BIT_9_AND_x5539_BIT_7_OR_NOT_x553_ETC__q7,
	       _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75,
	       x5379_BITS_7_TO_6__q17,
	       x6881_BITS_7_TO_6__q12;
  wire NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168,
       NOT_cycle2_52_EQ_0_54_55_AND_cycle2_52_ULE_8_5_ETC___d572,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d177,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d183,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d191,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d252,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d258,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d266,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d320,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d326,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d334,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d387,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d393,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d401,
       cycle1_ULT_10___d5,
       cycle2_52_ULE_8___d556,
       cycle3_50_ULT_9___d453;

  // value method uart_pins_txd
  assign uart_pins_txd = uart$pins_txd ;

  // value method uart_pins_rts
  assign uart_pins_rts = uart$pins_rts ;

  // value method uart_errors
  assign uart_errors = uart$errors ;

  // value method test_error
  assign test_error = test_error_reg ;
  assign RDY_test_error = 1'd1 ;

  // submodule uart
  mkUARTSpec uart(.cfg(cfg),
		  .CLK(CLK),
		  .RST_N(RST_N),
		  .pins_cts(uart$pins_cts),
		  .pins_rxd(uart$pins_rxd),
		  .tx_i(uart$tx_i),
		  .EN_rx(uart$EN_rx),
		  .EN_tx(uart$EN_tx),
		  .EN_clear(uart$EN_clear),
		  .pins_txd(uart$pins_txd),
		  .pins_rts(uart$pins_rts),
		  .rx_first(),
		  .RDY_rx_first(),
		  .rx(),
		  .RDY_rx(),
		  .RDY_tx(),
		  .RDY_clear(),
		  .errors(uart$errors));

  // rule RL_test_rw_weights
  assign WILL_FIRE_RL_test_rw_weights = cycle2 < 32'd10 ;

  // register cycle1
  assign cycle1$D_IN = cycle1 + 32'd1 ;
  assign cycle1$EN = 1'd1 ;

  // register cycle2
  assign cycle2$D_IN = cycle2 + 32'd1 ;
  assign cycle2$EN = WILL_FIRE_RL_test_rw_weights ;

  // register cycle3
  assign cycle3$D_IN = cycle3 + 32'd1 ;
  assign cycle3$EN = 1'd1 ;

  // register pe1_neg_partial_sum
  assign pe1_neg_partial_sum$D_IN =
	     (!pe1_neg_partial_sum[47] &&
	      SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51[47] &&
	      pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54[47]) ?
	       48'h7FFFFFFFFFFF :
	       ((pe1_neg_partial_sum[47] &&
		 !SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51[47] &&
		 !pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54[47]) ?
		  48'h800000000000 :
		  pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54) ;
  assign pe1_neg_partial_sum$EN =
	     cycle1 != 32'd0 &&
	     (cycle1 == 32'd1 || cycle1_ULT_10___d5 && cycle1 < 32'd9) ;

  // register pe1_pos_partial_sum
  assign pe1_pos_partial_sum$D_IN =
	     (!pe1_pos_partial_sum[47] &&
	      !SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34[47] &&
	      pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38[47]) ?
	       48'h7FFFFFFFFFFF :
	       ((pe1_pos_partial_sum[47] &&
		 SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34[47] &&
		 !pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38[47]) ?
		  48'h800000000000 :
		  pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38) ;
  assign pe1_pos_partial_sum$EN =
	     cycle1 != 32'd0 &&
	     (cycle1 == 32'd1 || cycle1_ULT_10___d5 && cycle1 < 32'd9) ;

  // register pe1_step
  assign pe1_step$D_IN = pe1_step + 4'd1 ;
  assign pe1_step$EN =
	     cycle1 != 32'd0 &&
	     (cycle1 == 32'd1 || cycle1_ULT_10___d5 && cycle1 < 32'd9) ;

  // register pe1_weight_regs_0
  assign pe1_weight_regs_0$D_IN = 2'd1 ;
  assign pe1_weight_regs_0$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_1
  assign pe1_weight_regs_1$D_IN = 2'd1 ;
  assign pe1_weight_regs_1$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_2
  assign pe1_weight_regs_2$D_IN = 2'd2 ;
  assign pe1_weight_regs_2$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_3
  assign pe1_weight_regs_3$D_IN = 2'd0 ;
  assign pe1_weight_regs_3$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_4
  assign pe1_weight_regs_4$D_IN = 2'd1 ;
  assign pe1_weight_regs_4$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_5
  assign pe1_weight_regs_5$D_IN = 2'd2 ;
  assign pe1_weight_regs_5$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_6
  assign pe1_weight_regs_6$D_IN = 2'd0 ;
  assign pe1_weight_regs_6$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_7
  assign pe1_weight_regs_7$D_IN = 2'd1 ;
  assign pe1_weight_regs_7$EN = cycle1 == 32'd0 ;

  // register pe2_neg_partial_sum
  assign pe2_neg_partial_sum$D_IN = 48'h0 ;
  assign pe2_neg_partial_sum$EN = 1'b0 ;

  // register pe2_pos_partial_sum
  assign pe2_pos_partial_sum$D_IN = 48'h0 ;
  assign pe2_pos_partial_sum$EN = 1'b0 ;

  // register pe2_step
  assign pe2_step$D_IN = 4'h0 ;
  assign pe2_step$EN = 1'b0 ;

  // register pe2_weight_regs_0
  assign pe2_weight_regs_0$D_IN = 2'd1 ;
  assign pe2_weight_regs_0$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_1
  assign pe2_weight_regs_1$D_IN = 2'd1 ;
  assign pe2_weight_regs_1$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_2
  assign pe2_weight_regs_2$D_IN = 2'd2 ;
  assign pe2_weight_regs_2$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_3
  assign pe2_weight_regs_3$D_IN = 2'd0 ;
  assign pe2_weight_regs_3$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_4
  assign pe2_weight_regs_4$D_IN = 2'd1 ;
  assign pe2_weight_regs_4$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_5
  assign pe2_weight_regs_5$D_IN = 2'd2 ;
  assign pe2_weight_regs_5$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_6
  assign pe2_weight_regs_6$D_IN = 2'd0 ;
  assign pe2_weight_regs_6$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_7
  assign pe2_weight_regs_7$D_IN = 2'd1 ;
  assign pe2_weight_regs_7$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe3_neg_partial_sum
  assign pe3_neg_partial_sum$D_IN =
	     (!pe3_neg_partial_sum[47] &&
	      SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503[47] &&
	      pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506[47]) ?
	       48'h7FFFFFFFFFFF :
	       ((pe3_neg_partial_sum[47] &&
		 !SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503[47] &&
		 !pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506[47]) ?
		  48'h800000000000 :
		  pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506) ;
  assign pe3_neg_partial_sum$EN = cycle3 != 32'd0 && cycle3_50_ULT_9___d453 ;

  // register pe3_pos_partial_sum
  assign pe3_pos_partial_sum$D_IN =
	     cycle3_50_ULT_9___d453 ?
	       x__h21093 :
	       IF_cycle3_50_EQ_9_54_THEN_IF_pe3_pos_partial_s_ETC___d496 ;
  assign pe3_pos_partial_sum$EN =
	     cycle3 != 32'd0 &&
	     (cycle3_50_ULT_9___d453 || cycle3 == 32'd9 || cycle3 == 32'd10) ;

  // register pe3_step
  assign pe3_step$D_IN = pe3_step + 4'd1 ;
  assign pe3_step$EN = cycle3 != 32'd0 && cycle3_50_ULT_9___d453 ;

  // register pe3_weight_regs_0
  assign pe3_weight_regs_0$D_IN = 2'd1 ;
  assign pe3_weight_regs_0$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_1
  assign pe3_weight_regs_1$D_IN = 2'd1 ;
  assign pe3_weight_regs_1$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_2
  assign pe3_weight_regs_2$D_IN = 2'd2 ;
  assign pe3_weight_regs_2$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_3
  assign pe3_weight_regs_3$D_IN = 2'd0 ;
  assign pe3_weight_regs_3$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_4
  assign pe3_weight_regs_4$D_IN = 2'd1 ;
  assign pe3_weight_regs_4$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_5
  assign pe3_weight_regs_5$D_IN = 2'd2 ;
  assign pe3_weight_regs_5$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_6
  assign pe3_weight_regs_6$D_IN = 2'd0 ;
  assign pe3_weight_regs_6$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_7
  assign pe3_weight_regs_7$D_IN = 2'd1 ;
  assign pe3_weight_regs_7$EN = cycle3 == 32'd0 ;

  // register psum
  assign psum$D_IN = x__h15379 ;
  assign psum$EN = cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 ;

  // register psum2
  assign psum2$D_IN = 8'h0 ;
  assign psum2$EN = 1'b0 ;

  // register test_error_reg
  assign test_error_reg$D_IN = 1'b0 ;
  assign test_error_reg$EN = 1'b0 ;

  // submodule uart
  assign uart$pins_cts = uart_pins_cts ;
  assign uart$pins_rxd = uart_pins_rxd ;
  assign uart$tx_i = 8'h0 ;
  assign uart$EN_rx = 1'b0 ;
  assign uart$EN_tx = 1'b0 ;
  assign uart$EN_clear = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d105 =
	     x__h15686[15:6] + { 4'd0, y_f__h16339 } ;
  assign IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d91 =
	     x__h15937 * x__h15956 ;
  assign IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d533 =
	     (!pe3_pos_partial_sum[47] &&
	      (pe3_pos_partial_sum[25] ||
	       pe3_pos_partial_sum[47:26] != 22'd0)) ?
	       2'd1 :
	       ((pe3_pos_partial_sum[47] &&
		 (!pe3_pos_partial_sum[25] ||
		  ~pe3_pos_partial_sum[47:26] != 22'd0)) ?
		  2'd2 :
		  pe3_pos_partial_sum[25:24]) ;
  assign IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d538 =
	     (!pe3_pos_partial_sum[47] &&
	      (pe3_pos_partial_sum[25] ||
	       pe3_pos_partial_sum[47:26] != 22'd0)) ?
	       6'd63 :
	       ((pe3_pos_partial_sum[47] &&
		 (!pe3_pos_partial_sum[25] ||
		  ~pe3_pos_partial_sum[47:26] != 22'd0)) ?
		  6'd0 :
		  pe3_pos_partial_sum[23:18]) ;
  assign IF_NOT_x5539_BIT_9_AND_x5539_BIT_7_OR_NOT_x553_ETC__q7 =
	     (!x__h15539[9] && (x__h15539[7] || x__h15539[9:8] != 2'd0)) ?
	       2'd1 :
	       ((x__h15539[9] && (!x__h15539[7] || ~x__h15539[9:8] != 2'd0)) ?
		  2'd2 :
		  x__h15539[7:6]) ;
  assign IF_cycle3_50_EQ_9_54_THEN_IF_pe3_pos_partial_s_ETC___d496 =
	     (cycle3 == 32'd9) ?
	       (pe3_pos_partial_sum[47] ? 48'd0 : pe3_pos_partial_sum) :
	       x__h26094 ;
  assign NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168 =
	     cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) ;
  assign NOT_cycle2_52_EQ_0_54_55_AND_cycle2_52_ULE_8_5_ETC___d572 =
	     cycle2 != 32'd0 && cycle2_52_ULE_8___d556 &&
	     SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 !=
	     SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d177 =
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     fpart__h16975 != 6'd0 &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170 ==
	     3'd7 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d183 =
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170[2] &&
	     fpart__h16975 != 6'd0 &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170 !=
	     3'd7 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d191 =
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     (!SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170[2] ||
	      fpart__h16975 == 6'd0) ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d252 =
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     fpart__h18074 != 6'd0 &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242 ==
	     3'd7 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d258 =
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242[2] &&
	     fpart__h18074 != 6'd0 &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242 !=
	     3'd7 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d266 =
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     (!SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242[2] ||
	      fpart__h18074 == 6'd0) ;
  assign SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242 =
	     { IF_NOT_x5539_BIT_9_AND_x5539_BIT_7_OR_NOT_x553_ETC__q7[1],
	       IF_NOT_x5539_BIT_9_AND_x5539_BIT_7_OR_NOT_x553_ETC__q7 } ;
  assign SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312 =
	     { x6881_BITS_7_TO_6__q12[1], x6881_BITS_7_TO_6__q12 } ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34 =
	     c__h9382 & y__h10186 ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51 =
	     c__h9382 & y__h12610 ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170 =
	     { SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77[1],
	       SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77 } ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481 =
	     c__h21063 & y__h21891 ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503 =
	     c__h21063 & y__h24334 ;
  assign SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379 =
	     { x5379_BITS_7_TO_6__q17[1], x5379_BITS_7_TO_6__q17 } ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d274 =
	     { 33'd0, x__h18272 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d277 =
	     { 33'd0, x__h18272 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d285 =
	     { 33'd0, x__h18272 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d294 =
	     { 33'd0, x__h18272 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303 =
	     { 33'd0, x__h18272 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d341 =
	     { 33'd0, x__h18888 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d344 =
	     { 33'd0, x__h18888 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d352 =
	     { 33'd0, x__h18888 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d361 =
	     { 33'd0, x__h18888 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d370 =
	     { 33'd0, x__h18888 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d199 =
	     { 33'd0, x__h17202 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d202 =
	     { 33'd0, x__h17202 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d210 =
	     { 33'd0, x__h17202 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d219 =
	     { 33'd0, x__h17202 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d228 =
	     { 33'd0, x__h17202 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d408 =
	     { 33'd0, x__h19504 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d411 =
	     { 33'd0, x__h19504 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d419 =
	     { 33'd0, x__h19504 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d428 =
	     { 33'd0, x__h19504 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d437 =
	     { 33'd0, x__h19504 } * 39'd100000 ;
  assign _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75 =
	     { 1'd0, SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70[0] } +
	     {2{SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70[1]}} ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d280 =
	     39'd10 * digit__h18251 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_pe1_po_ETC___d347 =
	     39'd10 * digit__h18867 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d205 =
	     39'd10 * digit__h17181 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_PLUS_I_ETC___d414 =
	     39'd10 * digit__h19483 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d289 =
	     39'd10 * y__h18437 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d356 =
	     39'd10 * y__h19053 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d214 =
	     39'd10 * y__h17367 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_ETC___d423 =
	     39'd10 * y__h19669 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d223 =
	     39'd10 * y__h17447 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d298 =
	     39'd10 * y__h18517 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d365 =
	     39'd10 * y__h19133 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d432 =
	     39'd10 * y__h19749 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d232 =
	     39'd10 * y__h17527 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d307 =
	     39'd10 * y__h18597 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d374 =
	     39'd10 * y__h19213 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d441 =
	     39'd10 * y__h19829 ;
  assign c__h21063 = { inp_se_i__h21894, inp_se_f__h21895 } ;
  assign c__h9382 = { inp_se_i__h10189, inp_se_f__h10190 } ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d320 =
	     cycle1_ULT_10___d5 &&
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     x__h16881[5:0] != 6'd0 &&
	     SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312 ==
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d326 =
	     cycle1_ULT_10___d5 &&
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312[2] &&
	     x__h16881[5:0] != 6'd0 &&
	     SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312 !=
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d334 =
	     cycle1_ULT_10___d5 &&
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     (!SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312[2] ||
	      x__h16881[5:0] == 6'd0) ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d387 =
	     cycle1_ULT_10___d5 &&
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     x__h15379[5:0] != 6'd0 &&
	     SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379 ==
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d393 =
	     cycle1_ULT_10___d5 &&
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379[2] &&
	     x__h15379[5:0] != 6'd0 &&
	     SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379 !=
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d401 =
	     cycle1_ULT_10___d5 &&
	     (x__h15379[7:6] != x__h16881[7:6] ||
	      x__h15379[5:0] != x__h16881[5:0]) &&
	     (!SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379[2] ||
	      x__h15379[5:0] == 6'd0) ;
  assign cycle1_ULT_10___d5 = cycle1 < 32'd10 ;
  assign cycle2_52_MINUS_1___d566 = cycle2 - 32'd1 ;
  assign cycle2_52_ULE_8___d556 = cycle2 <= 32'd8 ;
  assign cycle3_50_ULT_9___d453 = cycle3 < 32'd9 ;
  assign digit__h17181 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d199[9:6] } ;
  assign digit__h17239 =
	     { 35'd0,
	       tx7237_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q3[3:0] } ;
  assign digit__h17319 =
	     { 35'd0,
	       tx7317_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q4[3:0] } ;
  assign digit__h17399 =
	     { 35'd0,
	       tx7397_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q5[3:0] } ;
  assign digit__h17479 =
	     { 35'd0,
	       tx7477_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q6[3:0] } ;
  assign digit__h18251 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d274[9:6] } ;
  assign digit__h18309 =
	     { 35'd0,
	       tx8307_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q8[3:0] } ;
  assign digit__h18389 =
	     { 35'd0,
	       tx8387_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q9[3:0] } ;
  assign digit__h18469 =
	     { 35'd0,
	       tx8467_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q10[3:0] } ;
  assign digit__h18549 =
	     { 35'd0,
	       tx8547_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q11[3:0] } ;
  assign digit__h18867 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d341[9:6] } ;
  assign digit__h18925 =
	     { 35'd0,
	       tx8923_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13[3:0] } ;
  assign digit__h19005 =
	     { 35'd0,
	       tx9003_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14[3:0] } ;
  assign digit__h19085 =
	     { 35'd0,
	       tx9083_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15[3:0] } ;
  assign digit__h19165 =
	     { 35'd0,
	       tx9163_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16[3:0] } ;
  assign digit__h19483 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d408[9:6] } ;
  assign digit__h19541 =
	     { 35'd0,
	       tx9539_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q18[3:0] } ;
  assign digit__h19621 =
	     { 35'd0,
	       tx9619_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q19[3:0] } ;
  assign digit__h19701 =
	     { 35'd0,
	       tx9699_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q20[3:0] } ;
  assign digit__h19781 =
	     { 35'd0,
	       tx9779_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q21[3:0] } ;
  assign fpart__h18074 =
	     (!x__h15539[9] && (x__h15539[7] || x__h15539[9:8] != 2'd0)) ?
	       6'd63 :
	       ((x__h15539[9] && (!x__h15539[7] || ~x__h15539[9:8] != 2'd0)) ?
		  6'd0 :
		  x__h15539[5:0]) ;
  assign inp_se_f__h10190 =
	     { CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1,
	       18'd0 } ;
  assign inp_se_f__h21895 =
	     { CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2,
	       18'd0 } ;
  assign inp_se_i__h10189 = { {22{x__h10192[1]}}, x__h10192 } ;
  assign inp_se_i__h21894 = { {22{x__h21897[1]}}, x__h21897 } ;
  assign pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54 =
	     pe1_neg_partial_sum -
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51 ;
  assign pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38 =
	     pe1_pos_partial_sum +
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34 ;
  assign pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506 =
	     pe3_neg_partial_sum -
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503 ;
  assign pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485 =
	     pe3_pos_partial_sum +
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481 ;
  assign tx7237_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q3 =
	     tx__h17237 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d205[38:0] ;
  assign tx7317_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q4 =
	     tx__h17317 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d214[38:0] ;
  assign tx7397_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q5 =
	     tx__h17397 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d223[38:0] ;
  assign tx7477_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q6 =
	     tx__h17477 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d232[38:0] ;
  assign tx8307_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q8 =
	     tx__h18307 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d280[38:0] ;
  assign tx8387_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q9 =
	     tx__h18387 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d289[38:0] ;
  assign tx8467_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q10 =
	     tx__h18467 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d298[38:0] ;
  assign tx8547_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q11 =
	     tx__h18547 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d307[38:0] ;
  assign tx8923_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13 =
	     tx__h18923 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_pe1_po_ETC___d347[38:0] ;
  assign tx9003_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14 =
	     tx__h19003 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d356[38:0] ;
  assign tx9083_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15 =
	     tx__h19083 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d365[38:0] ;
  assign tx9163_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16 =
	     tx__h19163 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d374[38:0] ;
  assign tx9539_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q18 =
	     tx__h19539 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_PLUS_I_ETC___d414[38:0] ;
  assign tx9619_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q19 =
	     tx__h19619 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_ETC___d423[38:0] ;
  assign tx9699_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q20 =
	     tx__h19699 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d432[38:0] ;
  assign tx9779_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q21 =
	     tx__h19779 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d441[38:0] ;
  assign tx__h17237 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d202[38:6] } ;
  assign tx__h17317 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d210[38:6] } ;
  assign tx__h17397 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d219[38:6] } ;
  assign tx__h17477 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d228[38:6] } ;
  assign tx__h18307 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d277[38:6] } ;
  assign tx__h18387 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d285[38:6] } ;
  assign tx__h18467 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d294[38:6] } ;
  assign tx__h18547 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303[38:6] } ;
  assign tx__h18923 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d344[38:6] } ;
  assign tx__h19003 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d352[38:6] } ;
  assign tx__h19083 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d361[38:6] } ;
  assign tx__h19163 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d370[38:6] } ;
  assign tx__h19539 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d411[38:6] } ;
  assign tx__h19619 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d419[38:6] } ;
  assign tx__h19699 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d428[38:6] } ;
  assign tx__h19779 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d437[38:6] } ;
  assign x5379_BITS_7_TO_6__q17 = x__h15379[7:6] ;
  assign x6881_BITS_7_TO_6__q12 = x__h16881[7:6] ;
  assign x__h10193 = cycle1 - 32'd1 ;
  assign x__h15379 =
	     psum +
	     ((!x__h15539[9] && (x__h15539[7] || x__h15539[9:8] != 2'd0)) ?
		8'd127 :
		((x__h15539[9] &&
		  (!x__h15539[7] || ~x__h15539[9:8] != 2'd0)) ?
		   8'd128 :
		   x__h15539[7:0])) ;
  assign x__h15539 =
	     (!x__h15686[15] &&
	      IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d105[9]) ?
	       10'd511 :
	       IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d105 ;
  assign x__h15686 =
	     (_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75[1] &&
	      !SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77[1] ||
	      SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77[1] &&
	      !_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75[1]) ?
	       -IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d91 :
	       IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d91 ;
  assign x__h15937 =
	     _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75[1] ?
	       -x__h15953 :
	       x__h15953 ;
  assign x__h15953 =
	     { _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75,
	       6'd0 } ;
  assign x__h15956 =
	     SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77[1] ?
	       -{ SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77,
		  fpart__h16975 } :
	       { SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77,
		 fpart__h16975 } ;
  assign x__h16881 =
	     ((!pe1_pos_partial_sum[47] &&
	       (pe1_pos_partial_sum[25] ||
		pe1_pos_partial_sum[47:26] != 22'd0)) ?
		8'd127 :
		((pe1_pos_partial_sum[47] &&
		  (!pe1_pos_partial_sum[25] ||
		   ~pe1_pos_partial_sum[47:26] != 22'd0)) ?
		   8'd128 :
		   pe1_pos_partial_sum[25:18])) +
	     ((!pe1_neg_partial_sum[47] &&
	       (pe1_neg_partial_sum[25] ||
		pe1_neg_partial_sum[47:26] != 22'd0)) ?
		8'd127 :
		((pe1_neg_partial_sum[47] &&
		  (!pe1_neg_partial_sum[25] ||
		   ~pe1_neg_partial_sum[47:26] != 22'd0)) ?
		   8'd128 :
		   pe1_neg_partial_sum[25:18])) ;
  assign x__h16987 = cycle1 - 32'd2 ;
  assign x__h17202 =
	     (SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170[2] &&
	      fpart__h16975 != 6'd0) ?
	       y_avValue_snd__h17145 :
	       fpart__h16975 ;
  assign x__h18272 =
	     (SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242[2] &&
	      fpart__h18074 != 6'd0) ?
	       y_avValue_snd__h18215 :
	       fpart__h18074 ;
  assign x__h18888 =
	     (SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312[2] &&
	      x__h16881[5:0] != 6'd0) ?
	       y_avValue_snd__h18831 :
	       x__h16881[5:0] ;
  assign x__h19504 =
	     (SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379[2] &&
	      x__h15379[5:0] != 6'd0) ?
	       y_avValue_snd__h19447 :
	       x__h15379[5:0] ;
  assign x__h21093 =
	     (!pe3_pos_partial_sum[47] &&
	      !SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481[47] &&
	      pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485[47]) ?
	       48'h7FFFFFFFFFFF :
	       ((pe3_pos_partial_sum[47] &&
		 SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481[47] &&
		 !pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485[47]) ?
		  48'h800000000000 :
		  pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485) ;
  assign x__h21898 = cycle3 - 32'd1 ;
  assign x__h26094 = pe3_pos_partial_sum + pe3_neg_partial_sum ;
  assign y__h10186 =
	     SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31[0] ?
	       48'hFFFFFFFFFFFF :
	       48'd0 ;
  assign y__h12610 =
	     SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31[1] ?
	       48'hFFFFFFFFFFFF :
	       48'd0 ;
  assign y__h17367 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d205[38:0] +
	     digit__h17239 ;
  assign y__h17447 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d214[38:0] +
	     digit__h17319 ;
  assign y__h17527 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d223[38:0] +
	     digit__h17399 ;
  assign y__h18437 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d280[38:0] +
	     digit__h18309 ;
  assign y__h18517 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d289[38:0] +
	     digit__h18389 ;
  assign y__h18597 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d298[38:0] +
	     digit__h18469 ;
  assign y__h19053 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_pe1_po_ETC___d347[38:0] +
	     digit__h18925 ;
  assign y__h19133 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d356[38:0] +
	     digit__h19005 ;
  assign y__h19213 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d365[38:0] +
	     digit__h19085 ;
  assign y__h19669 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_PLUS_I_ETC___d414[38:0] +
	     digit__h19541 ;
  assign y__h19749 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_ETC___d423[38:0] +
	     digit__h19621 ;
  assign y__h19829 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d432[38:0] +
	     digit__h19701 ;
  assign y__h21891 =
	     SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478[0] ?
	       48'hFFFFFFFFFFFF :
	       48'd0 ;
  assign y__h24334 =
	     SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478[1] ?
	       48'hFFFFFFFFFFFF :
	       48'd0 ;
  assign y_avValue_snd__h17145 = 6'd0 - fpart__h16975 ;
  assign y_avValue_snd__h18215 = 6'd0 - fpart__h18074 ;
  assign y_avValue_snd__h18831 = 6'd0 - x__h16881[5:0] ;
  assign y_avValue_snd__h19447 = 6'd0 - x__h15379[5:0] ;
  assign y_f__h16339 =
	     (x__h15686[5] && (x__h15686[15] || x__h15686[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  always@(x__h10193)
  begin
    case (x__h10193)
      32'd0: CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd32;
      32'd1: CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd48;
      32'd2: CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd16;
      32'd3: CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd58;
      32'd4: CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd44;
      32'd5, 32'd6, 32'd7:
	  CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd0;
      default: CASE_x0193_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h21898)
  begin
    case (x__h21898)
      32'd0: CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd32;
      32'd1: CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd48;
      32'd2: CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd16;
      32'd3: CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd58;
      32'd4: CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd44;
      32'd5, 32'd6, 32'd7:
	  CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd0;
      default: CASE_x1898_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h16987)
  begin
    case (x__h16987)
      32'd0: fpart__h16975 = 6'd32;
      32'd1: fpart__h16975 = 6'd48;
      32'd2: fpart__h16975 = 6'd16;
      32'd3: fpart__h16975 = 6'd58;
      32'd4: fpart__h16975 = 6'd44;
      32'd5, 32'd6, 32'd7: fpart__h16975 = 6'd0;
      default: fpart__h16975 = 6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h10193)
  begin
    case (x__h10193)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6: x__h10192 = 2'd0;
      32'd1, 32'd3, 32'd7: x__h10192 = 2'd3;
      default: x__h10192 = 2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h21898)
  begin
    case (x__h21898)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6: x__h21897 = 2'd0;
      32'd1, 32'd3, 32'd7: x__h21897 = 2'd3;
      default: x__h21897 = 2'b10 /* unspecified value */ ;
    endcase
  end
  always@(pe1_step or
	  pe1_weight_regs_0 or
	  pe1_weight_regs_1 or
	  pe1_weight_regs_2 or
	  pe1_weight_regs_3 or
	  pe1_weight_regs_4 or
	  pe1_weight_regs_5 or pe1_weight_regs_6 or pe1_weight_regs_7)
  begin
    case (pe1_step)
      4'd0:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_0;
      4'd1:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_1;
      4'd2:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_2;
      4'd3:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_3;
      4'd4:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_4;
      4'd5:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_5;
      4'd6:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_6;
      4'd7:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_7;
      default: SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h16987)
  begin
    case (x__h16987)
      32'd0, 32'd1, 32'd4, 32'd7:
	  SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70 = 2'd1;
      32'd2, 32'd5: SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70 = 2'd2;
      32'd3, 32'd6: SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70 = 2'd0;
      default: SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h16987)
  begin
    case (x__h16987)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6:
	  SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77 = 2'd0;
      32'd1, 32'd3, 32'd7:
	  SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77 = 2'd3;
      default: SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(pe3_step or
	  pe3_weight_regs_0 or
	  pe3_weight_regs_1 or
	  pe3_weight_regs_2 or
	  pe3_weight_regs_3 or
	  pe3_weight_regs_4 or
	  pe3_weight_regs_5 or pe3_weight_regs_6 or pe3_weight_regs_7)
  begin
    case (pe3_step)
      4'd0:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_0;
      4'd1:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_1;
      4'd2:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_2;
      4'd3:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_3;
      4'd4:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_4;
      4'd5:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_5;
      4'd6:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_6;
      4'd7:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_7;
      default: SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_52_MINUS_1___d566 or
	  pe2_weight_regs_0 or
	  pe2_weight_regs_1 or
	  pe2_weight_regs_2 or
	  pe2_weight_regs_3 or
	  pe2_weight_regs_4 or
	  pe2_weight_regs_5 or pe2_weight_regs_6 or pe2_weight_regs_7)
  begin
    case (cycle2_52_MINUS_1___d566)
      32'd0:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_0;
      32'd1:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_1;
      32'd2:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_2;
      32'd3:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_3;
      32'd4:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_4;
      32'd5:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_5;
      32'd6:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_6;
      32'd7:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_7;
      default: SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_52_MINUS_1___d566)
  begin
    case (cycle2_52_MINUS_1___d566)
      32'd0, 32'd1, 32'd4, 32'd7:
	  SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 = 2'd1;
      32'd2, 32'd5:
	  SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 = 2'd2;
      32'd3, 32'd6:
	  SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 = 2'd0;
      default: SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 =
		   2'b10 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cycle1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pe1_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe1_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe1_step <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pe1_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe2_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe2_step <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pe2_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe3_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe3_step <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pe3_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	psum <= `BSV_ASSIGNMENT_DELAY 8'd0;
	psum2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	test_error_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cycle1$EN) cycle1 <= `BSV_ASSIGNMENT_DELAY cycle1$D_IN;
	if (cycle2$EN) cycle2 <= `BSV_ASSIGNMENT_DELAY cycle2$D_IN;
	if (cycle3$EN) cycle3 <= `BSV_ASSIGNMENT_DELAY cycle3$D_IN;
	if (pe1_neg_partial_sum$EN)
	  pe1_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe1_neg_partial_sum$D_IN;
	if (pe1_pos_partial_sum$EN)
	  pe1_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe1_pos_partial_sum$D_IN;
	if (pe1_step$EN) pe1_step <= `BSV_ASSIGNMENT_DELAY pe1_step$D_IN;
	if (pe1_weight_regs_0$EN)
	  pe1_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_0$D_IN;
	if (pe1_weight_regs_1$EN)
	  pe1_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_1$D_IN;
	if (pe1_weight_regs_2$EN)
	  pe1_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_2$D_IN;
	if (pe1_weight_regs_3$EN)
	  pe1_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_3$D_IN;
	if (pe1_weight_regs_4$EN)
	  pe1_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_4$D_IN;
	if (pe1_weight_regs_5$EN)
	  pe1_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_5$D_IN;
	if (pe1_weight_regs_6$EN)
	  pe1_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_6$D_IN;
	if (pe1_weight_regs_7$EN)
	  pe1_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_7$D_IN;
	if (pe2_neg_partial_sum$EN)
	  pe2_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe2_neg_partial_sum$D_IN;
	if (pe2_pos_partial_sum$EN)
	  pe2_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe2_pos_partial_sum$D_IN;
	if (pe2_step$EN) pe2_step <= `BSV_ASSIGNMENT_DELAY pe2_step$D_IN;
	if (pe2_weight_regs_0$EN)
	  pe2_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_0$D_IN;
	if (pe2_weight_regs_1$EN)
	  pe2_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_1$D_IN;
	if (pe2_weight_regs_2$EN)
	  pe2_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_2$D_IN;
	if (pe2_weight_regs_3$EN)
	  pe2_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_3$D_IN;
	if (pe2_weight_regs_4$EN)
	  pe2_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_4$D_IN;
	if (pe2_weight_regs_5$EN)
	  pe2_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_5$D_IN;
	if (pe2_weight_regs_6$EN)
	  pe2_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_6$D_IN;
	if (pe2_weight_regs_7$EN)
	  pe2_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_7$D_IN;
	if (pe3_neg_partial_sum$EN)
	  pe3_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe3_neg_partial_sum$D_IN;
	if (pe3_pos_partial_sum$EN)
	  pe3_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe3_pos_partial_sum$D_IN;
	if (pe3_step$EN) pe3_step <= `BSV_ASSIGNMENT_DELAY pe3_step$D_IN;
	if (pe3_weight_regs_0$EN)
	  pe3_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_0$D_IN;
	if (pe3_weight_regs_1$EN)
	  pe3_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_1$D_IN;
	if (pe3_weight_regs_2$EN)
	  pe3_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_2$D_IN;
	if (pe3_weight_regs_3$EN)
	  pe3_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_3$D_IN;
	if (pe3_weight_regs_4$EN)
	  pe3_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_4$D_IN;
	if (pe3_weight_regs_5$EN)
	  pe3_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_5$D_IN;
	if (pe3_weight_regs_6$EN)
	  pe3_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_6$D_IN;
	if (pe3_weight_regs_7$EN)
	  pe3_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_7$D_IN;
	if (psum$EN) psum <= `BSV_ASSIGNMENT_DELAY psum$D_IN;
	if (psum2$EN) psum2 <= `BSV_ASSIGNMENT_DELAY psum2$D_IN;
	if (test_error_reg$EN)
	  test_error_reg <= `BSV_ASSIGNMENT_DELAY test_error_reg$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycle1 = 32'hAAAAAAAA;
    cycle2 = 32'hAAAAAAAA;
    cycle3 = 32'hAAAAAAAA;
    pe1_neg_partial_sum = 48'hAAAAAAAAAAAA;
    pe1_pos_partial_sum = 48'hAAAAAAAAAAAA;
    pe1_step = 4'hA;
    pe1_weight_regs_0 = 2'h2;
    pe1_weight_regs_1 = 2'h2;
    pe1_weight_regs_2 = 2'h2;
    pe1_weight_regs_3 = 2'h2;
    pe1_weight_regs_4 = 2'h2;
    pe1_weight_regs_5 = 2'h2;
    pe1_weight_regs_6 = 2'h2;
    pe1_weight_regs_7 = 2'h2;
    pe2_neg_partial_sum = 48'hAAAAAAAAAAAA;
    pe2_pos_partial_sum = 48'hAAAAAAAAAAAA;
    pe2_step = 4'hA;
    pe2_weight_regs_0 = 2'h2;
    pe2_weight_regs_1 = 2'h2;
    pe2_weight_regs_2 = 2'h2;
    pe2_weight_regs_3 = 2'h2;
    pe2_weight_regs_4 = 2'h2;
    pe2_weight_regs_5 = 2'h2;
    pe2_weight_regs_6 = 2'h2;
    pe2_weight_regs_7 = 2'h2;
    pe3_neg_partial_sum = 48'hAAAAAAAAAAAA;
    pe3_pos_partial_sum = 48'hAAAAAAAAAAAA;
    pe3_step = 4'hA;
    pe3_weight_regs_0 = 2'h2;
    pe3_weight_regs_1 = 2'h2;
    pe3_weight_regs_2 = 2'h2;
    pe3_weight_regs_3 = 2'h2;
    pe3_weight_regs_4 = 2'h2;
    pe3_weight_regs_5 = 2'h2;
    pe3_weight_regs_6 = 2'h2;
    pe3_weight_regs_7 = 2'h2;
    psum = 8'hAA;
    psum2 = 8'hAA;
    test_error_reg = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle3 > 32'd11 && cycle1 > 32'd10 && !cycle2_52_ULE_8___d556)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("Fail! ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d177)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d183)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170 +
		       3'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17181);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17239);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17319);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17399);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17479);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write(" x ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d.",
	       $signed({ _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75[1],
			 _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75 }));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write(" = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d252)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d258)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242 +
		       3'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d266)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18251);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18309);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18389);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18469);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18549);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write(" result:  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d320)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d326)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312 +
		       3'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d334)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18867);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18925);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19005);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19085);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19165);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write(" expected:  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d387)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d393)
	$write("%0d.",
	       $signed(SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379 +
		       3'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d401)
	$write("%0d.",
	       $signed(SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19483);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19541);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19621);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19701);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19781);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$display;
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && !cycle1_ULT_10___d5)
	$display("Passed all dot product tests.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_50_ULT_9___d453 && cycle3 != 32'd9 &&
	  cycle3 != 32'd10 &&
	  (IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d533 !=
	   2'd0 ||
	   IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d538 != 6'd0))
	$write("Failed nonlinearity!");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_50_ULT_9___d453 && cycle3 != 32'd9 &&
	  cycle3 != 32'd10 &&
	  IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d533 == 2'd0 &&
	  IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d538 == 6'd0)
	$display("Passed all non-linearity tests.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights &&
	  NOT_cycle2_52_EQ_0_54_55_AND_cycle2_52_ULE_8_5_ETC___d572)
	$display("Fail! %d vs. %d, cycle2 %d",
		 SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567,
		 SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568,
		 cycle2_52_MINUS_1___d566);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights &&
	  NOT_cycle2_52_EQ_0_54_55_AND_cycle2_52_ULE_8_5_ETC___d572)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights && cycle2 != 32'd0 &&
	  !cycle2_52_ULE_8___d556)
	$display("Passed all r/w weight tests.");
  end
  // synopsys translate_on
endmodule  // mkTbPEOnBoard

