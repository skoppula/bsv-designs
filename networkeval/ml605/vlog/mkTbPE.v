//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Wed Nov 22 10:45:41 EST 2017
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTbPE(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // register cycle1
  reg [31 : 0] cycle1;
  wire [31 : 0] cycle1$D_IN;
  wire cycle1$EN;

  // register cycle2
  reg [31 : 0] cycle2;
  wire [31 : 0] cycle2$D_IN;
  wire cycle2$EN;

  // register cycle3
  reg [31 : 0] cycle3;
  wire [31 : 0] cycle3$D_IN;
  wire cycle3$EN;

  // register pe1_neg_partial_sum
  reg [47 : 0] pe1_neg_partial_sum;
  wire [47 : 0] pe1_neg_partial_sum$D_IN;
  wire pe1_neg_partial_sum$EN;

  // register pe1_pos_partial_sum
  reg [47 : 0] pe1_pos_partial_sum;
  wire [47 : 0] pe1_pos_partial_sum$D_IN;
  wire pe1_pos_partial_sum$EN;

  // register pe1_step
  reg [3 : 0] pe1_step;
  wire [3 : 0] pe1_step$D_IN;
  wire pe1_step$EN;

  // register pe1_weight_regs_0
  reg [1 : 0] pe1_weight_regs_0;
  wire [1 : 0] pe1_weight_regs_0$D_IN;
  wire pe1_weight_regs_0$EN;

  // register pe1_weight_regs_1
  reg [1 : 0] pe1_weight_regs_1;
  wire [1 : 0] pe1_weight_regs_1$D_IN;
  wire pe1_weight_regs_1$EN;

  // register pe1_weight_regs_2
  reg [1 : 0] pe1_weight_regs_2;
  wire [1 : 0] pe1_weight_regs_2$D_IN;
  wire pe1_weight_regs_2$EN;

  // register pe1_weight_regs_3
  reg [1 : 0] pe1_weight_regs_3;
  wire [1 : 0] pe1_weight_regs_3$D_IN;
  wire pe1_weight_regs_3$EN;

  // register pe1_weight_regs_4
  reg [1 : 0] pe1_weight_regs_4;
  wire [1 : 0] pe1_weight_regs_4$D_IN;
  wire pe1_weight_regs_4$EN;

  // register pe1_weight_regs_5
  reg [1 : 0] pe1_weight_regs_5;
  wire [1 : 0] pe1_weight_regs_5$D_IN;
  wire pe1_weight_regs_5$EN;

  // register pe1_weight_regs_6
  reg [1 : 0] pe1_weight_regs_6;
  wire [1 : 0] pe1_weight_regs_6$D_IN;
  wire pe1_weight_regs_6$EN;

  // register pe1_weight_regs_7
  reg [1 : 0] pe1_weight_regs_7;
  wire [1 : 0] pe1_weight_regs_7$D_IN;
  wire pe1_weight_regs_7$EN;

  // register pe2_neg_partial_sum
  reg [47 : 0] pe2_neg_partial_sum;
  wire [47 : 0] pe2_neg_partial_sum$D_IN;
  wire pe2_neg_partial_sum$EN;

  // register pe2_pos_partial_sum
  reg [47 : 0] pe2_pos_partial_sum;
  wire [47 : 0] pe2_pos_partial_sum$D_IN;
  wire pe2_pos_partial_sum$EN;

  // register pe2_step
  reg [3 : 0] pe2_step;
  wire [3 : 0] pe2_step$D_IN;
  wire pe2_step$EN;

  // register pe2_weight_regs_0
  reg [1 : 0] pe2_weight_regs_0;
  wire [1 : 0] pe2_weight_regs_0$D_IN;
  wire pe2_weight_regs_0$EN;

  // register pe2_weight_regs_1
  reg [1 : 0] pe2_weight_regs_1;
  wire [1 : 0] pe2_weight_regs_1$D_IN;
  wire pe2_weight_regs_1$EN;

  // register pe2_weight_regs_2
  reg [1 : 0] pe2_weight_regs_2;
  wire [1 : 0] pe2_weight_regs_2$D_IN;
  wire pe2_weight_regs_2$EN;

  // register pe2_weight_regs_3
  reg [1 : 0] pe2_weight_regs_3;
  wire [1 : 0] pe2_weight_regs_3$D_IN;
  wire pe2_weight_regs_3$EN;

  // register pe2_weight_regs_4
  reg [1 : 0] pe2_weight_regs_4;
  wire [1 : 0] pe2_weight_regs_4$D_IN;
  wire pe2_weight_regs_4$EN;

  // register pe2_weight_regs_5
  reg [1 : 0] pe2_weight_regs_5;
  wire [1 : 0] pe2_weight_regs_5$D_IN;
  wire pe2_weight_regs_5$EN;

  // register pe2_weight_regs_6
  reg [1 : 0] pe2_weight_regs_6;
  wire [1 : 0] pe2_weight_regs_6$D_IN;
  wire pe2_weight_regs_6$EN;

  // register pe2_weight_regs_7
  reg [1 : 0] pe2_weight_regs_7;
  wire [1 : 0] pe2_weight_regs_7$D_IN;
  wire pe2_weight_regs_7$EN;

  // register pe3_neg_partial_sum
  reg [47 : 0] pe3_neg_partial_sum;
  wire [47 : 0] pe3_neg_partial_sum$D_IN;
  wire pe3_neg_partial_sum$EN;

  // register pe3_pos_partial_sum
  reg [47 : 0] pe3_pos_partial_sum;
  wire [47 : 0] pe3_pos_partial_sum$D_IN;
  wire pe3_pos_partial_sum$EN;

  // register pe3_step
  reg [3 : 0] pe3_step;
  wire [3 : 0] pe3_step$D_IN;
  wire pe3_step$EN;

  // register pe3_weight_regs_0
  reg [1 : 0] pe3_weight_regs_0;
  wire [1 : 0] pe3_weight_regs_0$D_IN;
  wire pe3_weight_regs_0$EN;

  // register pe3_weight_regs_1
  reg [1 : 0] pe3_weight_regs_1;
  wire [1 : 0] pe3_weight_regs_1$D_IN;
  wire pe3_weight_regs_1$EN;

  // register pe3_weight_regs_2
  reg [1 : 0] pe3_weight_regs_2;
  wire [1 : 0] pe3_weight_regs_2$D_IN;
  wire pe3_weight_regs_2$EN;

  // register pe3_weight_regs_3
  reg [1 : 0] pe3_weight_regs_3;
  wire [1 : 0] pe3_weight_regs_3$D_IN;
  wire pe3_weight_regs_3$EN;

  // register pe3_weight_regs_4
  reg [1 : 0] pe3_weight_regs_4;
  wire [1 : 0] pe3_weight_regs_4$D_IN;
  wire pe3_weight_regs_4$EN;

  // register pe3_weight_regs_5
  reg [1 : 0] pe3_weight_regs_5;
  wire [1 : 0] pe3_weight_regs_5$D_IN;
  wire pe3_weight_regs_5$EN;

  // register pe3_weight_regs_6
  reg [1 : 0] pe3_weight_regs_6;
  wire [1 : 0] pe3_weight_regs_6$D_IN;
  wire pe3_weight_regs_6$EN;

  // register pe3_weight_regs_7
  reg [1 : 0] pe3_weight_regs_7;
  wire [1 : 0] pe3_weight_regs_7$D_IN;
  wire pe3_weight_regs_7$EN;

  // register psum
  reg [7 : 0] psum;
  wire [7 : 0] psum$D_IN;
  wire psum$EN;

  // register psum2
  reg [7 : 0] psum2;
  wire [7 : 0] psum2$D_IN;
  wire psum2$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_test_rw_weights;

  // remaining internal signals
  reg [5 : 0] CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1,
	      CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2,
	      fpart__h16816;
  reg [1 : 0] SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77,
	      SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70,
	      SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568,
	      SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31,
	      SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567,
	      SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478,
	      x__h10033,
	      x__h21738;
  wire [77 : 0] _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d274,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d277,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d285,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d294,
		_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d341,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d344,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d352,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d361,
		_0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d370,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d199,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d202,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d210,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d219,
		_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d228,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d408,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d411,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d419,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d428,
		_0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d437,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d280,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_pe1_po_ETC___d347,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d205,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_PLUS_I_ETC___d414,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d289,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d356,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d214,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_ETC___d423,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d223,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d298,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d365,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d432,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d232,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d307,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d374,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d441;
  wire [47 : 0] IF_cycle3_50_EQ_9_54_THEN_IF_pe3_pos_partial_s_ETC___d496,
		SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34,
		SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51,
		SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481,
		SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503,
		c__h20904,
		c__h9223,
		pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54,
		pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38,
		pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506,
		pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485,
		x__h20934,
		x__h25935,
		y__h10027,
		y__h12451,
		y__h21732,
		y__h24175;
  wire [38 : 0] digit__h17022,
		digit__h17080,
		digit__h17160,
		digit__h17240,
		digit__h17320,
		digit__h18092,
		digit__h18150,
		digit__h18230,
		digit__h18310,
		digit__h18390,
		digit__h18708,
		digit__h18766,
		digit__h18846,
		digit__h18926,
		digit__h19006,
		digit__h19324,
		digit__h19382,
		digit__h19462,
		digit__h19542,
		digit__h19622,
		tx7078_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q3,
		tx7158_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q4,
		tx7238_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q5,
		tx7318_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q6,
		tx8148_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q8,
		tx8228_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q9,
		tx8308_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q10,
		tx8388_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q11,
		tx8764_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13,
		tx8844_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14,
		tx8924_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15,
		tx9004_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16,
		tx9380_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q18,
		tx9460_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q19,
		tx9540_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q20,
		tx9620_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q21,
		tx__h17078,
		tx__h17158,
		tx__h17238,
		tx__h17318,
		tx__h18148,
		tx__h18228,
		tx__h18308,
		tx__h18388,
		tx__h18764,
		tx__h18844,
		tx__h18924,
		tx__h19004,
		tx__h19380,
		tx__h19460,
		tx__h19540,
		tx__h19620,
		y__h17208,
		y__h17288,
		y__h17368,
		y__h18278,
		y__h18358,
		y__h18438,
		y__h18894,
		y__h18974,
		y__h19054,
		y__h19510,
		y__h19590,
		y__h19670;
  wire [31 : 0] cycle2_52_MINUS_1___d566, x__h10034, x__h16828, x__h21739;
  wire [23 : 0] inp_se_f__h10031,
		inp_se_f__h21736,
		inp_se_i__h10030,
		inp_se_i__h21735;
  wire [15 : 0] IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d91,
		x__h15527;
  wire [9 : 0] IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d105,
	       x__h15380;
  wire [7 : 0] x__h15220, x__h15778, x__h15794, x__h15797, x__h16722;
  wire [5 : 0] IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d538,
	       fpart__h17915,
	       x__h17043,
	       x__h18113,
	       x__h18729,
	       x__h19345,
	       y_avValue_snd__h16986,
	       y_avValue_snd__h18056,
	       y_avValue_snd__h18672,
	       y_avValue_snd__h19288,
	       y_f__h16180;
  wire [2 : 0] SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242,
	       SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312,
	       SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170,
	       SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379;
  wire [1 : 0] IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d533,
	       IF_NOT_x5380_BIT_9_AND_x5380_BIT_7_OR_NOT_x538_ETC__q7,
	       _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75,
	       x5220_BITS_7_TO_6__q17,
	       x6722_BITS_7_TO_6__q12;
  wire NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168,
       NOT_cycle2_52_EQ_0_54_55_AND_cycle2_52_ULE_8_5_ETC___d572,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d177,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d183,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d191,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d252,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d258,
       NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d266,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d320,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d326,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d334,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d387,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d393,
       cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d401,
       cycle1_ULT_10___d5,
       cycle2_52_ULE_8___d556,
       cycle3_50_ULT_9___d453;

  // rule RL_test_rw_weights
  assign WILL_FIRE_RL_test_rw_weights = cycle2 < 32'd10 ;

  // register cycle1
  assign cycle1$D_IN = cycle1 + 32'd1 ;
  assign cycle1$EN = 1'd1 ;

  // register cycle2
  assign cycle2$D_IN = cycle2 + 32'd1 ;
  assign cycle2$EN = WILL_FIRE_RL_test_rw_weights ;

  // register cycle3
  assign cycle3$D_IN = cycle3 + 32'd1 ;
  assign cycle3$EN = 1'd1 ;

  // register pe1_neg_partial_sum
  assign pe1_neg_partial_sum$D_IN =
	     (!pe1_neg_partial_sum[47] &&
	      SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51[47] &&
	      pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54[47]) ?
	       48'h7FFFFFFFFFFF :
	       ((pe1_neg_partial_sum[47] &&
		 !SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51[47] &&
		 !pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54[47]) ?
		  48'h800000000000 :
		  pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54) ;
  assign pe1_neg_partial_sum$EN =
	     cycle1 != 32'd0 &&
	     (cycle1 == 32'd1 || cycle1_ULT_10___d5 && cycle1 < 32'd9) ;

  // register pe1_pos_partial_sum
  assign pe1_pos_partial_sum$D_IN =
	     (!pe1_pos_partial_sum[47] &&
	      !SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34[47] &&
	      pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38[47]) ?
	       48'h7FFFFFFFFFFF :
	       ((pe1_pos_partial_sum[47] &&
		 SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34[47] &&
		 !pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38[47]) ?
		  48'h800000000000 :
		  pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38) ;
  assign pe1_pos_partial_sum$EN =
	     cycle1 != 32'd0 &&
	     (cycle1 == 32'd1 || cycle1_ULT_10___d5 && cycle1 < 32'd9) ;

  // register pe1_step
  assign pe1_step$D_IN = pe1_step + 4'd1 ;
  assign pe1_step$EN =
	     cycle1 != 32'd0 &&
	     (cycle1 == 32'd1 || cycle1_ULT_10___d5 && cycle1 < 32'd9) ;

  // register pe1_weight_regs_0
  assign pe1_weight_regs_0$D_IN = 2'd1 ;
  assign pe1_weight_regs_0$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_1
  assign pe1_weight_regs_1$D_IN = 2'd1 ;
  assign pe1_weight_regs_1$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_2
  assign pe1_weight_regs_2$D_IN = 2'd2 ;
  assign pe1_weight_regs_2$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_3
  assign pe1_weight_regs_3$D_IN = 2'd0 ;
  assign pe1_weight_regs_3$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_4
  assign pe1_weight_regs_4$D_IN = 2'd1 ;
  assign pe1_weight_regs_4$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_5
  assign pe1_weight_regs_5$D_IN = 2'd2 ;
  assign pe1_weight_regs_5$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_6
  assign pe1_weight_regs_6$D_IN = 2'd0 ;
  assign pe1_weight_regs_6$EN = cycle1 == 32'd0 ;

  // register pe1_weight_regs_7
  assign pe1_weight_regs_7$D_IN = 2'd1 ;
  assign pe1_weight_regs_7$EN = cycle1 == 32'd0 ;

  // register pe2_neg_partial_sum
  assign pe2_neg_partial_sum$D_IN = 48'h0 ;
  assign pe2_neg_partial_sum$EN = 1'b0 ;

  // register pe2_pos_partial_sum
  assign pe2_pos_partial_sum$D_IN = 48'h0 ;
  assign pe2_pos_partial_sum$EN = 1'b0 ;

  // register pe2_step
  assign pe2_step$D_IN = 4'h0 ;
  assign pe2_step$EN = 1'b0 ;

  // register pe2_weight_regs_0
  assign pe2_weight_regs_0$D_IN = 2'd1 ;
  assign pe2_weight_regs_0$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_1
  assign pe2_weight_regs_1$D_IN = 2'd1 ;
  assign pe2_weight_regs_1$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_2
  assign pe2_weight_regs_2$D_IN = 2'd2 ;
  assign pe2_weight_regs_2$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_3
  assign pe2_weight_regs_3$D_IN = 2'd0 ;
  assign pe2_weight_regs_3$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_4
  assign pe2_weight_regs_4$D_IN = 2'd1 ;
  assign pe2_weight_regs_4$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_5
  assign pe2_weight_regs_5$D_IN = 2'd2 ;
  assign pe2_weight_regs_5$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_6
  assign pe2_weight_regs_6$D_IN = 2'd0 ;
  assign pe2_weight_regs_6$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe2_weight_regs_7
  assign pe2_weight_regs_7$D_IN = 2'd1 ;
  assign pe2_weight_regs_7$EN =
	     WILL_FIRE_RL_test_rw_weights && cycle2 == 32'd0 ;

  // register pe3_neg_partial_sum
  assign pe3_neg_partial_sum$D_IN =
	     (!pe3_neg_partial_sum[47] &&
	      SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503[47] &&
	      pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506[47]) ?
	       48'h7FFFFFFFFFFF :
	       ((pe3_neg_partial_sum[47] &&
		 !SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503[47] &&
		 !pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506[47]) ?
		  48'h800000000000 :
		  pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506) ;
  assign pe3_neg_partial_sum$EN = cycle3 != 32'd0 && cycle3_50_ULT_9___d453 ;

  // register pe3_pos_partial_sum
  assign pe3_pos_partial_sum$D_IN =
	     cycle3_50_ULT_9___d453 ?
	       x__h20934 :
	       IF_cycle3_50_EQ_9_54_THEN_IF_pe3_pos_partial_s_ETC___d496 ;
  assign pe3_pos_partial_sum$EN =
	     cycle3 != 32'd0 &&
	     (cycle3_50_ULT_9___d453 || cycle3 == 32'd9 || cycle3 == 32'd10) ;

  // register pe3_step
  assign pe3_step$D_IN = pe3_step + 4'd1 ;
  assign pe3_step$EN = cycle3 != 32'd0 && cycle3_50_ULT_9___d453 ;

  // register pe3_weight_regs_0
  assign pe3_weight_regs_0$D_IN = 2'd1 ;
  assign pe3_weight_regs_0$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_1
  assign pe3_weight_regs_1$D_IN = 2'd1 ;
  assign pe3_weight_regs_1$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_2
  assign pe3_weight_regs_2$D_IN = 2'd2 ;
  assign pe3_weight_regs_2$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_3
  assign pe3_weight_regs_3$D_IN = 2'd0 ;
  assign pe3_weight_regs_3$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_4
  assign pe3_weight_regs_4$D_IN = 2'd1 ;
  assign pe3_weight_regs_4$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_5
  assign pe3_weight_regs_5$D_IN = 2'd2 ;
  assign pe3_weight_regs_5$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_6
  assign pe3_weight_regs_6$D_IN = 2'd0 ;
  assign pe3_weight_regs_6$EN = cycle3 == 32'd0 ;

  // register pe3_weight_regs_7
  assign pe3_weight_regs_7$D_IN = 2'd1 ;
  assign pe3_weight_regs_7$EN = cycle3 == 32'd0 ;

  // register psum
  assign psum$D_IN = x__h15220 ;
  assign psum$EN = cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 ;

  // register psum2
  assign psum2$D_IN = 8'h0 ;
  assign psum2$EN = 1'b0 ;

  // remaining internal signals
  assign IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d105 =
	     x__h15527[15:6] + { 4'd0, y_f__h16180 } ;
  assign IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d91 =
	     x__h15778 * x__h15797 ;
  assign IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d533 =
	     (!pe3_pos_partial_sum[47] &&
	      (pe3_pos_partial_sum[25] ||
	       pe3_pos_partial_sum[47:26] != 22'd0)) ?
	       2'd1 :
	       ((pe3_pos_partial_sum[47] &&
		 (!pe3_pos_partial_sum[25] ||
		  ~pe3_pos_partial_sum[47:26] != 22'd0)) ?
		  2'd2 :
		  pe3_pos_partial_sum[25:24]) ;
  assign IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d538 =
	     (!pe3_pos_partial_sum[47] &&
	      (pe3_pos_partial_sum[25] ||
	       pe3_pos_partial_sum[47:26] != 22'd0)) ?
	       6'd63 :
	       ((pe3_pos_partial_sum[47] &&
		 (!pe3_pos_partial_sum[25] ||
		  ~pe3_pos_partial_sum[47:26] != 22'd0)) ?
		  6'd0 :
		  pe3_pos_partial_sum[23:18]) ;
  assign IF_NOT_x5380_BIT_9_AND_x5380_BIT_7_OR_NOT_x538_ETC__q7 =
	     (!x__h15380[9] && (x__h15380[7] || x__h15380[9:8] != 2'd0)) ?
	       2'd1 :
	       ((x__h15380[9] && (!x__h15380[7] || ~x__h15380[9:8] != 2'd0)) ?
		  2'd2 :
		  x__h15380[7:6]) ;
  assign IF_cycle3_50_EQ_9_54_THEN_IF_pe3_pos_partial_s_ETC___d496 =
	     (cycle3 == 32'd9) ?
	       (pe3_pos_partial_sum[47] ? 48'd0 : pe3_pos_partial_sum) :
	       x__h25935 ;
  assign NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168 =
	     cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) ;
  assign NOT_cycle2_52_EQ_0_54_55_AND_cycle2_52_ULE_8_5_ETC___d572 =
	     cycle2 != 32'd0 && cycle2_52_ULE_8___d556 &&
	     SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 !=
	     SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d177 =
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     fpart__h16816 != 6'd0 &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170 ==
	     3'd7 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d183 =
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170[2] &&
	     fpart__h16816 != 6'd0 &&
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170 !=
	     3'd7 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d191 =
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     (!SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170[2] ||
	      fpart__h16816 == 6'd0) ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d252 =
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     fpart__h17915 != 6'd0 &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242 ==
	     3'd7 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d258 =
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242[2] &&
	     fpart__h17915 != 6'd0 &&
	     SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242 !=
	     3'd7 ;
  assign NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d266 =
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     (!SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242[2] ||
	      fpart__h17915 == 6'd0) ;
  assign SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242 =
	     { IF_NOT_x5380_BIT_9_AND_x5380_BIT_7_OR_NOT_x538_ETC__q7[1],
	       IF_NOT_x5380_BIT_9_AND_x5380_BIT_7_OR_NOT_x538_ETC__q7 } ;
  assign SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312 =
	     { x6722_BITS_7_TO_6__q12[1], x6722_BITS_7_TO_6__q12 } ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34 =
	     c__h9223 & y__h10027 ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51 =
	     c__h9223 & y__h12451 ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170 =
	     { SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77[1],
	       SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77 } ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481 =
	     c__h20904 & y__h21732 ;
  assign SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503 =
	     c__h20904 & y__h24175 ;
  assign SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379 =
	     { x5220_BITS_7_TO_6__q17[1], x5220_BITS_7_TO_6__q17 } ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d274 =
	     { 33'd0, x__h18113 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d277 =
	     { 33'd0, x__h18113 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d285 =
	     { 33'd0, x__h18113 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d294 =
	     { 33'd0, x__h18113 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303 =
	     { 33'd0, x__h18113 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d341 =
	     { 33'd0, x__h18729 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d344 =
	     { 33'd0, x__h18729 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d352 =
	     { 33'd0, x__h18729 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d361 =
	     { 33'd0, x__h18729 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d370 =
	     { 33'd0, x__h18729 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d199 =
	     { 33'd0, x__h17043 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d202 =
	     { 33'd0, x__h17043 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d210 =
	     { 33'd0, x__h17043 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d219 =
	     { 33'd0, x__h17043 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d228 =
	     { 33'd0, x__h17043 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d408 =
	     { 33'd0, x__h19345 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d411 =
	     { 33'd0, x__h19345 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d419 =
	     { 33'd0, x__h19345 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d428 =
	     { 33'd0, x__h19345 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d437 =
	     { 33'd0, x__h19345 } * 39'd100000 ;
  assign _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75 =
	     { 1'd0, SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70[0] } +
	     {2{SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70[1]}} ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d280 =
	     39'd10 * digit__h18092 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_pe1_po_ETC___d347 =
	     39'd10 * digit__h18708 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d205 =
	     39'd10 * digit__h17022 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_PLUS_I_ETC___d414 =
	     39'd10 * digit__h19324 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d289 =
	     39'd10 * y__h18278 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d356 =
	     39'd10 * y__h18894 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d214 =
	     39'd10 * y__h17208 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_ETC___d423 =
	     39'd10 * y__h19510 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d223 =
	     39'd10 * y__h17288 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d298 =
	     39'd10 * y__h18358 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d365 =
	     39'd10 * y__h18974 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d432 =
	     39'd10 * y__h19590 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d232 =
	     39'd10 * y__h17368 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d307 =
	     39'd10 * y__h18438 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d374 =
	     39'd10 * y__h19054 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d441 =
	     39'd10 * y__h19670 ;
  assign c__h20904 = { inp_se_i__h21735, inp_se_f__h21736 } ;
  assign c__h9223 = { inp_se_i__h10030, inp_se_f__h10031 } ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d320 =
	     cycle1_ULT_10___d5 &&
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     x__h16722[5:0] != 6'd0 &&
	     SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312 ==
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d326 =
	     cycle1_ULT_10___d5 &&
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312[2] &&
	     x__h16722[5:0] != 6'd0 &&
	     SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312 !=
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d334 =
	     cycle1_ULT_10___d5 &&
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     (!SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312[2] ||
	      x__h16722[5:0] == 6'd0) ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d387 =
	     cycle1_ULT_10___d5 &&
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     x__h15220[5:0] != 6'd0 &&
	     SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379 ==
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d393 =
	     cycle1_ULT_10___d5 &&
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379[2] &&
	     x__h15220[5:0] != 6'd0 &&
	     SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379 !=
	     3'd7 ;
  assign cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d401 =
	     cycle1_ULT_10___d5 &&
	     (x__h15220[7:6] != x__h16722[7:6] ||
	      x__h15220[5:0] != x__h16722[5:0]) &&
	     (!SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379[2] ||
	      x__h15220[5:0] == 6'd0) ;
  assign cycle1_ULT_10___d5 = cycle1 < 32'd10 ;
  assign cycle2_52_MINUS_1___d566 = cycle2 - 32'd1 ;
  assign cycle2_52_ULE_8___d556 = cycle2 <= 32'd8 ;
  assign cycle3_50_ULT_9___d453 = cycle3 < 32'd9 ;
  assign digit__h17022 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d199[9:6] } ;
  assign digit__h17080 =
	     { 35'd0,
	       tx7078_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q3[3:0] } ;
  assign digit__h17160 =
	     { 35'd0,
	       tx7158_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q4[3:0] } ;
  assign digit__h17240 =
	     { 35'd0,
	       tx7238_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q5[3:0] } ;
  assign digit__h17320 =
	     { 35'd0,
	       tx7318_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q6[3:0] } ;
  assign digit__h18092 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d274[9:6] } ;
  assign digit__h18150 =
	     { 35'd0,
	       tx8148_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q8[3:0] } ;
  assign digit__h18230 =
	     { 35'd0,
	       tx8228_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q9[3:0] } ;
  assign digit__h18310 =
	     { 35'd0,
	       tx8308_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q10[3:0] } ;
  assign digit__h18390 =
	     { 35'd0,
	       tx8388_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q11[3:0] } ;
  assign digit__h18708 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d341[9:6] } ;
  assign digit__h18766 =
	     { 35'd0,
	       tx8764_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13[3:0] } ;
  assign digit__h18846 =
	     { 35'd0,
	       tx8844_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14[3:0] } ;
  assign digit__h18926 =
	     { 35'd0,
	       tx8924_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15[3:0] } ;
  assign digit__h19006 =
	     { 35'd0,
	       tx9004_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16[3:0] } ;
  assign digit__h19324 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d408[9:6] } ;
  assign digit__h19382 =
	     { 35'd0,
	       tx9380_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q18[3:0] } ;
  assign digit__h19462 =
	     { 35'd0,
	       tx9460_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q19[3:0] } ;
  assign digit__h19542 =
	     { 35'd0,
	       tx9540_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q20[3:0] } ;
  assign digit__h19622 =
	     { 35'd0,
	       tx9620_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q21[3:0] } ;
  assign fpart__h17915 =
	     (!x__h15380[9] && (x__h15380[7] || x__h15380[9:8] != 2'd0)) ?
	       6'd63 :
	       ((x__h15380[9] && (!x__h15380[7] || ~x__h15380[9:8] != 2'd0)) ?
		  6'd0 :
		  x__h15380[5:0]) ;
  assign inp_se_f__h10031 =
	     { CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1,
	       18'd0 } ;
  assign inp_se_f__h21736 =
	     { CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2,
	       18'd0 } ;
  assign inp_se_i__h10030 = { {22{x__h10033[1]}}, x__h10033 } ;
  assign inp_se_i__h21735 = { {22{x__h21738[1]}}, x__h21738 } ;
  assign pe1_neg_partial_sum_6_MINUS_SEXT_SEL_ARR_0_3_0_ETC___d54 =
	     pe1_neg_partial_sum -
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d51 ;
  assign pe1_pos_partial_sum_0_PLUS_SEXT_SEL_ARR_0_3_0__ETC___d38 =
	     pe1_pos_partial_sum +
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_1__ETC___d34 ;
  assign pe3_neg_partial_sum_94_MINUS_SEXT_SEL_ARR_0_3__ETC___d506 =
	     pe3_neg_partial_sum -
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d503 ;
  assign pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485 =
	     pe3_pos_partial_sum +
	     SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481 ;
  assign tx7078_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q3 =
	     tx__h17078 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d205[38:0] ;
  assign tx7158_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q4 =
	     tx__h17158 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d214[38:0] ;
  assign tx7238_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q5 =
	     tx__h17238 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d223[38:0] ;
  assign tx7318_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q6 =
	     tx__h17318 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d232[38:0] ;
  assign tx8148_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q8 =
	     tx__h18148 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d280[38:0] ;
  assign tx8228_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q9 =
	     tx__h18228 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d289[38:0] ;
  assign tx8308_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q10 =
	     tx__h18308 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d298[38:0] ;
  assign tx8388_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q11 =
	     tx__h18388 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d307[38:0] ;
  assign tx8764_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13 =
	     tx__h18764 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_pe1_po_ETC___d347[38:0] ;
  assign tx8844_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14 =
	     tx__h18844 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d356[38:0] ;
  assign tx8924_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15 =
	     tx__h18924 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d365[38:0] ;
  assign tx9004_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16 =
	     tx__h19004 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d374[38:0] ;
  assign tx9380_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q18 =
	     tx__h19380 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_PLUS_I_ETC___d414[38:0] ;
  assign tx9460_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q19 =
	     tx__h19460 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_ETC___d423[38:0] ;
  assign tx9540_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q20 =
	     tx__h19540 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d432[38:0] ;
  assign tx9620_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q21 =
	     tx__h19620 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d441[38:0] ;
  assign tx__h17078 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d202[38:6] } ;
  assign tx__h17158 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d210[38:6] } ;
  assign tx__h17238 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d219[38:6] } ;
  assign tx__h17318 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cyc_ETC___d228[38:6] } ;
  assign tx__h18148 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d277[38:6] } ;
  assign tx__h18228 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d285[38:6] } ;
  assign tx__h18308 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d294[38:6] } ;
  assign tx__h18388 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d303[38:6] } ;
  assign tx__h18764 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d344[38:6] } ;
  assign tx__h18844 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d352[38:6] } ;
  assign tx__h18924 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d361[38:6] } ;
  assign tx__h19004 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_IF_NOT_pe1_pos_partial_sum_0__ETC___d370[38:6] } ;
  assign tx__h19380 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d411[38:6] } ;
  assign tx__h19460 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d419[38:6] } ;
  assign tx__h19540 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d428[38:6] } ;
  assign tx__h19620 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF__ETC___d437[38:6] } ;
  assign x5220_BITS_7_TO_6__q17 = x__h15220[7:6] ;
  assign x6722_BITS_7_TO_6__q12 = x__h16722[7:6] ;
  assign x__h10034 = cycle1 - 32'd1 ;
  assign x__h15220 =
	     psum +
	     ((!x__h15380[9] && (x__h15380[7] || x__h15380[9:8] != 2'd0)) ?
		8'd127 :
		((x__h15380[9] &&
		  (!x__h15380[7] || ~x__h15380[9:8] != 2'd0)) ?
		   8'd128 :
		   x__h15380[7:0])) ;
  assign x__h15380 =
	     (!x__h15527[15] &&
	      IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d105[9]) ?
	       10'd511 :
	       IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d105 ;
  assign x__h15527 =
	     (_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75[1] &&
	      !SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77[1] ||
	      SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77[1] &&
	      !_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75[1]) ?
	       -IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d91 :
	       IF_0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_M_ETC___d91 ;
  assign x__h15778 =
	     _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75[1] ?
	       -x__h15794 :
	       x__h15794 ;
  assign x__h15794 =
	     { _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75,
	       6'd0 } ;
  assign x__h15797 =
	     SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77[1] ?
	       -{ SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77,
		  fpart__h16816 } :
	       { SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77,
		 fpart__h16816 } ;
  assign x__h16722 =
	     ((!pe1_pos_partial_sum[47] &&
	       (pe1_pos_partial_sum[25] ||
		pe1_pos_partial_sum[47:26] != 22'd0)) ?
		8'd127 :
		((pe1_pos_partial_sum[47] &&
		  (!pe1_pos_partial_sum[25] ||
		   ~pe1_pos_partial_sum[47:26] != 22'd0)) ?
		   8'd128 :
		   pe1_pos_partial_sum[25:18])) +
	     ((!pe1_neg_partial_sum[47] &&
	       (pe1_neg_partial_sum[25] ||
		pe1_neg_partial_sum[47:26] != 22'd0)) ?
		8'd127 :
		((pe1_neg_partial_sum[47] &&
		  (!pe1_neg_partial_sum[25] ||
		   ~pe1_neg_partial_sum[47:26] != 22'd0)) ?
		   8'd128 :
		   pe1_neg_partial_sum[25:18])) ;
  assign x__h16828 = cycle1 - 32'd2 ;
  assign x__h17043 =
	     (SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170[2] &&
	      fpart__h16816 != 6'd0) ?
	       y_avValue_snd__h16986 :
	       fpart__h16816 ;
  assign x__h18113 =
	     (SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242[2] &&
	      fpart__h17915 != 6'd0) ?
	       y_avValue_snd__h18056 :
	       fpart__h17915 ;
  assign x__h18729 =
	     (SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312[2] &&
	      x__h16722[5:0] != 6'd0) ?
	       y_avValue_snd__h18672 :
	       x__h16722[5:0] ;
  assign x__h19345 =
	     (SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379[2] &&
	      x__h15220[5:0] != 6'd0) ?
	       y_avValue_snd__h19288 :
	       x__h15220[5:0] ;
  assign x__h20934 =
	     (!pe3_pos_partial_sum[47] &&
	      !SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481[47] &&
	      pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485[47]) ?
	       48'h7FFFFFFFFFFF :
	       ((pe3_pos_partial_sum[47] &&
		 SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle3_50_MINUS_ETC___d481[47] &&
		 !pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485[47]) ?
		  48'h800000000000 :
		  pe3_pos_partial_sum_59_PLUS_SEXT_SEL_ARR_0_3_0_ETC___d485) ;
  assign x__h21739 = cycle3 - 32'd1 ;
  assign x__h25935 = pe3_pos_partial_sum + pe3_neg_partial_sum ;
  assign y__h10027 =
	     SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31[0] ?
	       48'hFFFFFFFFFFFF :
	       48'd0 ;
  assign y__h12451 =
	     SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31[1] ?
	       48'hFFFFFFFFFFFF :
	       48'd0 ;
  assign y__h17208 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_0_3_0_ETC___d205[38:0] +
	     digit__h17080 ;
  assign y__h17288 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d214[38:0] +
	     digit__h17160 ;
  assign y__h17368 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d223[38:0] +
	     digit__h17240 ;
  assign y__h18278 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_IF_NOT_ETC___d280[38:0] +
	     digit__h18150 ;
  assign y__h18358 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d289[38:0] +
	     digit__h18230 ;
  assign y__h18438 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d298[38:0] +
	     digit__h18310 ;
  assign y__h18894 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_pe1_po_ETC___d347[38:0] +
	     digit__h18766 ;
  assign y__h18974 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_IF_NOT_ETC___d356[38:0] +
	     digit__h18846 ;
  assign y__h19054 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d365[38:0] +
	     digit__h18926 ;
  assign y__h19510 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_PLUS_I_ETC___d414[38:0] +
	     digit__h19382 ;
  assign y__h19590 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_psum_7_ETC___d423[38:0] +
	     digit__h19462 ;
  assign y__h19670 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d432[38:0] +
	     digit__h19542 ;
  assign y__h21732 =
	     SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478[0] ?
	       48'hFFFFFFFFFFFF :
	       48'd0 ;
  assign y__h24175 =
	     SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478[1] ?
	       48'hFFFFFFFFFFFF :
	       48'd0 ;
  assign y_avValue_snd__h16986 = 6'd0 - fpart__h16816 ;
  assign y_avValue_snd__h18056 = 6'd0 - fpart__h17915 ;
  assign y_avValue_snd__h18672 = 6'd0 - x__h16722[5:0] ;
  assign y_avValue_snd__h19288 = 6'd0 - x__h15220[5:0] ;
  assign y_f__h16180 =
	     (x__h15527[5] && (x__h15527[15] || x__h15527[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  always@(x__h10034)
  begin
    case (x__h10034)
      32'd0: CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd32;
      32'd1: CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd48;
      32'd2: CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd16;
      32'd3: CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd58;
      32'd4: CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd44;
      32'd5, 32'd6, 32'd7:
	  CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 = 6'd0;
      default: CASE_x0034_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q1 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h21739)
  begin
    case (x__h21739)
      32'd0: CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd32;
      32'd1: CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd48;
      32'd2: CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd16;
      32'd3: CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd58;
      32'd4: CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd44;
      32'd5, 32'd6, 32'd7:
	  CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 = 6'd0;
      default: CASE_x1739_0_32_1_48_2_16_3_58_4_44_5_0_6_0_7__ETC__q2 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h16828)
  begin
    case (x__h16828)
      32'd0: fpart__h16816 = 6'd32;
      32'd1: fpart__h16816 = 6'd48;
      32'd2: fpart__h16816 = 6'd16;
      32'd3: fpart__h16816 = 6'd58;
      32'd4: fpart__h16816 = 6'd44;
      32'd5, 32'd6, 32'd7: fpart__h16816 = 6'd0;
      default: fpart__h16816 = 6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h10034)
  begin
    case (x__h10034)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6: x__h10033 = 2'd0;
      32'd1, 32'd3, 32'd7: x__h10033 = 2'd3;
      default: x__h10033 = 2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h21739)
  begin
    case (x__h21739)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6: x__h21738 = 2'd0;
      32'd1, 32'd3, 32'd7: x__h21738 = 2'd3;
      default: x__h21738 = 2'b10 /* unspecified value */ ;
    endcase
  end
  always@(pe1_step or
	  pe1_weight_regs_0 or
	  pe1_weight_regs_1 or
	  pe1_weight_regs_2 or
	  pe1_weight_regs_3 or
	  pe1_weight_regs_4 or
	  pe1_weight_regs_5 or pe1_weight_regs_6 or pe1_weight_regs_7)
  begin
    case (pe1_step)
      4'd0:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_0;
      4'd1:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_1;
      4'd2:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_2;
      4'd3:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_3;
      4'd4:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_4;
      4'd5:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_5;
      4'd6:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_6;
      4'd7:
	  SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
	      pe1_weight_regs_7;
      default: SEL_ARR_pe1_weight_regs_0_1_pe1_weight_regs_1__ETC___d31 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h16828)
  begin
    case (x__h16828)
      32'd0, 32'd1, 32'd4, 32'd7:
	  SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70 = 2'd1;
      32'd2, 32'd5: SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70 = 2'd2;
      32'd3, 32'd6: SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70 = 2'd0;
      default: SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINUS_2_9___d70 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(x__h16828)
  begin
    case (x__h16828)
      32'd0, 32'd2, 32'd4, 32'd5, 32'd6:
	  SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77 = 2'd0;
      32'd1, 32'd3, 32'd7:
	  SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77 = 2'd3;
      default: SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9___d77 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(pe3_step or
	  pe3_weight_regs_0 or
	  pe3_weight_regs_1 or
	  pe3_weight_regs_2 or
	  pe3_weight_regs_3 or
	  pe3_weight_regs_4 or
	  pe3_weight_regs_5 or pe3_weight_regs_6 or pe3_weight_regs_7)
  begin
    case (pe3_step)
      4'd0:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_0;
      4'd1:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_1;
      4'd2:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_2;
      4'd3:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_3;
      4'd4:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_4;
      4'd5:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_5;
      4'd6:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_6;
      4'd7:
	  SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
	      pe3_weight_regs_7;
      default: SEL_ARR_pe3_weight_regs_0_68_pe3_weight_regs_1_ETC___d478 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_52_MINUS_1___d566 or
	  pe2_weight_regs_0 or
	  pe2_weight_regs_1 or
	  pe2_weight_regs_2 or
	  pe2_weight_regs_3 or
	  pe2_weight_regs_4 or
	  pe2_weight_regs_5 or pe2_weight_regs_6 or pe2_weight_regs_7)
  begin
    case (cycle2_52_MINUS_1___d566)
      32'd0:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_0;
      32'd1:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_1;
      32'd2:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_2;
      32'd3:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_3;
      32'd4:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_4;
      32'd5:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_5;
      32'd6:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_6;
      32'd7:
	  SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
	      pe2_weight_regs_7;
      default: SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567 =
		   2'b10 /* unspecified value */ ;
    endcase
  end
  always@(cycle2_52_MINUS_1___d566)
  begin
    case (cycle2_52_MINUS_1___d566)
      32'd0, 32'd1, 32'd4, 32'd7:
	  SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 = 2'd1;
      32'd2, 32'd5:
	  SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 = 2'd2;
      32'd3, 32'd6:
	  SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 = 2'd0;
      default: SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568 =
		   2'b10 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cycle1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	cycle3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	pe1_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe1_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe1_step <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pe1_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe1_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe2_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe2_step <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pe2_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe2_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe3_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY 48'd0;
	pe3_step <= `BSV_ASSIGNMENT_DELAY 4'd0;
	pe3_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	pe3_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	psum <= `BSV_ASSIGNMENT_DELAY 8'd0;
	psum2 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (cycle1$EN) cycle1 <= `BSV_ASSIGNMENT_DELAY cycle1$D_IN;
	if (cycle2$EN) cycle2 <= `BSV_ASSIGNMENT_DELAY cycle2$D_IN;
	if (cycle3$EN) cycle3 <= `BSV_ASSIGNMENT_DELAY cycle3$D_IN;
	if (pe1_neg_partial_sum$EN)
	  pe1_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe1_neg_partial_sum$D_IN;
	if (pe1_pos_partial_sum$EN)
	  pe1_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe1_pos_partial_sum$D_IN;
	if (pe1_step$EN) pe1_step <= `BSV_ASSIGNMENT_DELAY pe1_step$D_IN;
	if (pe1_weight_regs_0$EN)
	  pe1_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_0$D_IN;
	if (pe1_weight_regs_1$EN)
	  pe1_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_1$D_IN;
	if (pe1_weight_regs_2$EN)
	  pe1_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_2$D_IN;
	if (pe1_weight_regs_3$EN)
	  pe1_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_3$D_IN;
	if (pe1_weight_regs_4$EN)
	  pe1_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_4$D_IN;
	if (pe1_weight_regs_5$EN)
	  pe1_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_5$D_IN;
	if (pe1_weight_regs_6$EN)
	  pe1_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_6$D_IN;
	if (pe1_weight_regs_7$EN)
	  pe1_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY pe1_weight_regs_7$D_IN;
	if (pe2_neg_partial_sum$EN)
	  pe2_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe2_neg_partial_sum$D_IN;
	if (pe2_pos_partial_sum$EN)
	  pe2_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe2_pos_partial_sum$D_IN;
	if (pe2_step$EN) pe2_step <= `BSV_ASSIGNMENT_DELAY pe2_step$D_IN;
	if (pe2_weight_regs_0$EN)
	  pe2_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_0$D_IN;
	if (pe2_weight_regs_1$EN)
	  pe2_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_1$D_IN;
	if (pe2_weight_regs_2$EN)
	  pe2_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_2$D_IN;
	if (pe2_weight_regs_3$EN)
	  pe2_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_3$D_IN;
	if (pe2_weight_regs_4$EN)
	  pe2_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_4$D_IN;
	if (pe2_weight_regs_5$EN)
	  pe2_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_5$D_IN;
	if (pe2_weight_regs_6$EN)
	  pe2_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_6$D_IN;
	if (pe2_weight_regs_7$EN)
	  pe2_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY pe2_weight_regs_7$D_IN;
	if (pe3_neg_partial_sum$EN)
	  pe3_neg_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe3_neg_partial_sum$D_IN;
	if (pe3_pos_partial_sum$EN)
	  pe3_pos_partial_sum <= `BSV_ASSIGNMENT_DELAY
	      pe3_pos_partial_sum$D_IN;
	if (pe3_step$EN) pe3_step <= `BSV_ASSIGNMENT_DELAY pe3_step$D_IN;
	if (pe3_weight_regs_0$EN)
	  pe3_weight_regs_0 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_0$D_IN;
	if (pe3_weight_regs_1$EN)
	  pe3_weight_regs_1 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_1$D_IN;
	if (pe3_weight_regs_2$EN)
	  pe3_weight_regs_2 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_2$D_IN;
	if (pe3_weight_regs_3$EN)
	  pe3_weight_regs_3 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_3$D_IN;
	if (pe3_weight_regs_4$EN)
	  pe3_weight_regs_4 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_4$D_IN;
	if (pe3_weight_regs_5$EN)
	  pe3_weight_regs_5 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_5$D_IN;
	if (pe3_weight_regs_6$EN)
	  pe3_weight_regs_6 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_6$D_IN;
	if (pe3_weight_regs_7$EN)
	  pe3_weight_regs_7 <= `BSV_ASSIGNMENT_DELAY pe3_weight_regs_7$D_IN;
	if (psum$EN) psum <= `BSV_ASSIGNMENT_DELAY psum$D_IN;
	if (psum2$EN) psum2 <= `BSV_ASSIGNMENT_DELAY psum2$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cycle1 = 32'hAAAAAAAA;
    cycle2 = 32'hAAAAAAAA;
    cycle3 = 32'hAAAAAAAA;
    pe1_neg_partial_sum = 48'hAAAAAAAAAAAA;
    pe1_pos_partial_sum = 48'hAAAAAAAAAAAA;
    pe1_step = 4'hA;
    pe1_weight_regs_0 = 2'h2;
    pe1_weight_regs_1 = 2'h2;
    pe1_weight_regs_2 = 2'h2;
    pe1_weight_regs_3 = 2'h2;
    pe1_weight_regs_4 = 2'h2;
    pe1_weight_regs_5 = 2'h2;
    pe1_weight_regs_6 = 2'h2;
    pe1_weight_regs_7 = 2'h2;
    pe2_neg_partial_sum = 48'hAAAAAAAAAAAA;
    pe2_pos_partial_sum = 48'hAAAAAAAAAAAA;
    pe2_step = 4'hA;
    pe2_weight_regs_0 = 2'h2;
    pe2_weight_regs_1 = 2'h2;
    pe2_weight_regs_2 = 2'h2;
    pe2_weight_regs_3 = 2'h2;
    pe2_weight_regs_4 = 2'h2;
    pe2_weight_regs_5 = 2'h2;
    pe2_weight_regs_6 = 2'h2;
    pe2_weight_regs_7 = 2'h2;
    pe3_neg_partial_sum = 48'hAAAAAAAAAAAA;
    pe3_pos_partial_sum = 48'hAAAAAAAAAAAA;
    pe3_step = 4'hA;
    pe3_weight_regs_0 = 2'h2;
    pe3_weight_regs_1 = 2'h2;
    pe3_weight_regs_2 = 2'h2;
    pe3_weight_regs_3 = 2'h2;
    pe3_weight_regs_4 = 2'h2;
    pe3_weight_regs_5 = 2'h2;
    pe3_weight_regs_6 = 2'h2;
    pe3_weight_regs_7 = 2'h2;
    psum = 8'hAA;
    psum2 = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle3 > 32'd11 && cycle1 > 32'd10 && !cycle2_52_ULE_8___d556)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("Fail! ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d177)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d183)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170 +
		       3'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_0_3_0_3_0_0_0_3_3_cycle1_MINUS_2_9_7___d170));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17022);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17080);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17160);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17240);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h17320);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write(" x ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d.",
	       $signed({ _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75[1],
			 _0_CONCAT_SEL_ARR_1_1_2_0_1_2_0_1_8_cycle1_MINU_ETC___d75 }));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", 33'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write(" = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d252)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d258)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242 +
		       3'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && cycle1_ULT_10___d5 &&
	  NOT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL__ETC___d266)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ARR_1_1_2_0_ETC___d242));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18092);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18150);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18230);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18310);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18390);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write(" result:  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d320)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d326)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312 +
		       3'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d334)
	$write("%0d.",
	       $signed(SEXT_IF_NOT_pe1_pos_partial_sum_0_BIT_47_1_2_A_ETC___d312));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18708);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18766);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18846);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h18926);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19006);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write(" expected:  ");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d387)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d393)
	$write("%0d.",
	       $signed(SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379 +
		       3'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 &&
	  cycle1_ULT_10_AND_NOT_psum_7_PLUS_IF_NOT_IF_NO_ETC___d401)
	$write("%0d.",
	       $signed(SEXT_psum_7_PLUS_IF_NOT_IF_NOT_IF_0_CONCAT_SEL_ETC___d379));
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19324);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19382);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19462);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19542);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$write("%0d", digit__h19622);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$display;
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 &&
	  NOT_cycle1_EQ_1_4_AND_cycle1_ULT_10_AND_NOT_ps_ETC___d168)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle1 != 32'd0 && cycle1 != 32'd1 && !cycle1_ULT_10___d5)
	$display("Passed all dot product tests.");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_50_ULT_9___d453 && cycle3 != 32'd9 &&
	  cycle3 != 32'd10 &&
	  (IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d533 !=
	   2'd0 ||
	   IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d538 != 6'd0))
	$write("Failed nonlinearity!");
    if (RST_N != `BSV_RESET_VALUE)
      if (cycle3 != 32'd0 && !cycle3_50_ULT_9___d453 && cycle3 != 32'd9 &&
	  cycle3 != 32'd10 &&
	  IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d533 == 2'd0 &&
	  IF_NOT_pe3_pos_partial_sum_59_BIT_47_60_61_AND_ETC___d538 == 6'd0)
	$display("Passed all non-linearity tests.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights &&
	  NOT_cycle2_52_EQ_0_54_55_AND_cycle2_52_ULE_8_5_ETC___d572)
	$display("Fail! %d vs. %d, cycle2 %d",
		 SEL_ARR_pe2_weight_regs_0_57_pe2_weight_regs_1_ETC___d567,
		 SEL_ARR_1_1_2_0_1_2_0_1_8_cycle2_52_MINUS_1_66___d568,
		 cycle2_52_MINUS_1___d566);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights &&
	  NOT_cycle2_52_EQ_0_54_55_AND_cycle2_52_ULE_8_5_ETC___d572)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_test_rw_weights && cycle2 != 32'd0 &&
	  !cycle2_52_ULE_8___d556)
	$display("Passed all r/w weight tests.");
  end
  // synopsys translate_on
endmodule  // mkTbPE

