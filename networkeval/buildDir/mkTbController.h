/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Sun Nov  5 10:57:33 EST 2017
 * 
 */

/* Generation options: */
#ifndef __mkTbController_h__
#define __mkTbController_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTbController module */
class MOD_mkTbController : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_controller_le_bias;
  MOD_Reg<tUInt8> INST_controller_le_feat_addr;
  MOD_BRAM<tUInt8,tUInt8,tUInt8> INST_controller_le_featureBRAM_memory;
  MOD_Reg<tUInt8> INST_controller_le_featureBRAM_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_controller_le_featureBRAM_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_controller_le_featureBRAM_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_controller_le_featureBRAM_serverAdapter_cnt_3;
  MOD_Fifo<tUInt8> INST_controller_le_featureBRAM_serverAdapter_outDataCore;
  MOD_Wire<tUInt8> INST_controller_le_featureBRAM_serverAdapter_outData_deqCalled;
  MOD_Wire<tUInt8> INST_controller_le_featureBRAM_serverAdapter_outData_enqData;
  MOD_Wire<tUInt8> INST_controller_le_featureBRAM_serverAdapter_outData_outData;
  MOD_Reg<tUInt8> INST_controller_le_featureBRAM_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_controller_le_featureBRAM_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_controller_le_featureBRAM_serverAdapter_writeWithResp;
  MOD_Reg<tUInt8> INST_controller_le_neg_const;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_neg_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_pos_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_step;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_weight_regs_0;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_weight_regs_1;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_weight_regs_2;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_weight_regs_3;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_weight_regs_4;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_weight_regs_5;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_weight_regs_6;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_0_weight_regs_7;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_neg_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_pos_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_step;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_weight_regs_0;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_weight_regs_1;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_weight_regs_2;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_weight_regs_3;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_weight_regs_4;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_weight_regs_5;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_weight_regs_6;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_1_weight_regs_7;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_neg_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_pos_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_step;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_weight_regs_0;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_weight_regs_1;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_weight_regs_2;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_weight_regs_3;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_weight_regs_4;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_weight_regs_5;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_weight_regs_6;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_2_weight_regs_7;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_neg_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_pos_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_step;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_weight_regs_0;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_weight_regs_1;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_weight_regs_2;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_weight_regs_3;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_weight_regs_4;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_weight_regs_5;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_weight_regs_6;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_3_weight_regs_7;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_neg_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_pos_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_step;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_weight_regs_0;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_weight_regs_1;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_weight_regs_2;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_weight_regs_3;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_weight_regs_4;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_weight_regs_5;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_weight_regs_6;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_4_weight_regs_7;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_neg_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_pos_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_step;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_weight_regs_0;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_weight_regs_1;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_weight_regs_2;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_weight_regs_3;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_weight_regs_4;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_weight_regs_5;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_weight_regs_6;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_5_weight_regs_7;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_neg_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_pos_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_step;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_weight_regs_0;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_weight_regs_1;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_weight_regs_2;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_weight_regs_3;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_weight_regs_4;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_weight_regs_5;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_weight_regs_6;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_6_weight_regs_7;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_neg_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_pos_partial_sum;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_step;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_weight_regs_0;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_weight_regs_1;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_weight_regs_2;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_weight_regs_3;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_weight_regs_4;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_weight_regs_5;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_weight_regs_6;
  MOD_Reg<tUInt8> INST_controller_le_pe_vec_7_weight_regs_7;
  MOD_Reg<tUInt8> INST_controller_le_pos_const;
  MOD_Reg<tUInt8> INST_controller_le_step;
  MOD_Reg<tUInt8> INST_controller_le_waiting;
  MOD_BRAM<tUInt8,tUInt32,tUInt8> INST_controller_le_weightBRAM_memory;
  MOD_Reg<tUInt8> INST_controller_le_weightBRAM_serverAdapter_cnt;
  MOD_Wire<tUInt8> INST_controller_le_weightBRAM_serverAdapter_cnt_1;
  MOD_Wire<tUInt8> INST_controller_le_weightBRAM_serverAdapter_cnt_2;
  MOD_Wire<tUInt8> INST_controller_le_weightBRAM_serverAdapter_cnt_3;
  MOD_Fifo<tUInt32> INST_controller_le_weightBRAM_serverAdapter_outDataCore;
  MOD_Wire<tUInt8> INST_controller_le_weightBRAM_serverAdapter_outData_deqCalled;
  MOD_Wire<tUInt32> INST_controller_le_weightBRAM_serverAdapter_outData_enqData;
  MOD_Wire<tUInt32> INST_controller_le_weightBRAM_serverAdapter_outData_outData;
  MOD_Reg<tUInt8> INST_controller_le_weightBRAM_serverAdapter_s1;
  MOD_Wire<tUInt8> INST_controller_le_weightBRAM_serverAdapter_s1_1;
  MOD_Wire<tUInt8> INST_controller_le_weightBRAM_serverAdapter_writeWithResp;
  MOD_Reg<tUInt8> INST_controller_le_weight_addr;
  MOD_Reg<tUInt8> INST_controller_step;
  MOD_Reg<tUInt8> INST_controller_weight_addr;
  MOD_Reg<tUInt32> INST_cycle1;
 
 /* Constructor */
 public:
  MOD_mkTbController(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt32 DEF__read__h66;
  tUInt8 DEF_b__h8116;
  tUInt8 DEF_b__h7442;
  tUInt8 DEF_b__h5893;
  tUInt8 DEF_controller_le_weightBRAM_serverAdapter_s1___d109;
  tUInt8 DEF_controller_le_featureBRAM_serverAdapter_s1___d50;
  tUInt8 DEF_controller_le_weightBRAM_serverAdapter_cnt_3_w_ETC___d82;
  tUInt8 DEF_controller_le_weightBRAM_serverAdapter_cnt_2_w_ETC___d80;
  tUInt8 DEF_controller_le_weightBRAM_serverAdapter_cnt_1_w_ETC___d79;
  tUInt8 DEF_controller_le_featureBRAM_serverAdapter_cnt_3__ETC___d23;
  tUInt8 DEF_controller_le_featureBRAM_serverAdapter_cnt_2__ETC___d21;
  tUInt8 DEF_controller_le_featureBRAM_serverAdapter_cnt_1__ETC___d20;
  tUInt8 DEF_controller_le_weightBRAM_serverAdapter_s1_09_B_ETC___d110;
  tUInt8 DEF_controller_le_featureBRAM_serverAdapter_s1_0_B_ETC___d51;
 
 /* Local definitions */
 private:
  tUInt8 DEF_x__h8398;
  tUInt32 DEF_x__h7044;
  tUInt8 DEF_x__h5495;
  tUInt8 DEF_x3__h44392;
  tUInt8 DEF_x__h41002;
  tUInt8 DEF_controller_le_pe_vec_7_pos_partial_sum__h44062;
  tUInt8 DEF_x__h38260;
  tUInt8 DEF_controller_le_pe_vec_6_pos_partial_sum__h43975;
  tUInt8 DEF_x__h35518;
  tUInt8 DEF_controller_le_pe_vec_5_pos_partial_sum__h43888;
  tUInt8 DEF_x__h32776;
  tUInt8 DEF_controller_le_pe_vec_4_pos_partial_sum__h43801;
  tUInt8 DEF_x__h30034;
  tUInt8 DEF_controller_le_pe_vec_3_pos_partial_sum__h43714;
  tUInt8 DEF_x__h27292;
  tUInt8 DEF_controller_le_pe_vec_2_pos_partial_sum__h43627;
  tUInt8 DEF_x__h24550;
  tUInt8 DEF_controller_le_pe_vec_1_pos_partial_sum__h43540;
  tUInt8 DEF_x__h21808;
  tUInt8 DEF_controller_le_pe_vec_0_pos_partial_sum__h43453;
  tUInt8 DEF_x2__h44391;
  tUInt8 DEF__read_f__h19576;
  tUInt8 DEF__read_f__h19259;
  tUInt8 DEF__read_f__h18942;
  tUInt8 DEF__read_f__h18625;
  tUInt8 DEF__read_f__h18308;
  tUInt8 DEF__read_f__h17991;
  tUInt8 DEF__read_f__h17674;
  tUInt8 DEF__read_f__h17350;
  tUInt8 DEF__read_i__h19575;
  tUInt8 DEF__read_i__h19258;
  tUInt8 DEF__read_i__h18941;
  tUInt8 DEF__read_i__h18624;
  tUInt8 DEF__read_i__h18307;
  tUInt8 DEF__read_i__h17990;
  tUInt8 DEF__read_i__h17673;
  tUInt8 DEF__read_i__h17349;
  tUInt8 DEF_controller_le_pe_vec_7_pos_partial_sum_BIT_7___h44063;
  tUInt8 DEF_controller_le_pe_vec_6_pos_partial_sum_BIT_7___h43976;
  tUInt8 DEF_controller_le_pe_vec_5_pos_partial_sum_BIT_7___h43889;
  tUInt8 DEF_controller_le_pe_vec_4_pos_partial_sum_BIT_7___h43802;
  tUInt8 DEF_controller_le_pe_vec_3_pos_partial_sum_BIT_7___h43715;
  tUInt8 DEF_controller_le_pe_vec_2_pos_partial_sum_BIT_7___h43628;
  tUInt8 DEF_controller_le_pe_vec_1_pos_partial_sum_BIT_7___h43541;
  tUInt8 DEF_controller_le_pe_vec_0_pos_partial_sum_BIT_7___h43454;
  tUInt8 DEF_SEL_ARR_controller_le_pe_vec_0_pos_partial_sum_ETC___d1090;
  tUInt8 DEF_SEL_ARR_controller_le_pe_vec_0_pos_partial_sum_ETC___d1080;
  tUInt8 DEF_controller_le_feat_addr_74_EQ_7___d357;
  tUInt8 DEF_controller_le_step_20_PLUS_1___d168;
  tUInt8 DEF_controller_le_feat_addr_74_PLUS_1___d358;
  tUInt8 DEF_SEL_ARR_controller_le_pe_vec_0_pos_partial_sum_ETC___d1091;
 
 /* Rules */
 public:
  void RL_controller_le_featureBRAM_serverAdapter_outData_setFirstCore();
  void RL_controller_le_featureBRAM_serverAdapter_outData_setFirstEnq();
  void RL_controller_le_featureBRAM_serverAdapter_outData_enqOnly();
  void RL_controller_le_featureBRAM_serverAdapter_outData_deqOnly();
  void RL_controller_le_featureBRAM_serverAdapter_outData_enqAndDeq();
  void RL_controller_le_featureBRAM_serverAdapter_cnt_finalAdd();
  void RL_controller_le_featureBRAM_serverAdapter_s1__dreg_update();
  void RL_controller_le_featureBRAM_serverAdapter_stageReadResponseAlways();
  void RL_controller_le_featureBRAM_serverAdapter_moveToOutFIFO();
  void RL_controller_le_featureBRAM_serverAdapter_overRun();
  void RL_controller_le_weightBRAM_serverAdapter_outData_setFirstCore();
  void RL_controller_le_weightBRAM_serverAdapter_outData_setFirstEnq();
  void RL_controller_le_weightBRAM_serverAdapter_outData_enqOnly();
  void RL_controller_le_weightBRAM_serverAdapter_outData_deqOnly();
  void RL_controller_le_weightBRAM_serverAdapter_outData_enqAndDeq();
  void RL_controller_le_weightBRAM_serverAdapter_cnt_finalAdd();
  void RL_controller_le_weightBRAM_serverAdapter_s1__dreg_update();
  void RL_controller_le_weightBRAM_serverAdapter_stageReadResponseAlways();
  void RL_controller_le_weightBRAM_serverAdapter_moveToOutFIFO();
  void RL_controller_le_weightBRAM_serverAdapter_overRun();
  void RL_controller_le_feed_weights_request();
  void RL_controller_le_feed_weights_recieve();
  void RL_controller_le_feed_inputs_request();
  void RL_controller_le_feed_inputs_recv();
  void RL_controller_le_multiply_constants();
  void RL_controller_le_combine();
  void RL_controller_le_add_bias();
  void RL_controller_le_nonlinearity();
  void RL_controller_le_clear_regs();
  void RL_controller_le_save_outputs_req();
  void RL_test_one();
  void RL_test_end();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbController &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTbController &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTbController &backing);
};

#endif /* ifndef __mkTbController_h__ */
