/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Mon Oct 30 15:09:38 EDT 2017
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTbLayerEval.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTbLayerEval::MODEL_mkTbLayerEval()
{
  mkTbLayerEval_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTbLayerEval()
{
  MODEL_mkTbLayerEval *model = new MODEL_mkTbLayerEval();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTbLayerEval &INST_top = *((MOD_mkTbLayerEval *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_load_weights;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_load_weights;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_end;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_end;
	 INST_top.DEF__read__h66 = INST_top.INST_cycle1.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_end = !((INST_top.DEF__read__h66) <= 10u);
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_end = DEF_INST_top_DEF_CAN_FIRE_RL_test_end;
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_load_weights = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_load_weights = DEF_INST_top_DEF_CAN_FIRE_RL_test_load_weights;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_end)
	   INST_top.RL_test_end();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_load_weights)
	   INST_top.RL_test_load_weights();
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_cycle1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_pe1_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_0_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_1_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_2_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_3_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_4_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_5_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_6_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_weight_regs_0.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_weight_regs_1.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_weight_regs_2.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_weight_regs_3.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_weight_regs_4.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_weight_regs_5.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_weight_regs_6.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_weight_regs_7.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_partialSum.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_pe_vec_7_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_le1_step.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_psum.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTbLayerEval::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTbLayerEval_instance = new MOD_mkTbLayerEval(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTbLayerEval_instance->set_clk_0)("CLK");
}
void MODEL_mkTbLayerEval::destroy_model()
{
  delete mkTbLayerEval_instance;
  mkTbLayerEval_instance = NULL;
}
void MODEL_mkTbLayerEval::reset_model(bool asserted)
{
  (mkTbLayerEval_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTbLayerEval::get_instance()
{
  return mkTbLayerEval_instance;
}

/* Fill in version numbers */
void MODEL_mkTbLayerEval::get_version(unsigned int *year,
				      unsigned int *month,
				      char const **annotation,
				      char const **build)
{
  *year = 2014u;
  *month = 7u;
  *annotation = "A";
  *build = "34078";
}

/* Get the model creation time */
time_t MODEL_mkTbLayerEval::get_creation_time()
{
  
  /* Mon Oct 30 19:09:38 UTC 2017 */
  return 1509390578llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTbLayerEval::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTbLayerEval::dump_state()
{
  (mkTbLayerEval_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTbLayerEval & mkTbLayerEval_backing(tSimStateHdl simHdl)
{
  static MOD_mkTbLayerEval *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTbLayerEval(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTbLayerEval::dump_VCD_defs()
{
  (mkTbLayerEval_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTbLayerEval::dump_VCD(tVCDDumpType dt)
{
  (mkTbLayerEval_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTbLayerEval_backing(sim_hdl));
}
